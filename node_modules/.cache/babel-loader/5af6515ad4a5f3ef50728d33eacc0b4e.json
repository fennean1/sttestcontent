{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nconst ASSETS = CONST.ASSETS;\nexport const init = (app, setup) => {\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE);\n  const LINE_PERCENTAGE = 0.8;\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN);\n  const MEASURE_PIN_TEXTURE = new PIXI.Texture.from(ASSETS.MEASURE_PIN); // Global Vars \n\n  let Features;\n  let FirstRow;\n  let Background;\n  let ActiveID;\n  let Dragging;\n  const labels = {\n    1: \"One Whole\",\n    2: \"One Half\",\n    3: \"One Third\",\n    4: \"Fourth\",\n    5: \"5th\",\n    6: \"6th\",\n    7: \"7th\",\n    8: \"8th\",\n    9: \"9th\",\n    10: \"10th\",\n    11: \"11th\",\n    12: \"12th\"\n  }; // Layout Parameters\n\n  let WINDOW_WIDTH = setup.width;\n  let WINDOW_HEIGHT = setup.height;\n  let BAR_HEIGHT = WINDOW_HEIGHT / 15;\n  let BAR_WIDTH = WINDOW_WIDTH * 0.8;\n  let WALL_START = WINDOW_WIDTH / 2 - BAR_WIDTH / 2;\n  let ANCHORS = [];\n  let ROWS = []; //\n\n  function makeBackground() {\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH;\n    this.sprite.height = WINDOW_HEIGHT;\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup', globalPointerUp);\n    this.sprite.interactive = true;\n    app.stage.addChild(this.sprite);\n\n    this.draw = () => {\n      this.sprite.width = WINDOW_WIDTH;\n      this.sprite.height = WINDOW_HEIGHT;\n    };\n  }\n\n  class Row extends PIXI.Container {\n    constructor(num, den, width, ID) {\n      super(); // This\n\n      this.incDenonimator = inc => {\n        this.frameGraphics.clear();\n        this.frameGraphics.lineStyle(3, 0x000000);\n        this.frameGraphics.drawRoundedRect(0, 0, this.width - 3, BAR_HEIGHT, 1);\n        const frameTexture = app.renderer.generateTexture(this.frameGraphics); // New sprite starts as frame and then gets animated.\n\n        let s = new PIXI.Sprite(frameTexture);\n        this.addChild(s);\n        s.x = 0;\n\n        const onUpdate = () => {\n          this.draw();\n        };\n\n        if (inc > 0) {\n          const onComplete = () => {\n            s.on('pointerdown', this.spritePointerDown);\n            s.on('pointerup', this.spritePointerUp);\n            s.on('pointermove', this.spritePointerMoved);\n            s.interactive = true;\n            s.active = false;\n            this.sprites.push(s);\n          };\n\n          TweenMax.to(this, 0.25, {\n            denominator: this.denominator + 1,\n            onUpdate: onUpdate,\n            onComplete: onComplete\n          });\n        } else if (inc < 0) {\n          let removeme = this.sprites.pop();\n          this.removeChild(removeme);\n\n          const onComplete = () => {\n            this.removeChild(s);\n            this.sprites.forEach(s => {\n              s.label.x = this.width / this.denominator / 2;\n              s.label.text = labels[this.denominator];\n            });\n          };\n\n          TweenMax.to(this, 0.25, {\n            denominator: this.denominator - 1,\n            onUpdate: onUpdate,\n            onComplete: onComplete\n          });\n        }\n      };\n\n      this.interactive = true; // Default values\n\n      this.numerator = num;\n      this.denominator = den;\n      this.trueWidth = width;\n      this.id = ID;\n      this.sprites = [];\n      this.blockWidth = width / this.denominator; // Init Graphics A\n\n      this.graphicsA = new PIXI.Graphics();\n      this.graphicsA.beginFill(0xffffff);\n      this.graphicsA.lineStyle(3, 0x000000);\n      this.graphicsA.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureA = app.renderer.generateTexture(this.graphicsA); // Init Graphics B\n\n      this.graphicsB = new PIXI.Graphics();\n      this.graphicsB.beginFill(0xff4772);\n      this.graphicsB.lineStyle(3, 0x000000);\n      this.graphicsB.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureB = app.renderer.generateTexture(this.graphicsB); // Dummy frame for when animating between different fractional parts.\n\n      this.frameGraphics = new PIXI.Graphics(); // Generate Row\n\n      for (let i = 0; i < this.denominator; i++) {\n        let label = new PIXI.Text();\n        label.text = labels[this.denominator];\n        label.anchor.set(0.5);\n        label.x = this.blockWidth / 2;\n        label.y = BAR_HEIGHT / 2;\n        let s = new PIXI.Sprite.from(this.textureA);\n        s.on('pointerdown', this.spritePointerDown);\n        s.on('pointerup', this.spritePointerUp);\n        s.on('pointermove', this.spritePointerMoved);\n        s.interactive = true;\n        s.buttonMode = true;\n        s.active = false;\n        s.x = i * BAR_WIDTH / this.denominator;\n        s.y = 0;\n        s.addChild(label);\n        s.label = label;\n        this.sprites.push(s);\n        this.addChild(s);\n      } //  Attached methods\n\n\n      this.on('pointerdown', this.pointerDown);\n      this.on('pointerup', this.pointerUp);\n      this.on('pointermove', this.pointerMove);\n    }\n\n    reset() {\n      this.sprites.forEach(s => {\n        s.touched = false;\n      });\n    }\n\n    draw(width) {\n      if (width) {\n        this.trueWidth = width;\n      }\n\n      console.log(this);\n      this.blockWidth = this.trueWidth / this.denominator;\n      this.graphicsA.clear();\n      this.graphicsA.beginFill(0xffffff);\n      this.graphicsA.lineStyle(3, 0x000000);\n      this.graphicsA.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureA = app.renderer.generateTexture(this.graphicsA);\n      this.graphicsB.clear();\n      this.graphicsB.beginFill(0xff4772);\n      this.graphicsB.lineStyle(3, 0x000000);\n      this.graphicsB.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureB = app.renderer.generateTexture(this.graphicsB);\n\n      for (let i = 0; i < this.sprites.length; i++) {\n        if (this.sprites[i].active) {\n          this.sprites[i].texture = this.textureA;\n        } else {\n          this.sprites[i].texture = this.textureB;\n        }\n\n        this.sprites[i].x = this.blockWidth * i;\n        this.sprites[i].y = 0;\n      }\n    }\n\n    spritePointerDown(event) {\n      this.touched = true;\n      this.dragged = false;\n    }\n\n    spritePointerMoved(event) {\n      if (this.touched) {\n        console.log(\"pointermove\");\n        this.dragged = true;\n      }\n    }\n\n    spritePointerUp(event) {\n      console.log(\"spritepointerup\");\n      this.touched = false;\n      console.log('this.draggeed', this.dragged);\n\n      if (!this.parent.dragged && !Dragging) {\n        this.dragged = false;\n        this.active = !this.active;\n        this.alpha = 0.2;\n        this.texture = this.active ? this.parent.textureB : this.parent.textureA;\n        TweenLite.to(this, 0.4, {\n          alpha: 1\n        });\n      }\n    }\n\n    pointerDown(event) {\n      app.stage.addChild(this);\n      ActiveID = this.id;\n      this.data = event.data;\n      this.startIndex = Math.round(this.y / BAR_HEIGHT);\n      this.startWidth = this.width;\n      this.dragStartY = event.data.global.y;\n      this.touching = true;\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      };\n    }\n\n    pointerUp(event) {\n      if (this.dragged) {\n        let j = this.startIndex;\n        let i = Math.round(this.y / BAR_HEIGHT);\n        console.log(\"i,j\", i, j);\n        ROWS.splice(j, 1);\n        ROWS.splice(i, 0, this);\n        ROWS.forEach((r, i) => {\n          TweenLite.to(r, 0.2, {\n            y: ANCHORS[i]\n          });\n        });\n      }\n\n      this.reset();\n      this.dragged = false;\n      Dragging = false;\n      this.touching = false;\n    }\n\n    pointerMove(event) {\n      if (this.touching) {\n        Dragging = true;\n        this.y = event.data.global.y + this.deltaTouch.y;\n        this.dragged = true;\n      }\n    }\n\n  }\n\n  function globalPointerUp() {\n    Dragging = false;\n    ROWS.forEach(r => {\n      r.dragged = false;\n      r.touched = false;\n      r.sprites.map(s => {\n        s.dragged = false;\n        s.touched = false;\n      });\n    });\n  } // Called on resize\n\n\n  function resize(newFrame, flex) {\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame); //Row.draw()\n  }\n\n  function updateLayoutParams(newFrame) {\n    let frame;\n\n    if (newFrame) {\n      frame = newFrame;\n    } else {\n      frame = {\n        width: WINDOW_WIDTH,\n        height: WINDOW_HEIGHT\n      };\n    }\n  } // Loading Script\n\n\n  function load() {\n    if (setup.props.features) {\n      Features = setup.props.features;\n    }\n\n    Background = new makeBackground();\n\n    for (let i = 0; i < 12; i++) {\n      let newRow = new Row(0, i + 1, BAR_WIDTH, 0);\n      newRow.y = i * BAR_HEIGHT;\n      newRow.x = WALL_START;\n      ANCHORS.push(i * BAR_HEIGHT);\n      console.log(\"i*barHeight\", i * BAR_HEIGHT);\n      ROWS.push(newRow);\n      app.stage.addChild(newRow);\n    }\n  } // Functions attached to app: (need to be destroyed)\n\n\n  app.resize = frame => resize(frame);\n\n  app.resizable = true;\n  load();\n};","map":{"version":3,"sources":["/Users/andrewfenner/Documents/MindResearch/Prototypes/newtestunit/src/js/newfractionstacks.js"],"names":["PIXI","CONST","TweenMax","TimelineLite","Power2","Elastic","CSSPlugin","TweenLite","TimelineMax","ASSETS","init","app","setup","BLUE_TEXTURE","Texture","from","BLUE_CIRCLE","LINE_PERCENTAGE","PIN_TEXTURE","SHARP_PIN","MEASURE_PIN_TEXTURE","MEASURE_PIN","Features","FirstRow","Background","ActiveID","Dragging","labels","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","BAR_HEIGHT","BAR_WIDTH","WALL_START","ANCHORS","ROWS","makeBackground","sprite","Sprite","BLUE_GRADIENT","x","y","on","globalPointerUp","interactive","stage","addChild","draw","Row","Container","constructor","num","den","ID","incDenonimator","inc","frameGraphics","clear","lineStyle","drawRoundedRect","frameTexture","renderer","generateTexture","s","onUpdate","onComplete","spritePointerDown","spritePointerUp","spritePointerMoved","active","sprites","push","to","denominator","removeme","pop","removeChild","forEach","label","text","numerator","trueWidth","id","blockWidth","graphicsA","Graphics","beginFill","textureA","graphicsB","textureB","i","Text","anchor","set","buttonMode","pointerDown","pointerUp","pointerMove","reset","touched","console","log","length","texture","event","dragged","parent","alpha","data","startIndex","Math","round","startWidth","dragStartY","global","touching","deltaTouch","j","splice","r","map","resize","newFrame","flex","updateLayoutParams","frame","load","props","features","newRow","resizable"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nconst ASSETS = CONST.ASSETS\n\nexport const init = (app, setup) => {\n\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE)\n  const LINE_PERCENTAGE = 0.8\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN)\n  const MEASURE_PIN_TEXTURE = new PIXI.Texture.from(ASSETS.MEASURE_PIN)\n\n// Global Vars \n  let Features;\n  let FirstRow;\n  let Background;\n  let ActiveID;\n  let Dragging;\n\n  const labels = {\n    1: \"One Whole\",\n    2: \"One Half\",\n    3: \"One Third\",\n    4: \"Fourth\",\n    5: \"5th\",\n    6: \"6th\",\n    7: \"7th\",\n    8: \"8th\",\n    9: \"9th\",\n    10: \"10th\",\n    11: \"11th\",\n    12: \"12th\"\n  };\n\n\n  // Layout Parameters\n  let WINDOW_WIDTH = setup.width\n  let WINDOW_HEIGHT = setup.height\n  let BAR_HEIGHT = WINDOW_HEIGHT/15\n  let BAR_WIDTH = WINDOW_WIDTH*0.8\n  let WALL_START = WINDOW_WIDTH/2 - BAR_WIDTH/2\n  let ANCHORS = []\n  let ROWS = []\n  \n\n  //\n\n\n\n  function makeBackground(){\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH\n    this.sprite.height = WINDOW_HEIGHT\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup',globalPointerUp)\n    this.sprite.interactive = true\n\n    app.stage.addChild(this.sprite)\n\n    this.draw = () => {\n        this.sprite.width = WINDOW_WIDTH\n        this.sprite.height = WINDOW_HEIGHT\n    }\n  }\n\n  class Row extends PIXI.Container {\n\n    constructor(num,den,width,ID) {\n      super()\n\n      // This\n      this.interactive = true\n\n        // Default values\n      this.numerator = num\n      this.denominator = den\n      this.trueWidth = width\n      this.id = ID\n      this.sprites = []\n      this.blockWidth = width / this.denominator\n\n\n      // Init Graphics A\n      this.graphicsA = new PIXI.Graphics()\n      this.graphicsA.beginFill(0xffffff)\n      this.graphicsA.lineStyle(3,0x000000) \n      this.graphicsA.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureA = app.renderer.generateTexture(this.graphicsA)\n\n      // Init Graphics B\n      this.graphicsB  = new PIXI.Graphics()\n      this.graphicsB.beginFill(0xff4772)\n      this.graphicsB.lineStyle(3,0x000000) \n      this.graphicsB.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureB = app.renderer.generateTexture(this.graphicsB)\n\n      // Dummy frame for when animating between different fractional parts.\n      this.frameGraphics = new PIXI.Graphics()    \n  \n      // Generate Row\n      for (let i = 0;i<this.denominator;i++) {\n        let label = new PIXI.Text()\n        label.text = labels[this.denominator]\n        label.anchor.set(0.5)\n        label.x = this.blockWidth/2\n        label.y = BAR_HEIGHT/2\n        let s = new PIXI.Sprite.from(this.textureA)\n        s.on('pointerdown',this.spritePointerDown)\n        s.on('pointerup',this.spritePointerUp)\n        s.on('pointermove',this.spritePointerMoved)\n        s.interactive = true\n        s.buttonMode = true\n        s.active = false\n        s.x = i*BAR_WIDTH/this.denominator\n        s.y = 0\n        s.addChild(label)\n        s.label = label\n        this.sprites.push(s)\n        this.addChild(s)\n      }\n            //  Attached methods\n      this.on('pointerdown',this.pointerDown)\n      this.on('pointerup',this.pointerUp)\n      this.on('pointermove',this.pointerMove)\n\n    }\n\n    reset() {\n      this.sprites.forEach(s=>{s.touched = false})\n    }\n\n  \n\n    incDenonimator = (inc) => {\n      this.frameGraphics.clear()\n      this.frameGraphics.lineStyle(3,0x000000) \n      this.frameGraphics.drawRoundedRect(0,0,this.width-3,BAR_HEIGHT,1)\n      const frameTexture = app.renderer.generateTexture(this.frameGraphics)\n      \n      // New sprite starts as frame and then gets animated.\n      let s = new PIXI.Sprite(frameTexture)\n      this.addChild(s)\n      s.x  = 0\n      const onUpdate = ()=>{this.draw()}\n      if (inc > 0){\n        const onComplete = ()=>{\n          s.on('pointerdown',this.spritePointerDown)\n          s.on('pointerup',this.spritePointerUp)\n          s.on('pointermove',this.spritePointerMoved)\n          s.interactive = true\n          s.active = false\n          this.sprites.push(s)\n        }\n        TweenMax.to(this, 0.25, {denominator: this.denominator+1,onUpdate: onUpdate,onComplete: onComplete})\n      } else if (inc < 0) {\n        let removeme  = this.sprites.pop()\n        this.removeChild(removeme)\n        const onComplete = ()=>{\n          this.removeChild(s)\n          this.sprites.forEach(s=>{\n            s.label.x = this.width/this.denominator/2\n            s.label.text = labels[this.denominator]})\n        }\n        TweenMax.to(this, 0.25, {denominator: this.denominator-1,onUpdate: onUpdate,onComplete: onComplete})\n      }\n    }\n\n    draw(width) {\n\n      if (width) {\n        this.trueWidth = width\n      }\n\n      console.log(this)\n\n      this.blockWidth = (this.trueWidth)/this.denominator\n\n      this.graphicsA.clear()\n      this.graphicsA.beginFill(0xffffff)\n      this.graphicsA.lineStyle(3,0x000000) \n      this.graphicsA.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureA = app.renderer.generateTexture(this.graphicsA)\n\n      this.graphicsB.clear()\n      this.graphicsB.beginFill(0xff4772)\n      this.graphicsB.lineStyle(3,0x000000) \n      this.graphicsB.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureB = app.renderer.generateTexture(this.graphicsB)\n\n      for (let i = 0;i<this.sprites.length;i++){\n        if (this.sprites[i].active){\n          this.sprites[i].texture = this.textureA\n        } else {\n          this.sprites[i].texture = this.textureB\n        }\n\n        this.sprites[i].x = this.blockWidth*i\n        this.sprites[i].y = 0\n      }\n    }\n\n    spritePointerDown(event){\n      this.touched = true\n      this.dragged = false\n    }\n\n    spritePointerMoved(event) {\n      if (this.touched){\n        console.log(\"pointermove\")\n        this.dragged = true\n      }\n    }\n\n    spritePointerUp(event){\n      console.log(\"spritepointerup\")\n         this.touched = false\n         console.log('this.draggeed',this.dragged)\n     if (!this.parent.dragged && !Dragging) {\n        this.dragged = false\n        this.active = !this.active\n        this.alpha = 0.2\n        this.texture = this.active ? this.parent.textureB : this.parent.textureA\n        TweenLite.to(this,0.4,{alpha: 1})\n       }\n    }\n\n \n   pointerDown(event) {\n\n      app.stage.addChild(this)\n      ActiveID = this.id\n      this.data = event.data\n      this.startIndex = Math.round(this.y/BAR_HEIGHT)\n      this.startWidth = this.width\n      this.dragStartY = event.data.global.y\n      this.touching = true\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n    }\n \n   pointerUp(event) {\n    if (this.dragged){\n      let j = this.startIndex\n      let i = Math.round(this.y/BAR_HEIGHT)\n      console.log(\"i,j\",i,j)\n      ROWS.splice(j,1)\n      ROWS.splice(i,0,this)\n      ROWS.forEach((r,i)=> {\n        TweenLite.to(r,0.2,{y: ANCHORS[i]})\n      })\n    } \n      this.reset()\n      this.dragged = false\n      Dragging = false\n      this.touching = false\n    }\n\n    pointerMove(event) {\n      if (this.touching){\n        Dragging = true\n        this.y = event.data.global.y + this.deltaTouch.y\n        this.dragged = true\n      }\n    }\n  }\n\n\n\n  function globalPointerUp(){\n    Dragging = false\n    ROWS.forEach(r=>{\n      r.dragged = false\n      r.touched = false\n      r.sprites.map(s=>{\n        s.dragged = false\n        s.touched = false})\n    })\n  }\n  \n  // Called on resize\n  function resize(newFrame,flex){\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame)\n    //Row.draw()\n  }\n\n  function updateLayoutParams(newFrame){\n    let frame;\n    if (newFrame){\n      frame = newFrame\n    } else {\n      frame = {width: WINDOW_WIDTH,height: WINDOW_HEIGHT}\n    }\n  }\n\n\n  // Loading Script\n  function load(){\n    if (setup.props.features){\n      Features = setup.props.features\n    }\n\n    Background = new makeBackground()\n\n\n    for (let i = 0;i<12;i++){\n      let newRow = new Row(0,i+1,BAR_WIDTH,0)\n      newRow.y = i*BAR_HEIGHT\n      newRow.x = WALL_START\n      ANCHORS.push(i*BAR_HEIGHT)\n      console.log(\"i*barHeight\",i*BAR_HEIGHT)\n      ROWS.push(newRow)\n      app.stage.addChild(newRow)\n    }\n  }\n\n  // Functions attached to app: (need to be destroyed)\n  app.resize = (frame) => resize(frame)\n  app.resizable = true\n\n  load()\n};\n"]},"metadata":{},"sourceType":"module"}