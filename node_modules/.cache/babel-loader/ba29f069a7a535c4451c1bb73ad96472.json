{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { thisExpression } from \"@babel/types\";\nconst ASSETS = CONST.ASSETS;\nexport class Draggable extends PIXI.Sprite {\n  constructor(texture) {\n    super();\n    this.dragged = false;\n    this.touching = false;\n    this.interactive = true;\n    this.lockX = false;\n    this.lockY = false;\n    this.texture = texture;\n    this.on('pointerdown', this.pointerDown);\n    this.on('pointermove', this.pointerMove);\n    this.on('pointerup', this.pointerUp);\n    this.on('pointerupoutside', this.pointerUpOutside);\n  }\n\n  pointerDown(event) {\n    this.touching = true;\n    this.deltaTouch = {\n      x: this.x - event.data.global.x,\n      y: this.y - event.data.global.y\n    };\n  }\n\n  pointerMove(event) {\n    if (this.touching) {\n      if (!this.lockX) {\n        this.x = event.data.global.x + this.deltaTouch.x;\n      }\n\n      if (!this.lockY) {\n        this.y = event.data.global.y + this.deltaTouch.y;\n      }\n\n      this.dragged = true;\n    }\n  }\n\n  pointerUp(event) {\n    this.touching = false;\n  }\n\n  pointerUpOutside(event) {\n    this.touching = false;\n  }\n\n}\nexport class Fraction extends PIXI.Container {\n  constructor(n, d, w) {\n    super();\n    console.log(\"w\", w);\n    this._width = w;\n    this.numerator = n + \"\";\n    this.denominator = d + \"\";\n    this.numDigits = this.numerator.length;\n    this.denDigits = this.denominator.length;\n    this.maxDigits = Math.max(this.numDigits, this.denDigits);\n    this.fontSize = w / this.maxDigits;\n    this.compression = 0.8;\n    this.lineCompression = 20;\n\n    if (this.maxDigits == 3) {\n      this.compression = 0.8;\n      this.lineCompression = 30;\n    } else if (this.maxDigits == 2) {\n      this.compression = 0.7;\n      this.lineCompression = 25;\n    } // Numerator\n\n\n    this.N = new PIXI.Text();\n    this.N.anchor.x = 0.5;\n    this.N.x = this._width / 2;\n    this.N.y = 0;\n    this.N.text = n;\n    this.N.style.fontSize = this.fontSize;\n    this.addChild(this.N); // Denominator\n\n    this.D = new PIXI.Text();\n    this.D.anchor.x = 0.5;\n    this.D.x = this._width / 2;\n    this.D.y = this.height;\n    this.D.text = d;\n    this.D.style.fontSize = this.fontSize;\n    this.addChild(this.D); // Mid Line\n\n    this.L = new PIXI.Graphics();\n    this.L.lineStyle(this._width / this.lineCompression, 0x000000);\n    this.L.lineTo(this._width, 0);\n    this.L.y = this.height / 2;\n    this.addChild(this.L);\n    this.draw(n, d, w);\n  }\n\n  draw(n, d, w) {\n    this.numerator = n + \"\";\n    this.denominator = d + \"\";\n    this.numDigits = this.numerator.length;\n    this.denDigits = this.denominator.length;\n    this.maxDigits = Math.max(this.numDigits, this.denDigits);\n    this.fontSize = this.width / this.maxDigits;\n\n    if (this.maxDigits == 3) {\n      this.compression = 1.2;\n      this.lineCompression = 30;\n    } else if (this.maxDigits == 2) {\n      this.compression = 1.1;\n      this.lineCompression = 25;\n    } // Numerator\n\n\n    this.N.x = this._width / 2;\n    this.N.y = 0;\n    this.N.style.fontSize = this.fontSize * this.compression; // Denominator\n\n    this.D.x = this._width / 2;\n    this.D.y = this.N.height;\n    this.D.style.fontSize = this.fontSize * this.compression; // Line\n\n    this.L.lineStyle(this._width / this.lineCompression, 0x000000);\n    this.L.lineTo(this._width, 0);\n    this.L.y = this.N.height;\n  }\n\n  set(n, d) {\n    let nDigits = n.toString().length;\n    let dDigits = d.toString().length;\n    this.numerator = n;\n    this.denominator = d;\n    this.N.text = n;\n    this.D.text = d; // Only sets text unless rezising is necessary.\n\n    if (nDigits != this.numDigits && dDigits != this.denDigits) {\n      this.draw(n, d);\n    }\n  }\n\n} // TODO: Change this to extended class.\n\n/*\nexport class NumberLine extends PIXI.Container {\n  constructor(width,height,max){\n    super()\n    this.max = max \n    this.height = height\n    this.width = width\n\n    this.ticks = []\n    this.labels = []\n    this.line = new PIXI.Graphics()\n\n  }\n\n\n  init = (n) => {\n     this.line.lineStyle(LINE_THICKNESS,0x000000)\n     this.line.x = LINE_START\n     this.line.y = ARENA_HEIGHT/2\n     this.line.lineTo(LINE_WIDTH,0)\n     app.stage.addChild(this.line)\n\n     for (let i = 0;i<this.max;i++){\n         let newTick = new PIXI.Graphics()\n         newTick.lineStyle(LINE_THICKNESS,0x000000)\n         newTick.x = this.line.x \n         if(flip){\n           newTick.y = this.line.y + LINE_THICKNESS/2\n           newTick.lineTo(0,-MINOR_TICK_HEIGHT)\n         } else {\n           newTick.y = this.line.y - LINE_THICKNESS/2\n           newTick.lineTo(0,MINOR_TICK_HEIGHT)\n         }\n         app.stage.addChild(newTick)\n         this.ticks.push(newTick)\n\n         // Setup Labels Here\n         let newLabel = new PIXI.Text(i,{\n           fontFamily: \"Arial\",\n           fontSize: DX/2,\n           fill: \"0x000000\",\n           align: \"center\"\n         })\n         newLabel.anchor.x = 0.5\n         this.labels.push(newLabel)\n         newLabel.x = this.line.x + DX*i\n         newLabel.y = this.line.y + MINOR_TICK_HEIGHT\n         if (flip){\n           newLabel.y = this.line.y - 2*MINOR_TICK_HEIGHT\n           newLabel.anchor.y = 1\n           newLabel.text.anchor.y = 0.5\n         }\n         app.stage.addChild(newLabel)\n     }\n     this.increment(0)\n  }\n\n  this.getSetup = ()=> {\n      // update tickspan etc. based on line max.\n  }\n\n  this.increment = (inc) => {\n      // Animation go here\n      this.max += inc\n\n      // Update State - (Context Specific)\n      state.lineMax = this.max\n      updateLayoutParams()\n\n      this.ticks.forEach((e,i)=> {\n         if (i > this.max){\n             TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n         } else {\n             TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n         }\n      })\n\n      this.labels.forEach((e,i)=> {\n       if (i > this.max){\n           TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n           TweenLite.to(e,0.5,{alpha: 0})\n       } else {\n           TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n           TweenLite.to(e,0.5,{alpha: 1})\n       }\n    })\n  }\n\n  this.draw = () => {\n    let _y;\n    if (flip){\n     _y = TOP_LINE_Y\n    } else {\n      _y = BOTTOM_LINE_Y\n    }\n     this.line.width = LINE_WIDTH\n     this.line.height = LINE_THICKNESS\n     this.line.x = LINE_START\n     this.line.y = _y\n     this.ticks.forEach((e,i)=> {\n         e.width = TICK_THICKNESS\n         e.height = MINOR_TICK_HEIGHT\n         e.y = this.line.y - LINE_THICKNESS/2\n         if (flip){\n           e.y = this.line.y + LINE_THICKNESS/2\n         }\n         if (i > this.max){\n             e.x = LINE_WIDTH + this.line.x \n         } else {\n             e.x =  LINE_WIDTH/this.max*i + this.line.x\n         }\n      })\n      this.labels.forEach((e,i)=> {\n       e.y = this.line.y + MINOR_TICK_HEIGHT\n       if (flip){\n         e.y = this.line.y - MINOR_TICK_HEIGHT\n       }\n       e.style.fontSize = DX/2\n       if (i > this.max){\n           e.x = LINE_WIDTH + this.line.x \n       } else {\n           e.x =  LINE_WIDTH/this.max*i + this.line.x\n       }\n    })\n  }\n  this.init()\n}\n\n*/","map":{"version":3,"sources":["/Users/andrewfenner/Documents/MindResearch/Prototypes/newtestunit/src/js/api.js"],"names":["PIXI","CONST","TweenMax","TimelineLite","Power2","Elastic","CSSPlugin","TweenLite","TimelineMax","thisExpression","ASSETS","Draggable","Sprite","constructor","texture","dragged","touching","interactive","lockX","lockY","on","pointerDown","pointerMove","pointerUp","pointerUpOutside","event","deltaTouch","x","data","global","y","Fraction","Container","n","d","w","console","log","_width","numerator","denominator","numDigits","length","denDigits","maxDigits","Math","max","fontSize","compression","lineCompression","N","Text","anchor","text","style","addChild","D","height","L","Graphics","lineStyle","lineTo","draw","width","set","nDigits","toString","dDigits"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { thisExpression } from \"@babel/types\";\nconst ASSETS = CONST.ASSETS\n\n\nexport class Draggable extends PIXI.Sprite {\n  constructor(texture){\n    super()\n    this.dragged = false\n    this.touching = false\n    this.interactive = true\n    this.lockX = false \n    this.lockY = false\n    this.texture = texture\n    this.on('pointerdown',this.pointerDown)\n    this.on('pointermove',this.pointerMove)\n    this.on('pointerup',this.pointerUp)\n    this.on('pointerupoutside',this.pointerUpOutside)\n  }\n\n  pointerDown(event){\n    this.touching = true\n    this.deltaTouch = {\n      x: this.x - event.data.global.x,\n      y: this.y - event.data.global.y\n    }\n  }\n  \n  pointerMove(event){\n    if (this.touching){\n      if (!this.lockX){\n        this.x = event.data.global.x + this.deltaTouch.x\n      } \n      if (!this.lockY){\n        this.y = event.data.global.y + this.deltaTouch.y\n      }\n      this.dragged = true\n    }\n  }\n\n  pointerUp(event){\n    this.touching = false\n  }\n  \n  pointerUpOutside(event){\n    this.touching = false\n  }\n}\n\n\n\nexport class Fraction extends PIXI.Container {\n  constructor(n,d,w){\n    super()\n    console.log(\"w\",w)\n    this._width = w\n    this.numerator = n+\"\"\n    this.denominator = d+\"\"\n    this.numDigits = this.numerator.length\n    this.denDigits = this.denominator.length \n    this.maxDigits = Math.max(this.numDigits,this.denDigits)\n    this.fontSize = w/(this.maxDigits)\n    this.compression = 0.8\n    this.lineCompression = 20\n\n    if (this.maxDigits == 3){\n      this.compression = 0.8\n      this.lineCompression = 30\n    } else if (this.maxDigits == 2){\n      this.compression = 0.7\n      this.lineCompression = 25\n    }\n\n    // Numerator\n    this.N = new PIXI.Text()\n    this.N.anchor.x = 0.5\n    this.N.x = this._width/2\n    this.N.y = 0\n    this.N.text = n\n    this.N.style.fontSize = this.fontSize\n    this.addChild(this.N)\n\n    // Denominator\n    this.D = new PIXI.Text()\n    this.D.anchor.x = 0.5\n    this.D.x = this._width/2\n    this.D.y = this.height\n    this.D.text = d\n    this.D.style.fontSize = this.fontSize\n    this.addChild(this.D)\n\n    // Mid Line\n    this.L = new PIXI.Graphics()\n    this.L.lineStyle(this._width/this.lineCompression,0x000000)\n    this.L.lineTo(this._width,0)\n    this.L.y = this.height/2\n    this.addChild(this.L)\n\n    this.draw(n,d,w)\n\n  }\n\n  draw(n,d,w){\n    this.numerator = n+\"\"\n    this.denominator = d+\"\"\n    this.numDigits = this.numerator.length\n    this.denDigits = this.denominator.length \n    this.maxDigits = Math.max(this.numDigits,this.denDigits)\n    this.fontSize = this.width/(this.maxDigits)\n\n    if (this.maxDigits == 3){\n      this.compression = 1.2\n      this.lineCompression = 30\n    } else if (this.maxDigits == 2){\n      this.compression = 1.1\n      this.lineCompression = 25\n    }\n\n    \n    // Numerator\n    this.N.x = this._width/2\n    this.N.y = 0\n    this.N.style.fontSize = this.fontSize*this.compression\n\n    // Denominator\n    this.D.x = this._width/2\n    this.D.y = this.N.height\n    this.D.style.fontSize = this.fontSize*this.compression\n\n    // Line\n    this.L.lineStyle(this._width/this.lineCompression,0x000000)\n    this.L.lineTo(this._width,0)\n    this.L.y = this.N.height\n  }\n\n  set(n,d){\n    let nDigits = n.toString().length\n    let dDigits = d.toString().length \n    this.numerator = n \n    this.denominator = d\n    this.N.text = n\n    this.D.text = d\n\n    // Only sets text unless rezising is necessary.\n    if (nDigits != this.numDigits && dDigits != this.denDigits){\n      this.draw(n,d)\n    }\n  }\n}\n\n\n\n// TODO: Change this to extended class.\n/*\nexport class NumberLine extends PIXI.Container {\n  constructor(width,height,max){\n    super()\n    this.max = max \n    this.height = height\n    this.width = width\n\n    this.ticks = []\n    this.labels = []\n    this.line = new PIXI.Graphics()\n\n  }\n\n\n  init = (n) => {\n     this.line.lineStyle(LINE_THICKNESS,0x000000)\n     this.line.x = LINE_START\n     this.line.y = ARENA_HEIGHT/2\n     this.line.lineTo(LINE_WIDTH,0)\n     app.stage.addChild(this.line)\n\n     for (let i = 0;i<this.max;i++){\n         let newTick = new PIXI.Graphics()\n         newTick.lineStyle(LINE_THICKNESS,0x000000)\n         newTick.x = this.line.x \n         if(flip){\n           newTick.y = this.line.y + LINE_THICKNESS/2\n           newTick.lineTo(0,-MINOR_TICK_HEIGHT)\n         } else {\n           newTick.y = this.line.y - LINE_THICKNESS/2\n           newTick.lineTo(0,MINOR_TICK_HEIGHT)\n         }\n         app.stage.addChild(newTick)\n         this.ticks.push(newTick)\n\n         // Setup Labels Here\n         let newLabel = new PIXI.Text(i,{\n           fontFamily: \"Arial\",\n           fontSize: DX/2,\n           fill: \"0x000000\",\n           align: \"center\"\n         })\n         newLabel.anchor.x = 0.5\n         this.labels.push(newLabel)\n         newLabel.x = this.line.x + DX*i\n         newLabel.y = this.line.y + MINOR_TICK_HEIGHT\n         if (flip){\n           newLabel.y = this.line.y - 2*MINOR_TICK_HEIGHT\n           newLabel.anchor.y = 1\n           newLabel.text.anchor.y = 0.5\n         }\n         app.stage.addChild(newLabel)\n     }\n     this.increment(0)\n  }\n\n  this.getSetup = ()=> {\n      // update tickspan etc. based on line max.\n  }\n\n  this.increment = (inc) => {\n      // Animation go here\n      this.max += inc\n\n      // Update State - (Context Specific)\n      state.lineMax = this.max\n      updateLayoutParams()\n\n      this.ticks.forEach((e,i)=> {\n         if (i > this.max){\n             TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n         } else {\n             TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n         }\n      })\n\n      this.labels.forEach((e,i)=> {\n       if (i > this.max){\n           TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n           TweenLite.to(e,0.5,{alpha: 0})\n       } else {\n           TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n           TweenLite.to(e,0.5,{alpha: 1})\n       }\n    })\n  }\n\n  this.draw = () => {\n    let _y;\n    if (flip){\n     _y = TOP_LINE_Y\n    } else {\n      _y = BOTTOM_LINE_Y\n    }\n     this.line.width = LINE_WIDTH\n     this.line.height = LINE_THICKNESS\n     this.line.x = LINE_START\n     this.line.y = _y\n     this.ticks.forEach((e,i)=> {\n         e.width = TICK_THICKNESS\n         e.height = MINOR_TICK_HEIGHT\n         e.y = this.line.y - LINE_THICKNESS/2\n         if (flip){\n           e.y = this.line.y + LINE_THICKNESS/2\n         }\n         if (i > this.max){\n             e.x = LINE_WIDTH + this.line.x \n         } else {\n             e.x =  LINE_WIDTH/this.max*i + this.line.x\n         }\n      })\n      this.labels.forEach((e,i)=> {\n       e.y = this.line.y + MINOR_TICK_HEIGHT\n       if (flip){\n         e.y = this.line.y - MINOR_TICK_HEIGHT\n       }\n       e.style.fontSize = DX/2\n       if (i > this.max){\n           e.x = LINE_WIDTH + this.line.x \n       } else {\n           e.x =  LINE_WIDTH/this.max*i + this.line.x\n       }\n    })\n  }\n  this.init()\n}\n\n*/"]},"metadata":{},"sourceType":"module"}