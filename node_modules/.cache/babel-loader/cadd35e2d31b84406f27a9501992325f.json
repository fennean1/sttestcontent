{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nconst ASSETS = CONST.ASSETS;\nexport const init = (app, setup) => {\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE);\n  const LINE_PERCENTAGE = 0.8;\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN);\n  const MEASURE_PIN_TEXTURE = new PIXI.Texture.from(ASSETS.MEASURE_PIN); // Global Vars \n\n  let Features = setup.props.features ? setup.props.features : null;\n  let FirstRow;\n  let Background;\n  let ActiveID;\n  let Dragging;\n  let ActiveRow;\n  const labels = {\n    1: \"One Whole\",\n    2: \"One Half\",\n    3: \"One Third\",\n    4: \"Fourth\",\n    5: \"5th\",\n    6: \"6th\",\n    7: \"7th\",\n    8: \"8th\",\n    9: \"9th\",\n    10: \"10th\",\n    11: \"11th\",\n    12: \"12th\"\n  }; // Layout Parameters\n\n  let WINDOW_WIDTH = setup.width;\n  let WINDOW_HEIGHT = setup.height;\n  let BAR_HEIGHT = WINDOW_HEIGHT / 15;\n  let BAR_WIDTH = WINDOW_WIDTH * 0.8;\n  let WALL_START_X = WINDOW_WIDTH / 2 - BAR_WIDTH / 2;\n  let WALL_START_Y = 2 * BAR_HEIGHT;\n  let ANCHORS = [];\n  let ROWS = [];\n\n  function makeBackground() {\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH;\n    this.sprite.height = WINDOW_HEIGHT;\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup', globalPointerUp);\n    this.sprite.interactive = true;\n    app.stage.addChild(this.sprite);\n\n    this.draw = () => {\n      this.sprite.width = WINDOW_WIDTH;\n      this.sprite.height = WINDOW_HEIGHT;\n    };\n  }\n\n  let PlusButton = new PIXI.Sprite.from(ASSETS.PLUS_SQUARE);\n  PlusButton.interactive = true;\n  PlusButton.anchor.set(0.5);\n  PlusButton.on('pointerdown', () => {\n    PlusButton.interactive = false;\n    incActiveFrac(1);\n    setTimeout(() => {\n      PlusButton.interactive = true;\n    }, 300);\n  });\n  PlusButton.width = INC_BUTTONS_HEIGHT;\n  PlusButton.height = INC_BUTTONS_HEIGHT;\n  let MinusButton = new PIXI.Sprite.from(ASSETS.MINUS_SQUARE);\n  MinusButton.interactive = true;\n  MinusButton.anchor.set(0.5);\n  MinusButton.on('pointerdown', () => {\n    MinusButton.interactive = false;\n    incActiveFrac(-1);\n    setTimeout(() => {\n      MinusButton.interactive = true;\n    }, 300);\n  });\n  MinusButton.width = BAR_HEIGHT / 2.5;\n  MinusButton.height = BAR_HEIGHT / 2.5;\n\n  function placeButtons() {\n    let w = ActiveRow.container.width;\n    let h = ActiveRow.container.height;\n    let x = ActiveRow.container.x + w;\n    let y = ActiveRow.container.y;\n    PlusButton.width = INC_BUTTONS_HEIGHT;\n    PlusButton.height = INC_BUTTONS_HEIGHT;\n    MinusButton.width = INC_BUTTONS_HEIGHT;\n    MinusButton.height = INC_BUTTONS_HEIGHT;\n    PlusButton.x = x + BAR_HEIGHT / 2;\n    PlusButton.y = y + BAR_HEIGHT / 2;\n    MinusButton.x = x - w - BAR_HEIGHT / 2;\n    MinusButton.y = y + BAR_HEIGHT / 2;\n  }\n\n  class Row extends PIXI.Container {\n    constructor(num, den, width, ID) {\n      super(); // This\n\n      this.incDenonimator = inc => {\n        this.frameGraphics.clear();\n        this.frameGraphics.lineStyle(3, 0x000000);\n        this.frameGraphics.drawRoundedRect(0, 0, this.width - 3, BAR_HEIGHT, 1);\n        const frameTexture = app.renderer.generateTexture(this.frameGraphics); // New sprite starts as frame and then gets animated.\n\n        let s = new PIXI.Sprite(frameTexture);\n        this.addChild(s);\n        s.x = 0;\n\n        const onUpdate = () => {\n          this.draw();\n        };\n\n        if (inc > 0) {\n          const onComplete = () => {\n            s.on('pointerdown', this.spritePointerDown);\n            s.on('pointerup', this.spritePointerUp);\n            s.on('pointermove', this.spritePointerMoved);\n            s.interactive = true;\n            s.active = false;\n            this.sprites.push(s);\n          };\n\n          TweenMax.to(this, 0.25, {\n            denominator: this.denominator + 1,\n            onUpdate: onUpdate,\n            onComplete: onComplete\n          });\n        } else if (inc < 0) {\n          let removeme = this.sprites.pop();\n          this.removeChild(removeme);\n\n          const onComplete = () => {\n            this.removeChild(s);\n            this.sprites.forEach(s => {\n              s.label.x = this.width / this.denominator / 2;\n              s.label.text = labels[this.denominator];\n            });\n          };\n\n          TweenMax.to(this, 0.25, {\n            denominator: this.denominator - 1,\n            onUpdate: onUpdate,\n            onComplete: onComplete\n          });\n        }\n      };\n\n      this.interactive = true; // Default values\n\n      this.numerator = num;\n      this.denominator = den;\n      this.trueWidth = width;\n      this.id = ID;\n      this.sprites = [];\n      this.blockWidth = width / this.denominator; // Init Graphics A\n\n      this.graphicsA = new PIXI.Graphics();\n      this.graphicsA.beginFill(0xffffff);\n      this.graphicsA.lineStyle(3, 0x000000);\n      this.graphicsA.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureA = app.renderer.generateTexture(this.graphicsA); // Init Graphics B\n\n      this.graphicsB = new PIXI.Graphics();\n      this.graphicsB.beginFill(0xff4772);\n      this.graphicsB.lineStyle(3, 0x000000);\n      this.graphicsB.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureB = app.renderer.generateTexture(this.graphicsB); // Dummy frame for when animating between different fractional parts.\n\n      this.frameGraphics = new PIXI.Graphics(); // Generate Row\n\n      for (let i = 0; i < this.denominator; i++) {\n        let label = new PIXI.Text();\n        label.text = labels[this.denominator];\n        label.alpha = 0;\n        label.anchor.set(0.5);\n        label.x = this.blockWidth / 2;\n        label.y = BAR_HEIGHT / 2;\n        let s = new PIXI.Sprite.from(this.textureA);\n        s.on('pointerdown', this.spritePointerDown);\n        s.on('pointerup', this.spritePointerUp);\n        s.on('pointermove', this.spritePointerMoved);\n        s.interactive = true;\n        s.buttonMode = true;\n        s.active = false;\n        s.x = i * BAR_WIDTH / this.denominator;\n        s.y = 0;\n        s.addChild(label);\n        s.label = label;\n        this.sprites.push(s);\n        this.addChild(s);\n      } //  Attached methods\n\n\n      this.on('pointerdown', this.pointerDown);\n      this.on('pointerup', this.pointerUp);\n      this.on('pointermove', this.pointerMove);\n    }\n\n    reset() {\n      this.sprites.forEach(s => {\n        s.touched = false;\n      });\n    }\n\n    draw(width) {\n      if (width) {\n        this.trueWidth = width;\n      }\n\n      console.log(this);\n      this.blockWidth = this.trueWidth / this.denominator;\n      this.graphicsA.clear();\n      this.graphicsA.beginFill(0xffffff);\n      this.graphicsA.lineStyle(3, 0x000000);\n      this.graphicsA.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureA = app.renderer.generateTexture(this.graphicsA);\n      this.graphicsB.clear();\n      this.graphicsB.beginFill(0xff4772);\n      this.graphicsB.lineStyle(3, 0x000000);\n      this.graphicsB.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureB = app.renderer.generateTexture(this.graphicsB);\n\n      for (let i = 0; i < this.sprites.length; i++) {\n        if (this.sprites[i].active) {\n          this.sprites[i].texture = this.textureA;\n        } else {\n          this.sprites[i].texture = this.textureB;\n        }\n\n        this.sprites[i].x = this.blockWidth * i;\n        this.sprites[i].y = 0;\n      }\n    }\n\n    spritePointerDown(event) {\n      this.touched = true;\n      this.dragged = false;\n    }\n\n    spritePointerMoved(event) {\n      if (this.touched) {\n        console.log(\"pointermove\");\n        this.dragged = true;\n      }\n    }\n\n    spritePointerUp(event) {\n      console.log(\"spritepointerup\");\n      this.touched = false;\n      console.log('this.draggeed', this.dragged);\n\n      if (!this.parent.dragged && !Dragging) {\n        this.dragged = false;\n        this.active = !this.active;\n        this.alpha = 0.2;\n        this.texture = this.active ? this.parent.textureB : this.parent.textureA;\n        this.label.alpha = this.active ? 1 : 0;\n        TweenLite.to(this, 0.4, {\n          alpha: 1\n        });\n      }\n    }\n\n    pointerDown(event) {\n      app.stage.addChild(this);\n      ActiveRow = this;\n      ActiveID = this.id;\n      this.data = event.data;\n      this.startIndex = Math.round((this.y - WALL_START_Y) / BAR_HEIGHT);\n      this.startWidth = this.width;\n      this.dragStartY = event.data.global.y;\n      this.touching = true;\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      };\n    }\n\n    pointerUp(event) {\n      if (this.dragged) {\n        let j = this.startIndex;\n        let i = Math.round((this.y - WALL_START_Y) / BAR_HEIGHT);\n        ROWS.splice(j, 1);\n        ROWS.splice(i, 0, this);\n        ROWS.forEach((r, i) => {\n          TweenLite.to(r, 0.2, {\n            y: ANCHORS[i] + WALL_START_Y\n          });\n        });\n      }\n\n      this.reset();\n      this.dragged = false;\n      Dragging = false;\n      this.touching = false;\n    }\n\n    pointerMove(event) {\n      if (this.touching) {\n        Dragging = true;\n        this.y = event.data.global.y + this.deltaTouch.y;\n        this.dragged = true;\n      }\n    }\n\n  }\n\n  function globalPointerUp() {\n    ActiveRow.pointerUp();\n    Dragging = false;\n    ROWS.forEach(r => {\n      r.dragged = false;\n      r.touched = false;\n      r.sprites.map(s => {\n        s.dragged = false;\n        s.touched = false;\n      });\n    });\n  } // Called on resize\n\n\n  function resize(newFrame, flex) {\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame); //Row.draw()\n  }\n\n  function updateLayoutParams(newFrame) {\n    let frame;\n\n    if (newFrame) {\n      frame = newFrame;\n    } else {\n      frame = {\n        width: WINDOW_WIDTH,\n        height: WINDOW_HEIGHT\n      };\n    }\n  } // Loading Script\n\n\n  function load() {\n    let rows = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n    if (Features) {\n      rows = Features.values;\n    }\n\n    Background = new makeBackground();\n\n    for (let i = 0; i < rows.length; i++) {\n      let newRow = new Row(0, rows[i], BAR_WIDTH, 0);\n      newRow.y = i * BAR_HEIGHT + WALL_START_Y;\n      newRow.x = WALL_START_X;\n      ANCHORS.push(i * BAR_HEIGHT);\n      console.log(\"i*barHeight\", i * BAR_HEIGHT);\n      ROWS.push(newRow);\n      app.stage.addChild(newRow);\n    }\n  } // Functions attached to app: (need to be destroyed)\n\n\n  app.resize = frame => resize(frame);\n\n  app.resizable = true;\n  load();\n};","map":{"version":3,"sources":["/Users/andrewfenner/Documents/MindResearch/Prototypes/newtestunit/src/js/newfractionwall.js"],"names":["PIXI","CONST","TweenMax","TimelineLite","Power2","Elastic","CSSPlugin","TweenLite","TimelineMax","ASSETS","init","app","setup","BLUE_TEXTURE","Texture","from","BLUE_CIRCLE","LINE_PERCENTAGE","PIN_TEXTURE","SHARP_PIN","MEASURE_PIN_TEXTURE","MEASURE_PIN","Features","props","features","FirstRow","Background","ActiveID","Dragging","ActiveRow","labels","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","BAR_HEIGHT","BAR_WIDTH","WALL_START_X","WALL_START_Y","ANCHORS","ROWS","makeBackground","sprite","Sprite","BLUE_GRADIENT","x","y","on","globalPointerUp","interactive","stage","addChild","draw","PlusButton","PLUS_SQUARE","anchor","set","incActiveFrac","setTimeout","INC_BUTTONS_HEIGHT","MinusButton","MINUS_SQUARE","placeButtons","w","container","h","Row","Container","constructor","num","den","ID","incDenonimator","inc","frameGraphics","clear","lineStyle","drawRoundedRect","frameTexture","renderer","generateTexture","s","onUpdate","onComplete","spritePointerDown","spritePointerUp","spritePointerMoved","active","sprites","push","to","denominator","removeme","pop","removeChild","forEach","label","text","numerator","trueWidth","id","blockWidth","graphicsA","Graphics","beginFill","textureA","graphicsB","textureB","i","Text","alpha","buttonMode","pointerDown","pointerUp","pointerMove","reset","touched","console","log","length","texture","event","dragged","parent","data","startIndex","Math","round","startWidth","dragStartY","global","touching","deltaTouch","j","splice","r","map","resize","newFrame","flex","updateLayoutParams","frame","load","rows","values","newRow","resizable"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nconst ASSETS = CONST.ASSETS\n\nexport const init = (app, setup) => {\n\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE)\n  const LINE_PERCENTAGE = 0.8\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN)\n  const MEASURE_PIN_TEXTURE = new PIXI.Texture.from(ASSETS.MEASURE_PIN)\n\n// Global Vars \n  let Features = setup.props.features ? setup.props.features : null\n  let FirstRow;\n  let Background;\n  let ActiveID;\n  let Dragging;\n  let ActiveRow;\n\n  const labels = {\n    1: \"One Whole\",\n    2: \"One Half\",\n    3: \"One Third\",\n    4: \"Fourth\",\n    5: \"5th\",\n    6: \"6th\",\n    7: \"7th\",\n    8: \"8th\",\n    9: \"9th\",\n    10: \"10th\",\n    11: \"11th\",\n    12: \"12th\"\n  };\n\n\n  // Layout Parameters\n  let WINDOW_WIDTH = setup.width\n  let WINDOW_HEIGHT = setup.height\n  let BAR_HEIGHT = WINDOW_HEIGHT/15\n  let BAR_WIDTH = WINDOW_WIDTH*0.8\n  let WALL_START_X = WINDOW_WIDTH/2 - BAR_WIDTH/2\n  let WALL_START_Y = 2*BAR_HEIGHT \n  let ANCHORS = []\n  let ROWS = []\n\n  function makeBackground(){\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH\n    this.sprite.height = WINDOW_HEIGHT\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup',globalPointerUp)\n    this.sprite.interactive = true\n\n    app.stage.addChild(this.sprite)\n\n    this.draw = () => {\n        this.sprite.width = WINDOW_WIDTH\n        this.sprite.height = WINDOW_HEIGHT\n    }\n  }\n\n  let PlusButton = new PIXI.Sprite.from(ASSETS.PLUS_SQUARE)\n  \n  PlusButton.interactive = true\n  PlusButton.anchor.set(0.5)\n  PlusButton.on('pointerdown',()=>{\n    PlusButton.interactive = false\n    incActiveFrac(1)\n    setTimeout(()=>{PlusButton.interactive = true},300)\n  })\n  PlusButton.width = INC_BUTTONS_HEIGHT\n  PlusButton.height = INC_BUTTONS_HEIGHT\n\n\n  let MinusButton = new PIXI.Sprite.from(ASSETS.MINUS_SQUARE)\n  MinusButton.interactive = true\n  MinusButton.anchor.set(0.5)\n  MinusButton.on('pointerdown',()=>{\n    MinusButton.interactive = false\n    incActiveFrac(-1)\n    setTimeout(()=>{MinusButton.interactive = true},300)\n  })\n  MinusButton.width = BAR_HEIGHT/2.5\n  MinusButton.height = BAR_HEIGHT/2.5\n\n\n  function placeButtons(){\n\n    let w = ActiveRow.container.width\n    let h = ActiveRow.container.height \n    let x = ActiveRow.container.x + w \n    let y = ActiveRow.container.y\n\n    PlusButton.width = INC_BUTTONS_HEIGHT\n    PlusButton.height = INC_BUTTONS_HEIGHT\n    MinusButton.width = INC_BUTTONS_HEIGHT\n    MinusButton.height = INC_BUTTONS_HEIGHT\n  \n    PlusButton.x = x +  BAR_HEIGHT/2\n    PlusButton.y = y + BAR_HEIGHT/2\n    MinusButton.x = x - w - BAR_HEIGHT/2\n    MinusButton.y = y + BAR_HEIGHT/2\n\n  }\n\n  class Row extends PIXI.Container {\n\n    constructor(num,den,width,ID) {\n      super()\n\n      // This\n      this.interactive = true\n\n        // Default values\n      this.numerator = num\n      this.denominator = den\n      this.trueWidth = width\n      this.id = ID\n      this.sprites = []\n      this.blockWidth = width / this.denominator\n\n\n      // Init Graphics A\n      this.graphicsA = new PIXI.Graphics()\n      this.graphicsA.beginFill(0xffffff)\n      this.graphicsA.lineStyle(3,0x000000) \n      this.graphicsA.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureA = app.renderer.generateTexture(this.graphicsA)\n\n      // Init Graphics B\n      this.graphicsB  = new PIXI.Graphics()\n      this.graphicsB.beginFill(0xff4772)\n      this.graphicsB.lineStyle(3,0x000000) \n      this.graphicsB.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureB = app.renderer.generateTexture(this.graphicsB)\n\n      // Dummy frame for when animating between different fractional parts.\n      this.frameGraphics = new PIXI.Graphics()    \n  \n      // Generate Row\n      for (let i = 0;i<this.denominator;i++) {\n        let label = new PIXI.Text()\n        label.text = labels[this.denominator]\n        label.alpha = 0\n        label.anchor.set(0.5)\n        label.x = this.blockWidth/2\n        label.y = BAR_HEIGHT/2\n        let s = new PIXI.Sprite.from(this.textureA)\n        s.on('pointerdown',this.spritePointerDown)\n        s.on('pointerup',this.spritePointerUp)\n        s.on('pointermove',this.spritePointerMoved)\n        s.interactive = true\n        s.buttonMode = true\n        s.active = false\n        s.x = i*BAR_WIDTH/this.denominator\n        s.y = 0\n        s.addChild(label)\n        s.label = label\n        this.sprites.push(s)\n        this.addChild(s)\n      }\n            //  Attached methods\n      this.on('pointerdown',this.pointerDown)\n      this.on('pointerup',this.pointerUp)\n      this.on('pointermove',this.pointerMove)\n\n    }\n\n    reset() {\n      this.sprites.forEach(s=>{s.touched = false})\n    }\n\n  \n\n    incDenonimator = (inc) => {\n      this.frameGraphics.clear()\n      this.frameGraphics.lineStyle(3,0x000000) \n      this.frameGraphics.drawRoundedRect(0,0,this.width-3,BAR_HEIGHT,1)\n      const frameTexture = app.renderer.generateTexture(this.frameGraphics)\n      \n      // New sprite starts as frame and then gets animated.\n      let s = new PIXI.Sprite(frameTexture)\n      this.addChild(s)\n      s.x  = 0\n      const onUpdate = ()=>{this.draw()}\n      if (inc > 0){\n        const onComplete = ()=>{\n          s.on('pointerdown',this.spritePointerDown)\n          s.on('pointerup',this.spritePointerUp)\n          s.on('pointermove',this.spritePointerMoved)\n          s.interactive = true\n          s.active = false\n          this.sprites.push(s)\n        }\n        TweenMax.to(this, 0.25, {denominator: this.denominator+1,onUpdate: onUpdate,onComplete: onComplete})\n      } else if (inc < 0) {\n        let removeme  = this.sprites.pop()\n        this.removeChild(removeme)\n        const onComplete = ()=>{\n          this.removeChild(s)\n          this.sprites.forEach(s=>{\n            s.label.x = this.width/this.denominator/2\n            s.label.text = labels[this.denominator]})\n        }\n        TweenMax.to(this, 0.25, {denominator: this.denominator-1,onUpdate: onUpdate,onComplete: onComplete})\n      }\n    }\n\n    draw(width) {\n\n      if (width) {\n        this.trueWidth = width\n      }\n\n      console.log(this)\n\n      this.blockWidth = (this.trueWidth)/this.denominator\n\n      this.graphicsA.clear()\n      this.graphicsA.beginFill(0xffffff)\n      this.graphicsA.lineStyle(3,0x000000) \n      this.graphicsA.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureA = app.renderer.generateTexture(this.graphicsA)\n\n      this.graphicsB.clear()\n      this.graphicsB.beginFill(0xff4772)\n      this.graphicsB.lineStyle(3,0x000000) \n      this.graphicsB.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureB = app.renderer.generateTexture(this.graphicsB)\n\n      for (let i = 0;i<this.sprites.length;i++){\n        if (this.sprites[i].active){\n          this.sprites[i].texture = this.textureA\n        } else {\n          this.sprites[i].texture = this.textureB\n        }\n\n        this.sprites[i].x = this.blockWidth*i\n        this.sprites[i].y = 0\n      }\n    }\n\n    spritePointerDown(event){\n      this.touched = true\n      this.dragged = false\n    }\n\n    spritePointerMoved(event) {\n      if (this.touched){\n        console.log(\"pointermove\")\n        this.dragged = true\n      }\n    }\n\n    spritePointerUp(event){\n      console.log(\"spritepointerup\")\n         this.touched = false\n         console.log('this.draggeed',this.dragged)\n     if (!this.parent.dragged && !Dragging) {\n        this.dragged = false\n        this.active = !this.active\n        this.alpha = 0.2\n        this.texture = this.active ? this.parent.textureB : this.parent.textureA\n        this.label.alpha = this.active ? 1 : 0\n        TweenLite.to(this,0.4,{alpha: 1})\n       }\n    }\n\n \n   pointerDown(event) {\n      app.stage.addChild(this)\n      ActiveRow = this\n      ActiveID = this.id\n      this.data = event.data\n      this.startIndex = Math.round((this.y-WALL_START_Y)/BAR_HEIGHT)\n      this.startWidth = this.width\n      this.dragStartY = event.data.global.y\n      this.touching = true\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n    }\n  \n  \n \n   pointerUp(event) {\n    if (this.dragged){\n      let j = this.startIndex\n      let i = Math.round((this.y-WALL_START_Y)/BAR_HEIGHT)\n      ROWS.splice(j,1)\n      ROWS.splice(i,0,this)\n      ROWS.forEach((r,i)=> {\n        TweenLite.to(r,0.2,{y: ANCHORS[i]+WALL_START_Y})\n      })\n    } \n      this.reset()\n      this.dragged = false\n      Dragging = false\n      this.touching = false\n    }\n\n    pointerMove(event) {\n      if (this.touching){\n        Dragging = true\n        this.y = event.data.global.y + this.deltaTouch.y\n        this.dragged = true\n      }\n    }\n  }\n\n\n\n  function globalPointerUp(){\n    ActiveRow.pointerUp()\n    Dragging = false\n    ROWS.forEach(r=>{\n      r.dragged = false\n      r.touched = false\n      r.sprites.map(s=>{\n        s.dragged = false\n        s.touched = false})\n    })\n  }\n  \n  // Called on resize\n  function resize(newFrame,flex){\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame)\n    //Row.draw()\n  }\n\n  function updateLayoutParams(newFrame){\n    let frame;\n    if (newFrame){\n      frame = newFrame\n    } else {\n      frame = {width: WINDOW_WIDTH,height: WINDOW_HEIGHT}\n    }\n  }\n\n\n  // Loading Script\n  function load(){\n    let rows = [1,2,3,4,5,6,7,8,9,10,11,12]\n    if (Features){\n        rows = Features.values \n    } \n\n\n    Background = new makeBackground()\n    for (let i = 0;i<rows.length;i++){\n      let newRow = new Row(0,rows[i],BAR_WIDTH,0)\n      newRow.y = i*BAR_HEIGHT + WALL_START_Y\n      newRow.x = WALL_START_X\n      ANCHORS.push(i*BAR_HEIGHT)\n      console.log(\"i*barHeight\",i*BAR_HEIGHT)\n      ROWS.push(newRow)\n      app.stage.addChild(newRow)\n    }\n  }\n\n  // Functions attached to app: (need to be destroyed)\n  app.resize = (frame) => resize(frame)\n  app.resizable = true\n\n  load()\n};\n"]},"metadata":{},"sourceType":"module"}