{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nconst ASSETS = CONST.ASSETS;\nexport const init = (app, setup) => {\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE);\n  const LINE_PERCENTAGE = 0.8;\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN); // Initial State\n\n  let state = {\n    valA: 8,\n    valB: 8,\n    lineMax: 30\n  };\n  console.log(\"setupwidth\", setup.width);\n  console.log(\"windowheight\", window.innerHeight); // Layout Parameters\n\n  let WINDOW_WIDTH = setup.width;\n  let BAR_STEP = setup.height / 8;\n  let BAR_HEIGHT = setup.height / 10;\n  let WINDOW_HEIGHT = setup.height;\n  let H_W_RATIO = setup.height / setup.width;\n  let LANDSCAPE = H_W_RATIO < 3 / 4;\n  let ARENA_WIDTH = LANDSCAPE ? 4 / 3 * setup.height : setup.width;\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3 / 4 * setup.width;\n  let LINE_WIDTH = LINE_PERCENTAGE * WINDOW_WIDTH;\n  let LINE_THICKNESS = LINE_WIDTH / 200;\n  let TICK_THICKNESS = 2 * LINE_THICKNESS / 3;\n  let MAJOR_TICK_HEIGHT = LINE_WIDTH / 20;\n  let MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT / 2;\n  let DX = LINE_WIDTH / state.lineMax;\n  let LINE_START = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n  let STRIP_HEIGHT = LINE_WIDTH / 12;\n  let TOP_LINE_Y = WINDOW_HEIGHT / 4;\n  let BOTTOM_LINE_Y = WINDOW_HEIGHT * 3 / 4;\n  let INC_BUTTONS_HEIGHT = BAR_HEIGHT / 2.75;\n  let DY = (BOTTOM_LINE_Y - TOP_LINE_Y - 4 * BAR_HEIGHT) / 3; // RELEVENT\n\n  let ActiveRow;\n  let ActiveIndex = 0;\n  let FirstRow;\n  let SecondRow;\n  let ThirdRow;\n  let FourthRow;\n  var Rows;\n  let PlusButton = new PIXI.Sprite.from(ASSETS.PLUS_SQUARE);\n  PlusButton.interactive = true;\n  PlusButton.anchor.x = 1;\n  PlusButton.anchor.y = 0.5;\n  PlusButton.on('pointerdown', () => {\n    PlusButton.interactive = false;\n    incActiveFrac(1);\n    setTimeout(() => {\n      PlusButton.interactive = true;\n    }, 300);\n  });\n  PlusButton.width = INC_BUTTONS_HEIGHT;\n  PlusButton.height = INC_BUTTONS_HEIGHT;\n  let MinusButton = new PIXI.Sprite.from(ASSETS.MINUS_SQUARE);\n  MinusButton.interactive = true;\n  MinusButton.anchor.x = 1;\n  MinusButton.anchor.y = 0.5;\n  MinusButton.on('pointerdown', () => {\n    MinusButton.interactive = false;\n    incActiveFrac(-1);\n    setTimeout(() => {\n      MinusButton.interactive = true;\n    }, 300);\n  });\n  MinusButton.width = BAR_HEIGHT / 2.5;\n  MinusButton.height = BAR_HEIGHT / 2.5;\n\n  function placeButtons() {\n    let x = Rows[ActiveIndex].container.x;\n    let y = Rows[ActiveIndex].container.y;\n    let w = Rows[ActiveIndex].container.width;\n    let h = Rows[ActiveIndex].container.height;\n    PlusButton.width = INC_BUTTONS_HEIGHT;\n    PlusButton.height = INC_BUTTONS_HEIGHT;\n    MinusButton.width = INC_BUTTONS_HEIGHT;\n    MinusButton.height = INC_BUTTONS_HEIGHT;\n    PlusButton.x = x - PlusButton.width / 8;\n    PlusButton.y = y + BAR_HEIGHT / 4;\n    MinusButton.x = x - MinusButton.width / 8;\n    MinusButton.y = y + BAR_HEIGHT * 3 / 4;\n  }\n\n  let LeftWhisker = new PIXI.Graphics();\n  let RightWhisker = new PIXI.Graphics();\n  let MiddleWhisker = new PIXI.Graphics();\n  let A;\n  let B; // Reference to entities. - deprecated.\n\n  let backGround;\n  let numberLine;\n  let topNumberLine;\n  let pinA;\n  let pinB;\n  let stripA;\n  let stripB;\n  let stripBLabel;\n  let stripALabel;\n  let incButton;\n  let decButton;\n  let activePin;\n\n  function incActiveFrac(inc) {\n    Rows[ActiveIndex].incDenonimator(inc);\n  } // Constructors (should not be called on re-draw)\n\n\n  function makeNumberLine(flip) {\n    this.tickSpan = 1;\n    this.labelSpan = 1;\n    this.max = state.lineMax;\n    this.ticks = []; // size 120\n\n    this.labels = [];\n    this.line = new PIXI.Graphics();\n\n    this.init = n => {\n      this.line.lineStyle(LINE_THICKNESS, 0x000000);\n      this.line.x = LINE_START;\n      this.line.y = ARENA_HEIGHT / 2;\n      this.line.lineTo(LINE_WIDTH, 0);\n      app.stage.addChild(this.line);\n\n      for (let i = 0; i < 120; i++) {\n        let newTick = new PIXI.Graphics();\n        newTick.lineStyle(LINE_THICKNESS, 0x000000);\n        newTick.x = this.line.x;\n\n        if (flip) {\n          newTick.y = this.line.y + LINE_THICKNESS / 2;\n          newTick.lineTo(0, -MINOR_TICK_HEIGHT);\n        } else {\n          newTick.y = this.line.y - LINE_THICKNESS / 2;\n          newTick.lineTo(0, MINOR_TICK_HEIGHT);\n        }\n\n        app.stage.addChild(newTick);\n        this.ticks.push(newTick); // Setup Labels Here\n\n        let newLabel = new PIXI.Text(i, {\n          fontFamily: \"Arial\",\n          fontSize: DX / 2,\n          fill: \"0x000000\",\n          align: \"center\"\n        });\n        newLabel.anchor.x = 0.5;\n        this.labels.push(newLabel);\n        newLabel.x = this.line.x + DX * i;\n        newLabel.y = this.line.y + MINOR_TICK_HEIGHT;\n\n        if (flip) {\n          newLabel.y = this.line.y - 2 * MINOR_TICK_HEIGHT;\n          newLabel.anchor.y = 1;\n          newLabel.text.anchor.y = 0.5;\n        }\n\n        app.stage.addChild(newLabel);\n      }\n\n      this.increment(0);\n    };\n\n    this.getSetup = () => {// update tickspan etc. based on line max.\n    };\n\n    this.increment = inc => {\n      // Animation go here\n      this.max += inc; // Update State - (Context Specific)\n\n      state.lineMax = this.max;\n      updateLayoutParams();\n      this.ticks.forEach((e, i) => {\n        if (i > this.max) {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH + this.line.x\n          });\n        } else {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH / this.max * i + this.line.x\n          });\n        }\n      });\n      this.labels.forEach((e, i) => {\n        if (i > this.max) {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH + this.line.x\n          });\n          TweenLite.to(e, 0.5, {\n            alpha: 0\n          });\n        } else {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH / this.max * i + this.line.x\n          });\n          TweenLite.to(e, 0.5, {\n            alpha: 1\n          });\n        }\n      });\n    };\n\n    this.draw = () => {\n      let _y;\n\n      if (flip) {\n        _y = TOP_LINE_Y;\n      } else {\n        _y = BOTTOM_LINE_Y;\n      }\n\n      this.line.width = LINE_WIDTH;\n      this.line.height = LINE_THICKNESS;\n      this.line.x = LINE_START;\n      this.line.y = _y;\n      this.ticks.forEach((e, i) => {\n        e.width = TICK_THICKNESS;\n        e.height = MINOR_TICK_HEIGHT;\n        e.y = this.line.y - LINE_THICKNESS / 2;\n\n        if (flip) {\n          e.y = this.line.y + LINE_THICKNESS / 2;\n        }\n\n        if (i > this.max) {\n          e.x = LINE_WIDTH + this.line.x;\n        } else {\n          e.x = LINE_WIDTH / this.max * i + this.line.x;\n        }\n      });\n      this.labels.forEach((e, i) => {\n        e.y = this.line.y + MINOR_TICK_HEIGHT;\n\n        if (flip) {\n          e.y = this.line.y - MINOR_TICK_HEIGHT;\n        }\n\n        e.style.fontSize = DX / 2;\n\n        if (i > this.max) {\n          e.x = LINE_WIDTH + this.line.x;\n        } else {\n          e.x = LINE_WIDTH / this.max * i + this.line.x;\n        }\n      });\n    };\n\n    this.init();\n  }\n\n  function makeBackground() {\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH;\n    this.sprite.height = WINDOW_HEIGHT;\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup', globalPointerUp);\n    this.sprite.interactive = true;\n    app.stage.addChild(this.sprite);\n\n    this.draw = () => {\n      this.sprite.width = WINDOW_WIDTH;\n      this.sprite.height = WINDOW_HEIGHT;\n    };\n  }\n\n  function makePin(id) {\n    this.sprite = new PIXI.Sprite();\n    this.sprite.id = id;\n    this.sprite.texture = PIN_TEXTURE;\n    this.sprite.interactive = true;\n    this.sprite.anchor.x = 0.5;\n\n    if (id == 0) {\n      this.sprite.on('pointerdown', onDragStart);\n      this.sprite.on('pointermove', onDragMove);\n      this.sprite.on('pointerup', onDragEnd);\n    } else if (id == 1) {\n      this.sprite.on('pointerdown', onDragStart);\n      this.sprite.on('pointermove', onDragMove);\n      this.sprite.on('pointerup', onDragEnd);\n    }\n\n    this.sprite.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n    this.sprite.val = 8;\n    app.stage.addChild(this.sprite);\n\n    this.sprite.round = () => {\n      // Pre Computation\n      let rawLineX = this.sprite.x - numberLine.line.x;\n      let n = Math.round(rawLineX / DX); // Setting\n\n      this.sprite.x = numberLine.line.x + n * DX;\n      this.sprite.val = n;\n      drawWhiskers(); // There's gotta be a better pattern than this\n\n      if (this.sprite.id == 0) {\n        state.valA = this.sprite.val;\n      } else if (this.sprite.id == 1) {\n        state.valB = this.sprite.val;\n      }\n    };\n\n    this.draw = () => {\n      this.sprite.width = STRIP_HEIGHT;\n      this.sprite.height = STRIP_HEIGHT;\n      this.sprite.y = BOTTOM_LINE_Y + MINOR_TICK_HEIGHT + DX / 2;\n      this.sprite.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2 + this.sprite.val * DX;\n    };\n\n    this.draw();\n  }\n\n  function onBDragStart(event) {\n    app.stage.addChild(this);\n    this.deltaTouch = {\n      x: this.x - event.data.global.x,\n      y: this.y - event.data.global.y\n    };\n    this.dragging = true;\n    this.data = event.data;\n  }\n\n  function onBDragEnd(event) {\n    this.dragging = false;\n    this.data = null;\n    this.round();\n    drawWhiskers();\n    placeButtons();\n  }\n\n  function onBDragMove(event) {\n    if (this.dragging) {\n      drawWhiskers();\n      let newPosition = this.data.getLocalPosition(this.parent);\n      this.x = newPosition.x + this.deltaTouch.x; // Keep within number line bounds.\n\n      if (this.x < WINDOW_WIDTH / 2 - LINE_WIDTH / 2) {\n        this.dragging = false;\n        this.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n      } else if (this.x > WINDOW_WIDTH / 2 + LINE_WIDTH / 2) {\n        this.dragging = false;\n        this.x = WINDOW_WIDTH / 2 + LINE_WIDTH / 2;\n      }\n    }\n  } // Pin Drag Functions\n\n\n  function onDragStart(event) {\n    app.stage.addChild(this);\n    this.deltaTouch = {\n      x: this.x - event.data.global.x,\n      y: this.y - event.data.global.y\n    };\n    this.dragging = true;\n    this.data = event.data;\n  }\n\n  function onDragEnd(event) {\n    this.dragging = false;\n    this.data = null;\n    this.round();\n    Rows[ActiveIndex].draw(this.x - LINE_START);\n    drawWhiskers();\n    placeButtons();\n  }\n\n  function onDragMove(event) {\n    if (this.dragging) {\n      let width = this.x - LINE_START;\n      Rows[ActiveIndex].draw(width);\n      drawWhiskers();\n      placeButtons();\n      let newPosition = this.data.getLocalPosition(this.parent);\n      this.x = newPosition.x + this.deltaTouch.x; // Keep within number line bounds.\n\n      if (this.x < WINDOW_WIDTH / 2 - LINE_WIDTH / 2) {\n        this.dragging = false;\n        this.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n      } else if (this.x > WINDOW_WIDTH / 2 + LINE_WIDTH / 2) {\n        this.dragging = false;\n        this.x = WINDOW_WIDTH / 2 + LINE_WIDTH / 2;\n      }\n    }\n  }\n\n  function makeArrowButton(inc) {\n    let button = new PIXI.Sprite.from(CONST.ASSETS.ARROW);\n    button.inc = inc;\n    button.interactive = true;\n    button.anchor.set(0.5);\n    button.on('pointerdown', () => {\n      numberLine.increment(inc);\n      topNumberLine.increment(inc);\n      resize(null, false);\n    });\n    app.stage.addChild(button);\n\n    button.draw = () => {\n      if (button.inc == -5) {\n        button.width = STRIP_HEIGHT / 2;\n        button.height = STRIP_HEIGHT / 2;\n        button.x = WINDOW_WIDTH - 1.1 * button.width;\n        button.y = WINDOW_HEIGHT / 2 + 1 / 2 * button.width;\n        button.rotation = Math.PI;\n      } else if (button.inc == 5) {\n        button.width = STRIP_HEIGHT / 2;\n        button.height = STRIP_HEIGHT / 2;\n        button.x = WINDOW_WIDTH - 1.1 * button.width;\n        button.y = WINDOW_HEIGHT / 2 - 1 / 2 * button.width;\n      }\n    };\n\n    return button;\n  }\n\n  app.stage.on('pointerdown', resizeLine);\n  app.stage.interactive = true;\n\n  function resizeLine(event) {}\n\n  function Row(num, den, width, ID) {\n    // Internal Params\n    let touching = true;\n    let activated = true; // Default values\n\n    this.numerator = num;\n    this.denominator = den;\n    this.width = width;\n    this.id = ID;\n    this.container = new PIXI.Container();\n    this.container.id = ID;\n    this.container.width = width;\n    this.container.interactive = true;\n    this.container.y = BOTTOM_LINE_Y - BAR_HEIGHT;\n    this.container.x = LINE_START;\n    this.sprites = [];\n    this.blockWidth = width / this.denominator;\n    this.blockA = new PIXI.Graphics();\n    this.blockA.lineStyle(3, 0x000000);\n    this.blockA.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n    let myA = app.renderer.generateTexture(this.blockA);\n    this.blockB = new PIXI.Graphics();\n    this.blockB.beginFill(0xff4772);\n    this.blockB.lineStyle(3, 0x000000);\n    this.blockB.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n    let myB = app.renderer.generateTexture(this.blockB);\n    let g = new PIXI.Graphics();\n\n    this.incDenonimator = inc => {\n      g.clear();\n      g.lineStyle(3, 0x000000);\n      g.drawRoundedRect(0, 0, this.width, BAR_HEIGHT, 1);\n      let R = app.renderer.generateTexture(g);\n      let s = new PIXI.Sprite();\n      this.container.addChild(s);\n      s.texture = R;\n      s.x = 0;\n\n      if (inc > 0) {\n        const onComplete = () => {\n          s.on('pointerdown', spritePointerDown);\n          s.on('pointerup', spritePointerUp);\n          s.on('pointermove', spritePointerMoved);\n          s.interactive = true;\n          s.active = false;\n          this.sprites.push(s);\n          this.draw();\n        };\n\n        TweenMax.to(this, 0.25, {\n          denominator: this.denominator + 1,\n          onUpdate: this.draw,\n          onComplete: onComplete\n        });\n      } else if (inc < 0) {\n        let removeme = this.sprites.pop();\n        this.container.removeChild(removeme);\n\n        const onComplete = () => {\n          this.draw();\n          this.container.removeChild(s);\n        };\n\n        TweenMax.to(this, 0.25, {\n          denominator: this.denominator - 1,\n          onUpdate: this.draw,\n          onComplete: onComplete\n        });\n      }\n    };\n\n    this.draw = width => {\n      if (width) {\n        this.width = width;\n      }\n\n      this.blockWidth = this.width / this.denominator;\n      this.blockA.clear();\n      this.blockA.lineStyle(3, 0x000000);\n      this.blockA.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      myA = app.renderer.generateTexture(this.blockA);\n      this.blockB.clear();\n      this.blockB.beginFill(0xff4772);\n      this.blockB.lineStyle(3, 0x000000);\n      this.blockB.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      myB = app.renderer.generateTexture(this.blockB);\n\n      for (let i = 0; i < this.sprites.length; i++) {\n        if (this.sprites[i].active) {\n          this.sprites[i].texture = myB;\n        } else {\n          this.sprites[i].texture = myA;\n        }\n\n        this.sprites[i].x = this.blockWidth * i;\n        this.sprites[i].y = 0;\n      }\n    };\n\n    for (let i = 0; i < this.denominator; i++) {\n      console.log(\"balls\");\n      let s = new PIXI.Sprite.from(myA);\n      s.on('pointerdown', spritePointerDown);\n      s.on('pointerup', spritePointerUp);\n      s.on('pointermove', spritePointerMoved);\n      s.interactive = true;\n      s.active = false;\n      s.x = i * LINE_WIDTH / this.denominator;\n      s.y = WINDOW_HEIGHT / 2 - BAR_HEIGHT;\n      this.sprites.push(s);\n      this.container.addChild(s);\n    } //  Attached methods\n\n\n    this.container.on('pointerdown', containerPointerDown);\n    this.container.on('pointerup', containerPointerUp);\n    this.container.on('pointermove', containerPointerMove); // Add children\n\n    app.stage.addChild(this.container);\n    this.width = this.container.width;\n\n    function spritePointerDown(event) {\n      this.touched = true;\n      this.dragged = false;\n    }\n\n    function spritePointerMoved(event) {\n      if (this.touched) {\n        console.log(\"pointermove\");\n        this.dragged = true;\n      }\n    }\n\n    function spritePointerUp(event) {\n      this.touched = false;\n      console.log('this.draggeed', this.dragged);\n\n      if (!this.dragged && activated) {\n        this.dragged = false;\n        this.active = !this.active;\n        this.alpha = 0.2;\n        this.texture = this.active ? myB : myA;\n        TweenLite.to(this, 0.4, {\n          alpha: 1\n        });\n      }\n    }\n\n    function containerPointerDown(event) {\n      activated = this.id == ActiveIndex;\n      ActiveIndex = this.id;\n      drawWhiskers();\n      placeButtons();\n      pinA.sprite.x = this.width + LINE_START;\n      pinA.sprite.round();\n      this.data = event.data;\n      this.startWidth = this.width;\n      this.dragStartY = event.data.global.y;\n      this.touching = true;\n      touching = true;\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      };\n    }\n\n    function containerPointerUp(event) {\n      this.touching = false;\n      touching = false;\n    }\n\n    function containerPointerMove(event) {\n      if (this.touching) {\n        const newPosition = this.data.getLocalPosition(this.parent); //this.y = event.data.global.y + this.deltaTouch.y\n        //this.x = event.data.global.x + this.deltaTouch.x\n        //pinA.sprite.x = this.x + this.width\n\n        this.dragged = true;\n        drawWhiskers();\n        placeButtons();\n      }\n    }\n\n    this.draw(width);\n  }\n\n  function drawWhiskers() {\n    console.log(\"Active index\", ActiveIndex);\n    console.log(\"row\", Rows);\n    let WHISKER_THICKNESS = LINE_THICKNESS / 2;\n    LeftWhisker.clear();\n    LeftWhisker.lineStyle(WHISKER_THICKNESS, 0x000000);\n    LeftWhisker.moveTo(Rows[ActiveIndex].container.x, Rows[ActiveIndex].container.y);\n    LeftWhisker.lineTo(Rows[ActiveIndex].container.x, numberLine.line.y);\n    RightWhisker.clear();\n    RightWhisker.lineStyle(WHISKER_THICKNESS, 0x000000);\n    RightWhisker.moveTo(pinA.sprite.x, Rows[ActiveIndex].container.y);\n    RightWhisker.lineTo(pinA.sprite.x, numberLine.line.y);\n    MiddleWhisker.clear();\n    MiddleWhisker.lineStyle(WHISKER_THICKNESS, 0x000000);\n    MiddleWhisker.moveTo(pinB.sprite.x, Rows[ActiveIndex].container.y);\n    MiddleWhisker.lineTo(pinB.sprite.x, numberLine.line.y);\n  }\n\n  function globalPointerUp() {\n    // Ughhh...\n    Rows[ActiveIndex].container.touching = false;\n    pinA.sprite.dragging = false;\n    pinA.sprite.round();\n    Rows[ActiveIndex].draw(pinA.sprite.x - LINE_START);\n    drawWhiskers(); //pinB.sprite.round()\n    //stripA.draw()\n    //stripB.draw()\n    //stripALabel.draw()\n    //stripBLabel.draw()\n  } // Called on resize\n\n\n  function resize(newFrame, flex) {\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame);\n    app.renderer.resize(WINDOW_WIDTH, WINDOW_HEIGHT);\n    numberLine.draw();\n    topNumberLine.draw();\n    backGround.draw();\n    pinA.draw();\n    incButton.draw();\n    decButton.draw();\n    Rows.forEach(r => r.draw());\n    drawWhiskers();\n  }\n\n  function updateLayoutParams(newFrame) {\n    let frame;\n\n    if (newFrame) {\n      frame = newFrame;\n    } else {\n      frame = {\n        width: WINDOW_WIDTH,\n        height: WINDOW_HEIGHT\n      };\n    }\n\n    WINDOW_WIDTH = frame.width;\n    WINDOW_HEIGHT = frame.height;\n    H_W_RATIO = frame.height / frame.width;\n    LANDSCAPE = H_W_RATIO < 3 / 4;\n    ARENA_WIDTH = LANDSCAPE ? 4 / 3 * frame.height : frame.width;\n    ARENA_HEIGHT = LANDSCAPE ? frame.height : 3 / 4 * frame.width;\n    LINE_WIDTH = LINE_PERCENTAGE * WINDOW_WIDTH;\n    LINE_THICKNESS = LINE_WIDTH / 200;\n    TICK_THICKNESS = LINE_THICKNESS / 2;\n    MAJOR_TICK_HEIGHT = LINE_WIDTH / 20;\n    MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT / 2;\n    DX = LINE_WIDTH / state.lineMax;\n    LINE_START = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n    STRIP_HEIGHT = LINE_WIDTH / 12;\n  } // Loading Script\n\n\n  function load() {\n    let features = {\n      'strips': true\n    };\n\n    if (setup.props.features) {\n      features = setup.props.features;\n    }\n\n    backGround = new makeBackground(); // Number Lines\n\n    numberLine = new makeNumberLine();\n    numberLine.draw();\n    topNumberLine = new makeNumberLine(true);\n    topNumberLine.draw();\n    pinA = new makePin(0);\n    pinA.sprite.y = BOTTOM_LINE_Y + 2 * MINOR_TICK_HEIGHT;\n    pinB = new makePin(1);\n    pinB.sprite.y = BOTTOM_LINE_Y + 2 * MINOR_TICK_HEIGHT;\n    incButton = makeArrowButton(5);\n    decButton = makeArrowButton(-5);\n    incButton.draw();\n    decButton.draw();\n    FirstRow = new Row(3, 4, pinA.sprite.x - LINE_START, 0);\n    SecondRow = new Row(1, 3, pinA.sprite.x - LINE_START, 1);\n    ThirdRow = new Row(1, 3, pinA.sprite.x - LINE_START, 2);\n    FourthRow = new Row(1, 3, pinA.sprite.x - LINE_START, 3);\n    FirstRow.container.y = BOTTOM_LINE_Y - BAR_HEIGHT;\n    SecondRow.container.y = BOTTOM_LINE_Y - 2 * BAR_HEIGHT - DY;\n    ThirdRow.container.y = BOTTOM_LINE_Y - 3 * BAR_HEIGHT - 2 * DY;\n    FourthRow.container.y = TOP_LINE_Y;\n    Rows = [FirstRow, SecondRow, ThirdRow, FourthRow];\n    app.stage.addChild(LeftWhisker);\n    app.stage.addChild(RightWhisker);\n    app.stage.addChild(PlusButton);\n    app.stage.addChild(MinusButton);\n    drawWhiskers();\n    placeButtons();\n  } // Call load script\n\n\n  load(); // Not sure where else to put this.\n\n  app.resize = frame => resize(frame);\n\n  app.resizable = true;\n};","map":{"version":3,"sources":["/Users/andrewfenner/Documents/MindResearch/Prototypes/newtestunit/src/js/fractionstacks.js"],"names":["PIXI","CONST","TweenMax","TimelineLite","Power2","Elastic","CSSPlugin","TweenLite","TimelineMax","ASSETS","init","app","setup","BLUE_TEXTURE","Texture","from","BLUE_CIRCLE","LINE_PERCENTAGE","PIN_TEXTURE","SHARP_PIN","state","valA","valB","lineMax","console","log","width","window","innerHeight","WINDOW_WIDTH","BAR_STEP","height","BAR_HEIGHT","WINDOW_HEIGHT","H_W_RATIO","LANDSCAPE","ARENA_WIDTH","ARENA_HEIGHT","LINE_WIDTH","LINE_THICKNESS","TICK_THICKNESS","MAJOR_TICK_HEIGHT","MINOR_TICK_HEIGHT","DX","LINE_START","STRIP_HEIGHT","TOP_LINE_Y","BOTTOM_LINE_Y","INC_BUTTONS_HEIGHT","DY","ActiveRow","ActiveIndex","FirstRow","SecondRow","ThirdRow","FourthRow","Rows","PlusButton","Sprite","PLUS_SQUARE","interactive","anchor","x","y","on","incActiveFrac","setTimeout","MinusButton","MINUS_SQUARE","placeButtons","container","w","h","LeftWhisker","Graphics","RightWhisker","MiddleWhisker","A","B","backGround","numberLine","topNumberLine","pinA","pinB","stripA","stripB","stripBLabel","stripALabel","incButton","decButton","activePin","inc","incDenonimator","makeNumberLine","flip","tickSpan","labelSpan","max","ticks","labels","line","n","lineStyle","lineTo","stage","addChild","i","newTick","push","newLabel","Text","fontFamily","fontSize","fill","align","text","increment","getSetup","updateLayoutParams","forEach","e","to","alpha","draw","_y","style","makeBackground","sprite","BLUE_GRADIENT","globalPointerUp","makePin","id","texture","onDragStart","onDragMove","onDragEnd","val","round","rawLineX","Math","drawWhiskers","onBDragStart","event","deltaTouch","data","global","dragging","onBDragEnd","onBDragMove","newPosition","getLocalPosition","parent","makeArrowButton","button","ARROW","set","resize","rotation","PI","resizeLine","Row","num","den","ID","touching","activated","numerator","denominator","Container","sprites","blockWidth","blockA","drawRoundedRect","myA","renderer","generateTexture","blockB","beginFill","myB","g","clear","R","s","onComplete","spritePointerDown","spritePointerUp","spritePointerMoved","active","onUpdate","removeme","pop","removeChild","length","containerPointerDown","containerPointerUp","containerPointerMove","touched","dragged","startWidth","dragStartY","WHISKER_THICKNESS","moveTo","newFrame","flex","r","frame","load","features","props","resizable"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nconst ASSETS = CONST.ASSETS\n\nexport const init = (app, setup) => {\n\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE)\n  const LINE_PERCENTAGE = 0.8\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN)\n\n // Initial State\n  let state = {\n    valA: 8,\n    valB: 8,\n    lineMax: 30,\n  }\n\n  console.log(\"setupwidth\",setup.width)\n  console.log(\"windowheight\",window.innerHeight)\n\n  // Layout Parameters\n  let WINDOW_WIDTH = setup.width\n  let BAR_STEP = setup.height/8\n  let BAR_HEIGHT = setup.height/10\n  let WINDOW_HEIGHT = setup.height\n  let H_W_RATIO = setup.height/setup.width\n  let LANDSCAPE = H_W_RATIO < 3/4\n  let ARENA_WIDTH = LANDSCAPE ? 4/3*setup.height : setup.width\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3/4*setup.width\n  let LINE_WIDTH = LINE_PERCENTAGE*WINDOW_WIDTH\n  let LINE_THICKNESS = LINE_WIDTH/200\n  let TICK_THICKNESS = 2*LINE_THICKNESS/3\n  let MAJOR_TICK_HEIGHT = LINE_WIDTH/20\n  let MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT/2\n  let DX = LINE_WIDTH/state.lineMax\n  let LINE_START = WINDOW_WIDTH/2 - LINE_WIDTH/2\n  let STRIP_HEIGHT = LINE_WIDTH/12\n  let TOP_LINE_Y = WINDOW_HEIGHT/4\n  let BOTTOM_LINE_Y = WINDOW_HEIGHT*3/4\n  let INC_BUTTONS_HEIGHT = BAR_HEIGHT/2.75\n  let DY = (BOTTOM_LINE_Y - TOP_LINE_Y - 4*BAR_HEIGHT)/3\n\n\n\n  // RELEVENT\n  let ActiveRow;\n  let ActiveIndex = 0\n  let FirstRow\n  let SecondRow\n  let ThirdRow;\n  let FourthRow;\n  var Rows;\n\n\n  let PlusButton = new PIXI.Sprite.from(ASSETS.PLUS_SQUARE)\n  \n  PlusButton.interactive = true\n  PlusButton.anchor.x = 1\n  PlusButton.anchor.y = 0.5\n  PlusButton.on('pointerdown',()=>{\n    PlusButton.interactive = false\n    incActiveFrac(1)\n    setTimeout(()=>{PlusButton.interactive = true},300)\n  })\n  PlusButton.width = INC_BUTTONS_HEIGHT\n  PlusButton.height = INC_BUTTONS_HEIGHT\n\n\n  let MinusButton = new PIXI.Sprite.from(ASSETS.MINUS_SQUARE)\n  MinusButton.interactive = true\n  MinusButton.anchor.x = 1\n  MinusButton.anchor.y = 0.5\n  MinusButton.on('pointerdown',()=>{\n    MinusButton.interactive = false\n    incActiveFrac(-1)\n    setTimeout(()=>{MinusButton.interactive = true},300)\n  })\n  MinusButton.width = BAR_HEIGHT/2.5\n  MinusButton.height = BAR_HEIGHT/2.5\n\n\n  function placeButtons(){\n    let x = Rows[ActiveIndex].container.x\n    let y = Rows[ActiveIndex].container.y\n    let w = Rows[ActiveIndex].container.width\n    let h = Rows[ActiveIndex].container.height\n    PlusButton.width = INC_BUTTONS_HEIGHT\n    PlusButton.height = INC_BUTTONS_HEIGHT\n    MinusButton.width = INC_BUTTONS_HEIGHT\n    MinusButton.height = INC_BUTTONS_HEIGHT\n  \n    PlusButton.x = x - PlusButton.width/8\n    PlusButton.y = y + BAR_HEIGHT/4\n    MinusButton.x = x - MinusButton.width/8\n    MinusButton.y = y + BAR_HEIGHT*3/4\n  }\n\n\n  let LeftWhisker  = new PIXI.Graphics()\n  let RightWhisker = new PIXI.Graphics()\n  let MiddleWhisker = new PIXI.Graphics()\n\n  let A;\n  let B;\n\n  // Reference to entities. - deprecated.\n  let backGround;\n  let numberLine;\n  let topNumberLine;\n  let pinA;\n  let pinB;\n  let stripA;\n  let stripB;\n  let stripBLabel;\n  let stripALabel;\n  let incButton;\n  let decButton;\n  let activePin;\n\n\n  function incActiveFrac(inc){\n    Rows[ActiveIndex].incDenonimator(inc)\n  }\n\n \n  // Constructors (should not be called on re-draw)\n  function makeNumberLine(flip){\n     this.tickSpan = 1\n     this.labelSpan = 1\n     this.max = state.lineMax\n     this.ticks = [] // size 120\n     this.labels = []\n     this.line = new PIXI.Graphics()\n\n     this.init = (n) => {\n        this.line.lineStyle(LINE_THICKNESS,0x000000)\n        this.line.x = LINE_START\n        this.line.y = ARENA_HEIGHT/2\n        this.line.lineTo(LINE_WIDTH,0)\n        app.stage.addChild(this.line)\n\n        for (let i = 0;i<120;i++){\n            let newTick = new PIXI.Graphics()\n            newTick.lineStyle(LINE_THICKNESS,0x000000)\n            newTick.x = this.line.x \n            if(flip){\n              newTick.y = this.line.y + LINE_THICKNESS/2\n              newTick.lineTo(0,-MINOR_TICK_HEIGHT)\n            } else {\n              newTick.y = this.line.y - LINE_THICKNESS/2\n              newTick.lineTo(0,MINOR_TICK_HEIGHT)\n            }\n            app.stage.addChild(newTick)\n            this.ticks.push(newTick)\n\n            // Setup Labels Here\n            let newLabel = new PIXI.Text(i,{\n              fontFamily: \"Arial\",\n              fontSize: DX/2,\n              fill: \"0x000000\",\n              align: \"center\"\n            })\n            newLabel.anchor.x = 0.5\n            this.labels.push(newLabel)\n            newLabel.x = this.line.x + DX*i\n            newLabel.y = this.line.y + MINOR_TICK_HEIGHT\n            if (flip){\n              newLabel.y = this.line.y - 2*MINOR_TICK_HEIGHT\n              newLabel.anchor.y = 1\n              newLabel.text.anchor.y = 0.5\n            }\n            app.stage.addChild(newLabel)\n        }\n        this.increment(0)\n     }\n\n     this.getSetup = ()=> {\n         // update tickspan etc. based on line max.\n     }\n\n     this.increment = (inc) => {\n         // Animation go here\n         this.max += inc\n\n         // Update State - (Context Specific)\n         state.lineMax = this.max\n         updateLayoutParams()\n\n         this.ticks.forEach((e,i)=> {\n            if (i > this.max){\n                TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n            } else {\n                TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n            }\n         })\n\n         this.labels.forEach((e,i)=> {\n          if (i > this.max){\n              TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n              TweenLite.to(e,0.5,{alpha: 0})\n          } else {\n              TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n              TweenLite.to(e,0.5,{alpha: 1})\n          }\n       })\n     }\n\n     this.draw = () => {\n       let _y;\n       if (flip){\n        _y = TOP_LINE_Y\n       } else {\n         _y = BOTTOM_LINE_Y\n       }\n        this.line.width = LINE_WIDTH\n        this.line.height = LINE_THICKNESS\n        this.line.x = LINE_START\n        this.line.y = _y\n        this.ticks.forEach((e,i)=> {\n            e.width = TICK_THICKNESS\n            e.height = MINOR_TICK_HEIGHT\n            e.y = this.line.y - LINE_THICKNESS/2\n            if (flip){\n              e.y = this.line.y + LINE_THICKNESS/2\n            }\n            if (i > this.max){\n                e.x = LINE_WIDTH + this.line.x \n            } else {\n                e.x =  LINE_WIDTH/this.max*i + this.line.x\n            }\n         })\n         this.labels.forEach((e,i)=> {\n          e.y = this.line.y + MINOR_TICK_HEIGHT\n          if (flip){\n            e.y = this.line.y - MINOR_TICK_HEIGHT\n          }\n          e.style.fontSize = DX/2\n          if (i > this.max){\n              e.x = LINE_WIDTH + this.line.x \n          } else {\n              e.x =  LINE_WIDTH/this.max*i + this.line.x\n          }\n       })\n     }\n     this.init()\n  }\n\n\n\n  function makeBackground(){\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH\n    this.sprite.height = WINDOW_HEIGHT\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup',globalPointerUp)\n    this.sprite.interactive = true\n\n    app.stage.addChild(this.sprite)\n\n    this.draw = () => {\n        this.sprite.width = WINDOW_WIDTH\n        this.sprite.height = WINDOW_HEIGHT\n    }\n  }\n\n\n  function makePin(id){\n    this.sprite = new PIXI.Sprite()\n    this.sprite.id = id\n    this.sprite.texture = PIN_TEXTURE\n    this.sprite.interactive = true\n    this.sprite.anchor.x = 0.5\n    if (id == 0){\n      this.sprite.on('pointerdown',onDragStart)\n      this.sprite.on('pointermove',onDragMove)\n      this.sprite.on('pointerup',onDragEnd)\n    } else if (id == 1){\n      this.sprite.on('pointerdown',onDragStart)\n      this.sprite.on('pointermove',onDragMove)\n      this.sprite.on('pointerup',onDragEnd)\n    }\n\n    this.sprite.x = WINDOW_WIDTH/2 - LINE_WIDTH/2\n    this.sprite.val = 8\n    app.stage.addChild(this.sprite)\n\n    this.sprite.round = () => {\n\n      // Pre Computation\n      let rawLineX = this.sprite.x - numberLine.line.x\n      let n = Math.round(rawLineX/DX)\n\n      // Setting\n      this.sprite.x = numberLine.line.x + n*DX\n      this.sprite.val = n\n\n      drawWhiskers()\n      // There's gotta be a better pattern than this\n      if (this.sprite.id == 0){\n        state.valA = this.sprite.val\n      } else if (this.sprite.id == 1){\n        state.valB = this.sprite.val\n      }\n    }\n\n    this.draw = () => { \n      this.sprite.width = STRIP_HEIGHT\n      this.sprite.height = STRIP_HEIGHT\n      this.sprite.y = BOTTOM_LINE_Y + MINOR_TICK_HEIGHT + DX/2\n      this.sprite.x = WINDOW_WIDTH/2 - LINE_WIDTH/2 + this.sprite.val*DX\n    }\n    this.draw()\n   }\n\n   function onBDragStart(event) {\n    app.stage.addChild(this)\n    this.deltaTouch = {\n      x: this.x - event.data.global.x,\n      y: this.y - event.data.global.y\n    }\n    this.dragging = true;\n    this.data = event.data;\n}\n\nfunction onBDragEnd(event) {\n  this.dragging = false;\n  this.data = null;\n  this.round()\n  drawWhiskers()\n  placeButtons()\n}\n\nfunction onBDragMove(event) {\n  if (this.dragging) {\n    drawWhiskers()\n    let newPosition = this.data.getLocalPosition(this.parent);\n    this.x = newPosition.x + this.deltaTouch.x;\n    // Keep within number line bounds.\n    if (this.x < WINDOW_WIDTH/2-LINE_WIDTH/2){\n      this.dragging = false\n      this.x = WINDOW_WIDTH/2-LINE_WIDTH/2\n    } else if (this.x > WINDOW_WIDTH/2+LINE_WIDTH/2) {\n      this.dragging = false\n      this.x = WINDOW_WIDTH/2+LINE_WIDTH/2\n    }\n  }\n}\n\n\n  // Pin Drag Functions\n  function onDragStart(event) {\n      app.stage.addChild(this)\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n      this.dragging = true;\n      this.data = event.data;\n  }\n\n  function onDragEnd(event) {\n    this.dragging = false;\n    this.data = null;\n    this.round()\n    Rows[ActiveIndex].draw(this.x - LINE_START)\n    drawWhiskers()\n    placeButtons()\n  }\n\n  function onDragMove(event) {\n    if (this.dragging) {\n      let width = this.x - LINE_START\n      Rows[ActiveIndex].draw(width)\n      drawWhiskers()\n      placeButtons()\n      let newPosition = this.data.getLocalPosition(this.parent);\n      this.x = newPosition.x + this.deltaTouch.x;\n\n      // Keep within number line bounds.\n      if (this.x < WINDOW_WIDTH/2-LINE_WIDTH/2){\n        this.dragging = false\n        this.x = WINDOW_WIDTH/2-LINE_WIDTH/2\n      } else if (this.x > WINDOW_WIDTH/2+LINE_WIDTH/2) {\n        this.dragging = false\n        this.x = WINDOW_WIDTH/2+LINE_WIDTH/2\n      }\n    }\n  }\n\n  function makeArrowButton(inc){\n    let button = new PIXI.Sprite.from(CONST.ASSETS.ARROW)\n    button.inc = inc\n    button.interactive = true\n    button.anchor.set(0.5)\n    button.on('pointerdown',()=>{\n      numberLine.increment(inc)\n      topNumberLine.increment(inc)\n      resize(null,false)\n    })\n    app.stage.addChild(button)\n\n    button.draw = () => {\n      if (button.inc == -5){\n        button.width = STRIP_HEIGHT/2\n        button.height = STRIP_HEIGHT/2\n        button.x = WINDOW_WIDTH - 1.1*button.width\n        button.y = WINDOW_HEIGHT/2 + 1/2*button.width\n        button.rotation = Math.PI\n      } else if (button.inc == 5){\n        button.width = STRIP_HEIGHT/2\n        button.height = STRIP_HEIGHT/2\n        button.x = WINDOW_WIDTH - 1.1*button.width\n        button.y = WINDOW_HEIGHT/2  - 1/2*button.width\n      }\n    }\n    return button\n  }\n\n  app.stage.on('pointerdown',resizeLine)\n  app.stage.interactive = true\n\n  function resizeLine(event){\n \n  }\n\n\n\n\n \n  function Row(num,den,width,ID){\n\n    // Internal Params\n    let touching = true   \n    let activated = true\n    \n    // Default values\n    this.numerator = num\n    this.denominator = den\n    this.width = width\n    this.id = ID\n  \n    this.container = new PIXI.Container()\n    this.container.id = ID\n    this.container.width = width\n    this.container.interactive = true\n    this.container.y = BOTTOM_LINE_Y - BAR_HEIGHT\n    this.container.x = LINE_START \n    this.sprites = []\n  \n\n    this.blockWidth = width / this.denominator\n\n    this.blockA = new PIXI.Graphics()\n    this.blockA.lineStyle(3,0x000000) \n    this.blockA.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n    let myA = app.renderer.generateTexture(this.blockA)\n\n    this.blockB = new PIXI.Graphics()\n    this.blockB.beginFill(0xff4772)\n    this.blockB.lineStyle(3,0x000000) \n    this.blockB.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n    let myB = app.renderer.generateTexture(this.blockB)\n\n    let g = new PIXI.Graphics()    \n \n  \n\n    this.incDenonimator = (inc) => {\n      g.clear()\n      g.lineStyle(3,0x000000) \n      g.drawRoundedRect(0,0,this.width,BAR_HEIGHT,1)\n      let R = app.renderer.generateTexture(g)\n      let s = new PIXI.Sprite()\n      this.container.addChild(s)\n      s.texture = R\n      s.x  = 0\n\n      if (inc > 0){\n        const onComplete = ()=>{\n          s.on('pointerdown',spritePointerDown)\n          s.on('pointerup',spritePointerUp)\n          s.on('pointermove',spritePointerMoved)\n          s.interactive = true\n          s.active = false\n          this.sprites.push(s)\n          this.draw()\n        }\n        TweenMax.to(this, 0.25, {denominator: this.denominator+1,onUpdate: this.draw,onComplete: onComplete})\n      } else if (inc < 0) {\n        let removeme  = this.sprites.pop()\n        this.container.removeChild(removeme)\n        const onComplete = ()=>{\n          this.draw()\n          this.container.removeChild(s)\n        }\n        TweenMax.to(this, 0.25, {denominator: this.denominator-1,onUpdate: this.draw,onComplete: onComplete})\n      }\n    }\n\n    this.draw = (width) => {\n\n      if (width) {\n        this.width = width\n      }\n      this.blockWidth = this.width/this.denominator\n\n      this.blockA.clear()\n      this.blockA.lineStyle(3,0x000000) \n      this.blockA.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      myA = app.renderer.generateTexture(this.blockA)\n\n      this.blockB.clear()\n      this.blockB.beginFill(0xff4772)\n      this.blockB.lineStyle(3,0x000000) \n      this.blockB.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      myB = app.renderer.generateTexture(this.blockB)\n\n      for (let i = 0;i<this.sprites.length;i++){\n        if (this.sprites[i].active){\n          this.sprites[i].texture = myB\n        } else {\n          this.sprites[i].texture = myA\n        }\n\n        this.sprites[i].x = this.blockWidth*i\n        this.sprites[i].y = 0\n      }\n    }\n\n    for (let i = 0;i<this.denominator;i++) {\n      console.log(\"balls\")\n      let s = new PIXI.Sprite.from(myA)\n      s.on('pointerdown',spritePointerDown)\n      s.on('pointerup',spritePointerUp)\n      s.on('pointermove',spritePointerMoved)\n      s.interactive = true\n      s.active = false\n      s.x = i*LINE_WIDTH/this.denominator\n      s.y = WINDOW_HEIGHT/2 - BAR_HEIGHT\n      this.sprites.push(s)\n      this.container.addChild(s)\n    }\n      \n\n    //  Attached methods\n    this.container.on('pointerdown',containerPointerDown)\n    this.container.on('pointerup',containerPointerUp)\n    this.container.on('pointermove',containerPointerMove)\n\n    // Add children\n    app.stage.addChild(this.container)\n    this.width = this.container.width\n  \n\n    function spritePointerDown(event){\n      this.touched = true\n      this.dragged = false\n    }\n\n    function spritePointerMoved(event) {\n\n      if (this.touched){\n        console.log(\"pointermove\")\n        this.dragged = true\n      }\n    }\n\n    function spritePointerUp(event){\n         this.touched = false\n         console.log('this.draggeed',this.dragged)\n     if (!this.dragged && activated) {\n        this.dragged = false\n        this.active = !this.active\n        this.alpha = 0.2\n        this.texture = this.active ? myB : myA\n        TweenLite.to(this,0.4,{alpha: 1})\n       }\n    }\n\n \n   function containerPointerDown(event) {\n      activated = this.id == ActiveIndex\n      ActiveIndex = this.id\n      drawWhiskers()\n      placeButtons()\n      pinA.sprite.x = this.width + LINE_START\n      pinA.sprite.round()\n      this.data = event.data\n      this.startWidth = this.width\n      this.dragStartY = event.data.global.y\n      this.touching = true\n      touching = true\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n    }\n\n \n   function containerPointerUp(event) {\n      this.touching = false\n      touching = false\n    }\n\n    function containerPointerMove(event) {\n      if (this.touching){\n        const newPosition = this.data.getLocalPosition(this.parent);\n        //this.y = event.data.global.y + this.deltaTouch.y\n        //this.x = event.data.global.x + this.deltaTouch.x\n        //pinA.sprite.x = this.x + this.width\n        this.dragged = true\n        drawWhiskers()\n        placeButtons()\n      }\n    }\n\n\n    this.draw(width)\n\n  }\n\n  function drawWhiskers(){\n    console.log(\"Active index\",ActiveIndex)\n    console.log(\"row\",Rows)\n    let WHISKER_THICKNESS = LINE_THICKNESS/2\n\n    LeftWhisker.clear()\n    LeftWhisker.lineStyle(WHISKER_THICKNESS,0x000000)\n    LeftWhisker.moveTo(Rows[ActiveIndex].container.x,Rows[ActiveIndex].container.y)\n    LeftWhisker.lineTo(Rows[ActiveIndex].container.x,numberLine.line.y)\n\n    RightWhisker.clear()\n    RightWhisker.lineStyle(WHISKER_THICKNESS,0x000000)\n    RightWhisker.moveTo(pinA.sprite.x,Rows[ActiveIndex].container.y)\n    RightWhisker.lineTo(pinA.sprite.x,numberLine.line.y)\n\n    MiddleWhisker.clear()\n    MiddleWhisker.lineStyle(WHISKER_THICKNESS,0x000000)\n    MiddleWhisker.moveTo(pinB.sprite.x,Rows[ActiveIndex].container.y)\n    MiddleWhisker.lineTo(pinB.sprite.x,numberLine.line.y)\n\n\n  }\n\n  function globalPointerUp(){\n    // Ughhh...\n    Rows[ActiveIndex].container.touching = false\n    pinA.sprite.dragging = false\n    pinA.sprite.round()\n    Rows[ActiveIndex].draw(pinA.sprite.x - LINE_START)\n    drawWhiskers()\n    //pinB.sprite.round()\n    //stripA.draw()\n    //stripB.draw()\n    //stripALabel.draw()\n    //stripBLabel.draw()\n  }\n  \n  // Called on resize\n  function resize(newFrame,flex){\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame)\n    app.renderer.resize(WINDOW_WIDTH,WINDOW_HEIGHT)\n    numberLine.draw()\n    topNumberLine.draw()\n    backGround.draw()\n    pinA.draw()\n    incButton.draw()\n    decButton.draw()\n    Rows.forEach(r=>r.draw())\n    drawWhiskers()\n  }\n\n  function updateLayoutParams(newFrame){\n    let frame;\n    if (newFrame){\n      frame = newFrame\n    } else {\n      frame = {width: WINDOW_WIDTH,height: WINDOW_HEIGHT}\n    }\n    WINDOW_WIDTH = frame.width\n    WINDOW_HEIGHT = frame.height\n    H_W_RATIO = frame.height/frame.width\n    LANDSCAPE = H_W_RATIO < 3/4\n    ARENA_WIDTH = LANDSCAPE ? 4/3*frame.height : frame.width\n    ARENA_HEIGHT = LANDSCAPE ? frame.height : 3/4*frame.width\n    LINE_WIDTH = LINE_PERCENTAGE*WINDOW_WIDTH\n    LINE_THICKNESS = LINE_WIDTH/200\n    TICK_THICKNESS = LINE_THICKNESS/2\n    MAJOR_TICK_HEIGHT = LINE_WIDTH/20\n    MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT/2\n    DX = LINE_WIDTH/state.lineMax\n    LINE_START = WINDOW_WIDTH/2 - LINE_WIDTH/2\n    STRIP_HEIGHT = LINE_WIDTH/12\n  }\n\n  // Loading Script\n  function load(){\n    let features = {'strips': true}\n    if (setup.props.features){\n      features = setup.props.features\n    }\n\n\n    backGround = new makeBackground()\n\n    // Number Lines\n    numberLine = new makeNumberLine()\n    numberLine.draw()\n    topNumberLine = new makeNumberLine(true)\n    topNumberLine.draw()\n\n    pinA = new makePin(0)\n    pinA.sprite.y = BOTTOM_LINE_Y + 2*MINOR_TICK_HEIGHT\n    pinB = new makePin(1)\n    pinB.sprite.y = BOTTOM_LINE_Y + 2*MINOR_TICK_HEIGHT\n    incButton = makeArrowButton(5)\n    decButton = makeArrowButton(-5)\n    incButton.draw()\n    decButton.draw()\n    FirstRow = new Row(3,4,pinA.sprite.x - LINE_START,0)\n    SecondRow = new Row(1,3,pinA.sprite.x - LINE_START,1)\n    ThirdRow = new Row(1,3,pinA.sprite.x - LINE_START,2)\n    FourthRow = new Row(1,3,pinA.sprite.x - LINE_START,3)\n    FirstRow.container.y = BOTTOM_LINE_Y - BAR_HEIGHT\n    SecondRow.container.y = BOTTOM_LINE_Y - 2*BAR_HEIGHT - DY\n    ThirdRow.container.y = BOTTOM_LINE_Y - 3*BAR_HEIGHT - 2*DY\n    FourthRow.container.y = TOP_LINE_Y\n    Rows = [FirstRow,SecondRow,ThirdRow,FourthRow]\n\n\n    app.stage.addChild(LeftWhisker)\n    app.stage.addChild(RightWhisker)\n    app.stage.addChild(PlusButton)\n    app.stage.addChild(MinusButton)\n    drawWhiskers()\n    placeButtons()\n  }\n\n  // Call load script\n  load()\n  // Not sure where else to put this.\n  app.resize = (frame) => resize(frame)\n  app.resizable = true\n};\n"]},"metadata":{},"sourceType":"module"}