{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { BottomNavigation } from \"@material-ui/core\";\nexport const init = (app, setup) => {\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE);\n  const RED_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.RED_CIRCLE);\n  const EMPTY_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.EMPTY_CIRCLE);\n  const LOCK_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.LOCKED_LOCK);\n  const UNLOCK_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.UNLOCKED_LOCK); // State - can be used to reconstruct the app at any point in time.\n\n  let state = {\n    pivot: null,\n    val: 0\n  }; // default setting for features\n\n  let features = {\n    'lock': true,\n    'regroup': false\n  }; // Parameters (Only changes on resize)\n\n  let H_W_RATIO = setup.height / setup.width;\n  let WINDOW_WIDTH = setup.width;\n  let WINDOW_HEIGHT = setup.height;\n  let LANDSCAPE = H_W_RATIO < 3 / 4;\n  let ARENA_WIDTH = LANDSCAPE ? 4 / 3 * setup.height : setup.width;\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3 / 4 * setup.width;\n  let GRID_HEIGHT = 0.75 * WINDOW_HEIGHT;\n  let GRID_WIDTH = GRID_HEIGHT; // Entities - objects that appear on screen\n\n  let lockButton;\n  let backGround;\n  let plusOneButton;\n  let plusTenButton;\n  let minusTenButton;\n  let minusOneButton;\n  let gridCounters; // Circles that represent numbers\n\n  let gridNodes; // Placeholders / small dots\n\n  let zeroButton;\n  let currentTexture = RED_TEXTURE;\n  let alternator = false;\n  let operationSequence = []; // Constructors (should not be called on re-draw)\n  // START HERE: Let's try ot make this grid a container object and give it a redraw property.\n\n  function makeGridNodes(dim) {\n    this.grid = []; // State: Texture: {Hollow,Blue,Red,None} , Hidden: {True,False}\n\n    for (let i = 0; i < dim; i++) {\n      let row = [];\n\n      for (let j = 0; j < dim; j++) {\n        let newNode = new PIXI.Graphics();\n        app.stage.addChild(newNode);\n        row.push(newNode);\n      }\n\n      this.grid.push(row);\n    } // Draw function\n\n\n    this.draw = () => {\n      let dx = GRID_WIDTH / dim;\n      let dy = dx;\n      let w = dx / 5;\n      let h = w;\n      this.grid.map((r, i) => {\n        r.map((e, j) => {\n          let x = WINDOW_WIDTH / 2 - dim / 2 * dx + dx * j;\n          let y = WINDOW_HEIGHT / 2 + dim / 2 * dy - dy * i;\n          e.clear();\n          e.beginFill(0x000000);\n          e.drawCircle(x, y, w / 2);\n        });\n      });\n    };\n\n    this.draw();\n  }\n\n  function makeGridCounters(dim) {\n    this.grid = []; // State: Texture: {Hollow,Blue,Red,None} , Hidden: {True,False}\n\n    for (let i = 0; i < dim; i++) {\n      let row = [];\n\n      for (let j = 0; j < dim; j++) {\n        let newCounter = new PIXI.Sprite();\n        newCounter.texture = null;\n        newCounter.anchor.set(0.5);\n        app.stage.addChild(newCounter);\n        row.push(newCounter);\n      }\n\n      this.grid.push(row);\n    } // Draw function\n\n\n    this.draw = () => {\n      let dx = GRID_WIDTH / dim;\n      let dy = dx;\n      let w = dx;\n      let h = w;\n      this.grid.map((r, i) => {\n        r.map((e, j) => {\n          let x = WINDOW_WIDTH / 2 - dim / 2 * dx + dx * j;\n          let y = WINDOW_HEIGHT / 2 + dim / 2 * dy - dy * i;\n          e.x = x;\n          e.y = y;\n          e.width = w;\n          e.height = h;\n        });\n      });\n    };\n\n    this.draw();\n  }\n\n  function getLockButton() {\n    let btn = new PIXI.Sprite.from(CONST.ASSETS.UNLOCKED_LOCK);\n\n    btn.draw = () => {\n      let w = GRID_WIDTH / 8;\n      let h = w * 0.8;\n      btn.x = WINDOW_WIDTH / 2 - 1.10 * GRID_WIDTH / 2 + -w;\n      btn.y = 0;\n      btn.width = w;\n      btn.height = h;\n    };\n\n    btn.interactive = true;\n    btn.on('pointerdown', () => {\n      setPivot();\n    });\n    btn.draw();\n    return btn;\n  }\n\n  function getZeroButton() {\n    let btn = new PIXI.Sprite.from(CONST.ASSETS.ZERO_OUT);\n\n    btn.draw = () => {\n      let w = GRID_WIDTH / 8;\n      let h = w * 0.8;\n      btn.x = WINDOW_WIDTH / 2 + 1.10 * GRID_WIDTH / 2;\n      btn.y = 0;\n      btn.width = w;\n      btn.height = h;\n    };\n\n    btn.interactive = true;\n    btn.on('pointerdown', () => {\n      state.val = 0;\n      state.pivot = null;\n      updateGrid(0);\n    });\n    btn.draw();\n    return btn;\n  }\n\n  function getPlusTenButton() {\n    let btn = new PIXI.Sprite.from(CONST.ASSETS.PLUS_TEN);\n\n    btn.draw = () => {\n      let w = GRID_WIDTH / 4;\n      let h = w / 2;\n      btn.x = WINDOW_WIDTH / 2 - 1.10 * GRID_WIDTH / 2 + 3 * w;\n      btn.y = 0;\n      btn.width = w;\n      btn.height = h;\n    };\n\n    btn.interactive = true;\n    btn.on('pointerdown', () => {\n      btn.interactive = false;\n      setTimeout(() => {\n        btn.interactive = true;\n      }, 100);\n      operationSequence.push(10);\n      updateGrid(10);\n    });\n    btn.draw();\n    return btn;\n  }\n\n  function getPlusOneButton() {\n    let btn = new PIXI.Sprite.from(CONST.ASSETS.PLUS_ONE);\n\n    btn.draw = () => {\n      let w = GRID_WIDTH / 4;\n      let h = w / 2;\n      btn.x = WINDOW_WIDTH / 2 - 1.10 * GRID_WIDTH / 2 + 2 * w;\n      btn.y = 0;\n      btn.width = w;\n      btn.height = h;\n    };\n\n    btn.interactive = true;\n    btn.on('pointerdown', () => {\n      btn.interactive = false;\n      setTimeout(() => {\n        btn.interactive = true;\n      }, 100);\n      updateGrid(1);\n    });\n    btn.draw();\n    return btn;\n  }\n\n  function getMinusTenButton() {\n    let btn = new PIXI.Sprite.from(CONST.ASSETS.MINUS_TEN);\n\n    btn.draw = () => {\n      let w = GRID_WIDTH / 4;\n      let h = w / 2;\n      btn.x = WINDOW_WIDTH / 2 - 1.10 * GRID_WIDTH / 2;\n      btn.y = 0;\n      btn.width = w;\n      btn.height = h;\n    };\n\n    btn.interactive = true;\n    btn.on('pointerdown', () => {\n      btn.interactive = false;\n      setTimeout(() => {\n        btn.interactive = true;\n      }, 100);\n      updateGrid(-10);\n    });\n    btn.draw();\n    return btn;\n  }\n\n  function getMinusOneButton() {\n    let btn = new PIXI.Sprite.from(CONST.ASSETS.MINUS_ONE);\n\n    btn.draw = () => {\n      let w = GRID_WIDTH / 4;\n      let h = w / 2;\n      btn.x = WINDOW_WIDTH / 2 - 1.10 * GRID_WIDTH / 2 + w;\n      btn.y = 0;\n      btn.width = w;\n      btn.height = h;\n    };\n\n    btn.interactive = true;\n    btn.on('pointerdown', () => {\n      btn.interactive = false;\n      setTimeout(() => {\n        btn.interactive = true;\n      }, 100);\n      updateGrid(-1);\n    });\n    btn.draw();\n    return btn;\n  } // Called on resize\n\n\n  function resize(newFrame) {\n    let frame;\n\n    if (newFrame) {\n      frame = newFrame;\n    } else {\n      frame = {\n        width: WINDOW_WIDTH,\n        height: WINDOW_HEIGHT\n      };\n    }\n\n    WINDOW_WIDTH = frame.width;\n    WINDOW_HEIGHT = frame.height; // Recompute\n\n    H_W_RATIO = newFrame.height / newFrame.width;\n    LANDSCAPE = H_W_RATIO < 3 / 4;\n    ARENA_WIDTH = LANDSCAPE ? 4 / 3 * newFrame.height : newFrame.width;\n    ARENA_HEIGHT = LANDSCAPE ? newFrame.height : 3 / 4 * newFrame.width;\n    GRID_HEIGHT = 0.75 * WINDOW_HEIGHT;\n    GRID_WIDTH = GRID_HEIGHT; // Set\n\n    backGround.width = WINDOW_WIDTH;\n    backGround.height = WINDOW_HEIGHT;\n    app.renderer.resize(WINDOW_WIDTH, WINDOW_HEIGHT);\n    gridNodes.draw();\n    gridCounters.draw();\n    lockButton.draw();\n    plusOneButton.draw();\n    minusOneButton.draw();\n    minusTenButton.draw();\n    plusTenButton.draw();\n    zeroButton.draw();\n  } // Actions\n\n\n  function setPivot() {\n    console.log(\"state.pivot\", state.pivot);\n\n    if (state.pivot != null) {\n      console.log(\"unlocking\");\n      state.pivot = null;\n      lockButton.texture = UNLOCK_TEXTURE;\n      updateGrid(0);\n    } else {\n      console.log(\"locking\");\n      state.pivot = state.val;\n      lockButton.texture = LOCK_TEXTURE;\n    }\n  }\n\n  function updateGrid(inc) {\n    if (features['regroup'] == true) {\n      updateGridTwo(inc);\n    } else {\n      updateGridThree(inc);\n    }\n  }\n\n  function updateGridOne(inc) {\n    let newVal = state.val + inc;\n\n    if (newVal >= 0 && newVal <= 100) {\n      state.val = newVal;\n      let pivot = state.pivot,\n          val = state.val;\n      let count = 0;\n      gridCounters.grid.map((row, i) => {\n        row.map((e, j) => {\n          count += 1;\n\n          if (count <= val && !pivot) {\n            e.texture = alternator ? BLUE_TEXTURE : RED_TEXTURE;\n          } else if (count <= val && count <= pivot) {\n            e.texture = BLUE_TEXTURE;\n          } else if (count <= val && count >= pivot) {\n            e.texture = RED_TEXTURE;\n          } else if (count >= val && count <= pivot) {\n            e.texture = EMPTY_TEXTURE;\n          } else {\n            e.texture = null;\n          }\n        });\n      });\n    }\n  }\n\n  function updateGridTwo(inc) {\n    let newVal = state.val + inc;\n\n    if (newVal < state.pivot && state.val >= state.pivot) {\n      const w = lockButton.width;\n      const h = lockButton.height;\n      let timeline = new TimelineLite();\n      timeline.to(lockButton, 0.06, {\n        width: 1.3 * w,\n        height: 1.3 * h\n      }).to(lockButton, 0.06, {\n        width: w,\n        height: h\n      });\n    } else {\n      if (newVal >= 0 && newVal <= 100) {\n        // Switch only when it crosses\n        state.val = newVal;\n        let onesInNewVal = state.val % 10;\n        let tensInNewVal = state.val - onesInNewVal;\n        let onesInPivot = state.pivot % 10;\n        let tensInPivot = state.pivot - onesInPivot;\n        let difference = Math.abs(state.pivot - state.val);\n        let onesInDifference = difference % 10;\n        let tensInDifference = difference - onesInDifference;\n        let count = 0;\n        let pivot = state.pivot,\n            val = state.val;\n        gridCounters.grid.map((row, i) => {\n          row.map((e, j) => {\n            count += 1;\n\n            if (count <= val && pivot == null) {\n              e.texture = BLUE_TEXTURE;\n              console.log(\"first\");\n            } else if (count <= tensInPivot) {\n              e.texture = BLUE_TEXTURE;\n            } else if (count <= tensInDifference + tensInPivot) {\n              e.texture = RED_TEXTURE;\n            } else if (count <= tensInDifference + tensInPivot + onesInPivot) {\n              e.texture = BLUE_TEXTURE;\n            } else if (count <= newVal) {\n              e.texture = RED_TEXTURE;\n            } else {\n              e.texture = null;\n            }\n          });\n        });\n      }\n    }\n  }\n\n  function updateGridThree(inc) {\n    let newVal = state.val + inc;\n\n    if (newVal >= 0 && newVal <= 100) {\n      state.val = newVal;\n      let pivot = state.pivot,\n          val = state.val;\n      let count = 0;\n      let benchmark = 0;\n      let k = 0;\n      gridCounters.grid.map((row, i) => {\n        row.map((e, j) => {\n          count += 1;\n          let val = operationSequence[k];\n\n          if (count < benchmark && count < val + benchmark) {\n            alternator = !alternator;\n            benchmark = benchmark + val;\n            k = k + 1;\n          }\n\n          e.texture = alternator ? RED_TEXTURE : BLUE_TEXTURE;\n        });\n      });\n    }\n\n    alternator = !alternator;\n  } // Loading Script\n\n\n  function load() {\n    if (setup.props.features) {\n      features = setup.props.features;\n    } // Setup Background\n\n\n    backGround = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    backGround.width = WINDOW_WIDTH;\n    backGround.height = WINDOW_HEIGHT;\n    backGround.x = 0;\n    backGround.y = 0;\n    backGround.interactive = true;\n    backGround.on('pointerdown', updateGrid);\n    app.stage.addChild(backGround); // Initialize counters\n\n    gridNodes = new makeGridNodes(10);\n    gridCounters = new makeGridCounters(10);\n    zeroButton = getZeroButton();\n    app.stage.addChild(zeroButton);\n    plusTenButton = getPlusTenButton();\n    app.stage.addChild(plusTenButton);\n    plusOneButton = getPlusOneButton();\n    app.stage.addChild(plusOneButton);\n    minusTenButton = getMinusTenButton();\n    app.stage.addChild(minusTenButton);\n    minusOneButton = getMinusOneButton();\n    app.stage.addChild(minusOneButton);\n    lockButton = getLockButton();\n\n    if (features['lock']) {\n      app.stage.addChild(lockButton);\n    }\n  } // Call load script\n\n\n  load(); // Resize assignment\n\n  app.resize = frame => resize(frame);\n\n  app.resizable = true;\n};","map":{"version":3,"sources":["/Users/andrewfenner/Documents/MindResearch/Prototypes/newtestunit/src/js/calculator.js"],"names":["PIXI","CONST","TweenMax","TimelineLite","Power2","Elastic","CSSPlugin","TweenLite","TimelineMax","BottomNavigation","init","app","setup","BLUE_TEXTURE","Texture","from","ASSETS","BLUE_CIRCLE","RED_TEXTURE","RED_CIRCLE","EMPTY_TEXTURE","EMPTY_CIRCLE","LOCK_TEXTURE","LOCKED_LOCK","UNLOCK_TEXTURE","UNLOCKED_LOCK","state","pivot","val","features","H_W_RATIO","height","width","WINDOW_WIDTH","WINDOW_HEIGHT","LANDSCAPE","ARENA_WIDTH","ARENA_HEIGHT","GRID_HEIGHT","GRID_WIDTH","lockButton","backGround","plusOneButton","plusTenButton","minusTenButton","minusOneButton","gridCounters","gridNodes","zeroButton","currentTexture","alternator","operationSequence","makeGridNodes","dim","grid","i","row","j","newNode","Graphics","stage","addChild","push","draw","dx","dy","w","h","map","r","e","x","y","clear","beginFill","drawCircle","makeGridCounters","newCounter","Sprite","texture","anchor","set","getLockButton","btn","interactive","on","setPivot","getZeroButton","ZERO_OUT","updateGrid","getPlusTenButton","PLUS_TEN","setTimeout","getPlusOneButton","PLUS_ONE","getMinusTenButton","MINUS_TEN","getMinusOneButton","MINUS_ONE","resize","newFrame","frame","renderer","console","log","inc","updateGridTwo","updateGridThree","updateGridOne","newVal","count","timeline","to","onesInNewVal","tensInNewVal","onesInPivot","tensInPivot","difference","Math","abs","onesInDifference","tensInDifference","benchmark","k","load","props","BLUE_GRADIENT","resizable"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { BottomNavigation } from \"@material-ui/core\";\n\nexport const init = (app, setup) => {\n\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE)\n  const RED_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.RED_CIRCLE)\n  const EMPTY_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.EMPTY_CIRCLE)\n  const LOCK_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.LOCKED_LOCK)\n  const UNLOCK_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.UNLOCKED_LOCK)\n\n // State - can be used to reconstruct the app at any point in time.\n  let state = {\n    pivot: null,\n    val: 0,\n  }\n\n  // default setting for features\n  let features = {'lock': true,'regroup':false}\n\n  // Parameters (Only changes on resize)\n  let H_W_RATIO = setup.height/setup.width\n  let WINDOW_WIDTH = setup.width\n  let WINDOW_HEIGHT = setup.height\n  let LANDSCAPE = H_W_RATIO < 3/4\n  let ARENA_WIDTH = LANDSCAPE ? 4/3*setup.height : setup.width\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3/4*setup.width\n  let GRID_HEIGHT = 0.75*WINDOW_HEIGHT\n  let GRID_WIDTH = GRID_HEIGHT\n\n  // Entities - objects that appear on screen\n  let lockButton;\n  let backGround;\n  let plusOneButton;\n  let plusTenButton;\n  let minusTenButton;\n  let minusOneButton;\n  let gridCounters;  // Circles that represent numbers\n  let gridNodes;  // Placeholders / small dots\n  let zeroButton;\n  let currentTexture = RED_TEXTURE\n  let alternator = false\n  let operationSequence = []\n \n  // Constructors (should not be called on re-draw)\n  // START HERE: Let's try ot make this grid a container object and give it a redraw property.\n\n\n  function makeGridNodes(dim){\n      this.grid = []\n      // State: Texture: {Hollow,Blue,Red,None} , Hidden: {True,False}\n      for (let i = 0;i<dim;i++){\n        let row = []\n        for (let j = 0;j<dim;j++) {\n          let newNode = new PIXI.Graphics()\n          app.stage.addChild(newNode)\n          row.push(newNode)\n        }\n        this.grid.push(row)\n     }\n     // Draw function\n      this.draw = () => {\n        let dx = GRID_WIDTH/dim\n        let dy = dx\n        let w = dx/5\n        let h = w\n        this.grid.map((r,i)=>{\n          r.map(((e,j)=>{\n            let x = WINDOW_WIDTH/2 - dim/2*dx + dx*j\n            let y = WINDOW_HEIGHT/2 + dim/2*dy - dy*i\n            e.clear()\n            e.beginFill(0x000000)\n            e.drawCircle(x,y,w/2)\n          }))\n        })\n      }\n      this.draw()\n  }\n\n  function makeGridCounters(dim){\n    this.grid = []\n    // State: Texture: {Hollow,Blue,Red,None} , Hidden: {True,False}\n    for (let i = 0;i<dim;i++){\n      let row = []\n      for (let j = 0;j<dim;j++) {\n        let newCounter = new PIXI.Sprite()\n        newCounter.texture = null\n        newCounter.anchor.set(0.5)\n        app.stage.addChild(newCounter)\n        row.push(newCounter)\n      }\n      this.grid.push(row)\n   }\n   // Draw function\n    this.draw = () => {\n      let dx = GRID_WIDTH/dim\n      let dy = dx\n      let w = dx\n      let h = w\n      this.grid.map((r,i)=>{\n        r.map(((e,j)=>{\n          let x = WINDOW_WIDTH/2 - dim/2*dx + dx*j\n          let y = WINDOW_HEIGHT/2 + dim/2*dy - dy*i\n          e.x = x \n          e.y = y\n          e.width = w\n          e.height = h\n        }))\n      })\n    }\n    this.draw()\n}\n\n  function getLockButton(){\n    let btn  = new PIXI.Sprite.from(CONST.ASSETS.UNLOCKED_LOCK)\n\n    btn.draw = () => {\n      let w = GRID_WIDTH/8\n      let h = w*0.8\n      btn.x = WINDOW_WIDTH/2 - 1.10*GRID_WIDTH/2 + -w\n      btn.y = 0\n      btn.width = w\n      btn.height = h\n    } \n\n    btn.interactive = true\n    btn.on('pointerdown',()=>{\n      setPivot()\n    })\n    btn.draw()\n    return btn;\n  }\n\n  function getZeroButton(){\n    let btn  = new PIXI.Sprite.from(CONST.ASSETS.ZERO_OUT)\n\n    btn.draw = () => {\n      let w = GRID_WIDTH/8\n      let h = w*0.8\n      btn.x = WINDOW_WIDTH/2 + 1.10*GRID_WIDTH/2 \n      btn.y = 0\n      btn.width = w\n      btn.height = h\n    } \n\n    btn.interactive = true\n    btn.on('pointerdown',()=>{\n      state.val = 0\n      state.pivot = null\n      updateGrid(0)\n    })\n    btn.draw()\n    return btn;\n  }\n\n\n\n  function getPlusTenButton(){\n    let btn  = new PIXI.Sprite.from(CONST.ASSETS.PLUS_TEN)\n\n    btn.draw = () => {\n      let w = GRID_WIDTH/4\n      let h = w/2\n      btn.x = WINDOW_WIDTH/2 - 1.10*GRID_WIDTH/2 + 3*w\n      btn.y = 0\n      btn.width = w\n      btn.height = h\n    } \n\n    btn.interactive = true\n    btn.on('pointerdown',()=>\n    {\n      btn.interactive = false\n      setTimeout(()=>{\n        btn.interactive = true\n      },100)\n    operationSequence.push(10)\n    updateGrid(10)\n    })\n    btn.draw()\n    return btn;\n  }\n\n  function getPlusOneButton(){\n    let btn  = new PIXI.Sprite.from(CONST.ASSETS.PLUS_ONE)\n\n    btn.draw = () => {\n      let w = GRID_WIDTH/4\n      let h = w/2\n      btn.x = WINDOW_WIDTH/2 - 1.10*GRID_WIDTH/2 + 2*w\n      btn.y = 0\n      btn.width = w\n      btn.height = h\n    } \n\n    btn.interactive = true\n    btn.on('pointerdown',() => {\n      btn.interactive = false\n      setTimeout(()=>{\n        btn.interactive = true\n      },100)\n      updateGrid(1)})\n    btn.draw()\n    return btn;\n  }\n\n  function getMinusTenButton(){\n    let btn  = new PIXI.Sprite.from(CONST.ASSETS.MINUS_TEN)\n\n    btn.draw = () => {\n      let w = GRID_WIDTH/4\n      let h = w/2\n      btn.x = WINDOW_WIDTH/2 - 1.10*GRID_WIDTH/2\n      btn.y = 0\n      btn.width = w\n      btn.height = h\n    } \n\n    btn.interactive = true\n    btn.on('pointerdown',()=>{\n      btn.interactive = false\n      setTimeout(()=>{\n        btn.interactive = true\n      },100)\n      updateGrid(-10)})\n    btn.draw()\n    return btn;\n  }\n\n  function getMinusOneButton(){\n    let btn  = new PIXI.Sprite.from(CONST.ASSETS.MINUS_ONE)\n\n    btn.draw = () => {\n      let w = GRID_WIDTH/4\n      let h = w/2\n      btn.x = WINDOW_WIDTH/2 - 1.10*GRID_WIDTH/2 + w\n      btn.y = 0\n      btn.width = w\n      btn.height = h\n    } \n\n    btn.interactive = true\n    btn.on('pointerdown',()=>{\n      btn.interactive = false\n      setTimeout(()=>{\n        btn.interactive = true\n      },100)\n      updateGrid(-1)})\n    btn.draw()\n    return btn;\n  }\n\n  // Called on resize\n  function resize(newFrame){\n    \n    let frame;\n    if (newFrame){\n      frame = newFrame\n    } else {\n      frame = {width: WINDOW_WIDTH,height: WINDOW_HEIGHT}\n    }\n    WINDOW_WIDTH = frame.width\n    WINDOW_HEIGHT = frame.height\n    // Recompute\n    H_W_RATIO= newFrame.height/newFrame.width\n    LANDSCAPE = H_W_RATIO < 3/4\n    ARENA_WIDTH = LANDSCAPE ? 4/3*newFrame.height : newFrame.width\n    ARENA_HEIGHT = LANDSCAPE ? newFrame.height : 3/4*newFrame.width\n    GRID_HEIGHT = 0.75*WINDOW_HEIGHT\n    GRID_WIDTH = GRID_HEIGHT\n\n    // Set\n    backGround.width = WINDOW_WIDTH\n    backGround.height = WINDOW_HEIGHT\n    app.renderer.resize(WINDOW_WIDTH,WINDOW_HEIGHT)\n    gridNodes.draw()\n    gridCounters.draw()\n    lockButton.draw()\n    plusOneButton.draw()\n    minusOneButton.draw()\n    minusTenButton.draw()\n    plusTenButton.draw()\n    zeroButton.draw()\n\n\n  }\n\n  // Actions\n  function setPivot(){\n    console.log(\"state.pivot\",state.pivot)\n    if (state.pivot != null){\n      console.log(\"unlocking\")\n      state.pivot = null\n      lockButton.texture = UNLOCK_TEXTURE\n      updateGrid(0)\n    } else {\n      console.log(\"locking\")\n      state.pivot = state.val\n      lockButton.texture = LOCK_TEXTURE\n    }\n  }\n\n\nfunction updateGrid(inc){\n  if (features['regroup']==true){\n    updateGridTwo(inc)\n  } else {\n    updateGridThree(inc)\n  }\n}\n\n  function updateGridOne(inc){\n    let newVal = state.val + inc \n    if (newVal >= 0 && newVal <= 100) {\n      state.val = newVal\n      let {pivot,val} = state\n      let count = 0\n      gridCounters.grid.map((row,i)=>{\n        row.map((e,j)=>{\n          count += 1\n        if (count <= val && !pivot) {\n            e.texture = alternator ? BLUE_TEXTURE : RED_TEXTURE\n        } else if (count <= val && count <= pivot){\n            e.texture = BLUE_TEXTURE\n        } else if (count <= val && count >= pivot) {\n            e.texture = RED_TEXTURE\n        } else if (count >= val && count <= pivot){\n          e.texture = EMPTY_TEXTURE\n        } else {\n          e.texture = null\n        }\n        })\n      })\n    }\n  }\n\n  function updateGridTwo(inc){\n    let newVal = state.val + inc\n\n    if (newVal < state.pivot && state.val >= state.pivot){\n      const w = lockButton.width\n      const h = lockButton.height\n      let timeline = new TimelineLite()\n        timeline.to(lockButton,0.06,{width: 1.3*w,height:1.3*h})\n                .to(lockButton,0.06,{width: w,height: h})\n    } else {\n      if (newVal >= 0 && newVal <= 100) {\n        // Switch only when it crosses\n\n        state.val = newVal\n        let onesInNewVal = state.val%10\n        let tensInNewVal = state.val-onesInNewVal\n        let onesInPivot = state.pivot%10\n        let tensInPivot = state.pivot-onesInPivot\n        let difference = Math.abs(state.pivot - state.val)\n        let onesInDifference = difference%10\n        let tensInDifference = difference - onesInDifference\n        let count = 0\n        let {pivot,val} = state\n        gridCounters.grid.map((row,i)=>{\n          row.map((e,j)=>{\n            count += 1\n          if (count <= val && pivot == null) {\n              e.texture = BLUE_TEXTURE\n              console.log(\"first\")\n          } else if (count <= tensInPivot){\n              e.texture = BLUE_TEXTURE\n          } else if (count <= tensInDifference+tensInPivot){\n            e.texture = RED_TEXTURE\n          } else if (count <= tensInDifference+tensInPivot+onesInPivot){\n            e.texture = BLUE_TEXTURE\n          } else if (count <= newVal){\n            e.texture = RED_TEXTURE\n          }\n          else {\n            e.texture = null\n          }\n          })\n        })\n      }\n    }\n}\n\n\nfunction updateGridThree(inc){\n  let newVal = state.val + inc \n  if (newVal >= 0 && newVal <= 100) {\n    state.val = newVal\n    let {pivot,val} = state\n    let count = 0\n    let benchmark = 0\n    let k = 0\n    gridCounters.grid.map((row,i)=>{\n      row.map((e,j)=>{\n        count += 1\n        let val = operationSequence[k]\n        if (count < benchmark && count < val+benchmark){\n          alternator = !alternator\n          benchmark = benchmark + val \n          k = k+1\n        }\n        e.texture = alternator ? RED_TEXTURE : BLUE_TEXTURE\n      })\n    })\n  }\n  alternator = !alternator\n}\n\n\n  // Loading Script\n  function load(){\n    if (setup.props.features){\n      features = setup.props.features\n    }\n\n    // Setup Background\n    backGround = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    backGround.width = WINDOW_WIDTH\n    backGround.height = WINDOW_HEIGHT\n    backGround.x = 0;\n    backGround.y = 0;\n    backGround.interactive = true\n    backGround.on('pointerdown',updateGrid)\n    app.stage.addChild(backGround)\n\n    // Initialize counters\n    gridNodes = new makeGridNodes(10)\n    gridCounters = new makeGridCounters(10)\n\n    zeroButton = getZeroButton()\n    app.stage.addChild(zeroButton)\n\n    plusTenButton = getPlusTenButton()\n    app.stage.addChild(plusTenButton)\n\n    plusOneButton = getPlusOneButton()\n    app.stage.addChild(plusOneButton)\n\n    minusTenButton = getMinusTenButton()\n    app.stage.addChild(minusTenButton)\n\n    minusOneButton = getMinusOneButton()\n    app.stage.addChild(minusOneButton)\n\n    lockButton = getLockButton()\n    if (features['lock']){\n      app.stage.addChild(lockButton)\n    }\n    \n  }\n  // Call load script\n  load()\n  // Resize assignment\n  app.resize = (frame) => resize(frame)\n  app.resizable = true\n};\n"]},"metadata":{},"sourceType":"module"}