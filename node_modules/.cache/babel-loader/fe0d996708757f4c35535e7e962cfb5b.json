{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport blueGradient from \"../assets/blue-gradient.png\";\nimport * as CONST from \"./const.js\";\nimport QuestionMark from '../assets/QuestionMark.png';\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { Fraction, Draggable } from \"./api.js\";\nimport { isObject } from \"util\";\nconst ASSETS = CONST.ASSETS;\nexport const init = (app, setup) => {\n  // Layout Parameters\n  const LINE_PERCENTAGE = 0.8;\n  let WINDOW_WIDTH = setup.width;\n  let BAR_HEIGHT = setup.height / 15;\n  let WINDOW_HEIGHT = setup.height;\n  let H_W_RATIO = setup.height / setup.width;\n  let LANDSCAPE = H_W_RATIO < 3 / 4;\n  let ARENA_WIDTH = LANDSCAPE ? 4 / 3 * setup.height : setup.width;\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3 / 4 * setup.width;\n  let SQUARE_DIM = ARENA_HEIGHT * 0.6;\n  let SQUARE_AREA = SQUARE_DIM * SQUARE_DIM;\n  let Stencil = new PIXI.Graphics();\n  let Nodes = [];\n  let CurrenPolygon = [];\n  let fraction; // Constants\n\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.GLASS_CIRCLE);\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.GLASS_CIRCLE);\n\n  function makeBackground() {\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH;\n    this.sprite.height = WINDOW_HEIGHT;\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.interactive = true;\n    app.stage.addChild(this.sprite);\n\n    this.draw = () => {\n      this.sprite.width = WINDOW_WIDTH;\n      this.sprite.height = WINDOW_HEIGHT;\n    };\n  }\n\n  class Node extends PIXI.Sprite {\n    constructor() {\n      super();\n      this.on('pointerdown', this.pointerDown);\n      this.on('pointerup', this.pointerUp);\n      this.on('pointerupoutside', this.generatePolygon);\n      this.anchor.set(0.5);\n      this.activated = false;\n      this.texture = PIN_TEXTURE;\n      this.interactive = true;\n    }\n\n    pointerDown() {\n      if (this.first) {\n        this.first = false;\n        this.generatePolygon();\n      } else {\n        this.activated = true;\n\n        if (CurrenPolygon.length == 0) {\n          this.first = true;\n        }\n\n        CurrenPolygon.push([this.x, this.y]);\n        this.scale.x = this.scale.x * 1.2;\n        this.scale.y = this.scale.y * 1.2;\n      }\n    }\n\n    pointerUp() {}\n\n    generatePolygon() {\n      Nodes.forEach(n => {\n        if (n.activated) {\n          n.scale.x = n.scale.x / 1.2;\n          n.scale.y = n.scale.y / 1.2;\n          n.activated = false;\n        }\n      });\n      let xS = CurrenPolygon.map(p => p[0]);\n      let yS = CurrenPolygon.map(p => p[1]);\n      let minX = Math.min(...xS);\n      let minY = Math.min(...yS);\n      let flatPolygon = [];\n      CurrenPolygon.forEach(p => {\n        flatPolygon.push(p[0] - minX);\n        flatPolygon.push(p[1] - minY);\n      });\n      let offsetpolygon = CurrenPolygon.map((v, i) => {\n        return [v[0] - minX, v[1] - minY];\n      });\n      let a = polygonArea(CurrenPolygon) / SQUARE_AREA;\n      let f = decimalToFrac(a);\n      console.log(\"polyarea\", a);\n      console.log(\"areatofrac\", decimalToFrac(a));\n      fraction.set(f[0], f[1]);\n      var graphics = new PIXI.Graphics();\n      graphics.beginFill(0xff3b55);\n      graphics.drawPolygon(flatPolygon);\n      graphics.endFill();\n      let d = new Draggable();\n      d.hitArea = new PIXI.Polygon(flatPolygon);\n      let t = app.renderer.generateTexture(graphics);\n      d.texture = t;\n      d.x = minX;\n      d.y = minY;\n      app.stage.addChild(d);\n      CurrenPolygon = [];\n    }\n\n  }\n\n  function set(a, b) {\n    let dx = SQUARE_DIM / (a - 1);\n    let dy = SQUARE_DIM / (b - 1);\n    let dim = SQUARE_DIM / 15;\n\n    for (let i = 0; i < a; i++) {\n      for (let j = 0; j < a; j++) {\n        let n = new Node();\n        Nodes.push(n);\n        n.x = WINDOW_WIDTH / 2 - SQUARE_DIM / 2 + i * dx;\n        n.y = WINDOW_HEIGHT / 2 - SQUARE_DIM / 2 + j * dy;\n        n.w = dx / 10;\n        n.height = dim;\n        n.width = dim;\n        app.stage.addChild(n);\n      }\n    }\n  }\n\n  function decimalToFrac(dec) {\n    for (let i = 1; i < 100; i++) {\n      for (let j = 0; j < i; j++) {\n        if (Math.abs(j / i - dec) < 0.001) {\n          return [j, i];\n        }\n      }\n    }\n  } // Called on resize\n\n\n  function resize(newFrame, flex) {\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame);\n    app.renderer.resize(WINDOW_WIDTH, WINDOW_HEIGHT);\n  }\n\n  function polygonArea(poly) {\n    let area = 0;\n    let xS = poly.map(p => p[0]);\n    let yS = poly.map(p => p[1]); // Calculate value of shoelace formula \n\n    let n = poly.length;\n    let j = n - 1;\n\n    for (let i = 0; i < n; i++) {\n      area = area + (xS[j] + xS[i]) * (yS[j] - yS[i]);\n      j = i; // j is previous vertex to i \n    } // Return absolute value \n\n\n    return Math.abs(area / 2);\n  }\n\n  function updateLayoutParams(newFrame) {\n    let frame;\n\n    if (newFrame) {\n      frame = newFrame;\n    } else {\n      frame = {\n        width: WINDOW_WIDTH,\n        height: WINDOW_HEIGHT\n      };\n    }\n\n    WINDOW_WIDTH = frame.width;\n    WINDOW_HEIGHT = frame.height;\n    H_W_RATIO = frame.height / frame.width;\n    LANDSCAPE = H_W_RATIO < 3 / 4;\n    ARENA_WIDTH = LANDSCAPE ? 4 / 3 * frame.height : frame.width;\n    ARENA_HEIGHT = LANDSCAPE ? frame.height : 3 / 4 * frame.width;\n  } // Loading Script\n\n\n  function load() {\n    console.log('load called');\n    let features = {};\n\n    if (setup.props.features) {\n      features = setup.props.features;\n    }\n\n    let backGround = new makeBackground();\n    set(4, 4);\n    fraction = new Fraction(0, 1, 100);\n    app.stage.addChild(Stencil);\n    app.stage.addChild(fraction);\n    fraction.x = SQUARE_AREA / 10;\n    fraction.y = SQUARE_AREA / 10;\n  } // Call load script\n\n\n  load(); // Not sure where else to put this.\n\n  app.resize = frame => resize(frame);\n\n  app.resizable = true;\n};","map":{"version":3,"sources":["/Users/andrewfenner/Documents/MindResearch/Prototypes/newtestunit/src/js/gridnodes.js"],"names":["PIXI","blueGradient","CONST","QuestionMark","TweenMax","TimelineLite","Power2","Elastic","CSSPlugin","TweenLite","TimelineMax","Fraction","Draggable","isObject","ASSETS","init","app","setup","LINE_PERCENTAGE","WINDOW_WIDTH","width","BAR_HEIGHT","height","WINDOW_HEIGHT","H_W_RATIO","LANDSCAPE","ARENA_WIDTH","ARENA_HEIGHT","SQUARE_DIM","SQUARE_AREA","Stencil","Graphics","Nodes","CurrenPolygon","fraction","BLUE_TEXTURE","Texture","from","GLASS_CIRCLE","PIN_TEXTURE","makeBackground","sprite","Sprite","BLUE_GRADIENT","x","y","interactive","stage","addChild","draw","Node","constructor","on","pointerDown","pointerUp","generatePolygon","anchor","set","activated","texture","first","length","push","scale","forEach","n","xS","map","p","yS","minX","Math","min","minY","flatPolygon","offsetpolygon","v","i","a","polygonArea","f","decimalToFrac","console","log","graphics","beginFill","drawPolygon","endFill","d","hitArea","Polygon","t","renderer","generateTexture","b","dx","dy","dim","j","w","dec","abs","resize","newFrame","flex","updateLayoutParams","poly","area","frame","load","features","props","backGround","resizable"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport blueGradient from \"../assets/blue-gradient.png\";\nimport * as CONST from \"./const.js\";\nimport QuestionMark from '../assets/QuestionMark.png'\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport {Fraction, Draggable} from \"./api.js\"\nimport { isObject } from \"util\";\nconst ASSETS = CONST.ASSETS\n\n\nexport const init = (app, setup) => {\n \n\n  // Layout Parameters\n  const LINE_PERCENTAGE = 0.8\n  let WINDOW_WIDTH = setup.width\n  let BAR_HEIGHT = setup.height/15\n  let WINDOW_HEIGHT = setup.height\n  let H_W_RATIO = setup.height/setup.width\n  let LANDSCAPE = H_W_RATIO < 3/4\n  let ARENA_WIDTH = LANDSCAPE ? 4/3*setup.height : setup.width\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3/4*setup.width\n  let SQUARE_DIM = ARENA_HEIGHT*0.6\n  let SQUARE_AREA = SQUARE_DIM*SQUARE_DIM\n\n  \n  let Stencil = new PIXI.Graphics()\n  let Nodes = []\n  let CurrenPolygon = []\n  let fraction;\n\n\n    // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.GLASS_CIRCLE)\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.GLASS_CIRCLE)\n\n\n\n\n  function makeBackground(){\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH\n    this.sprite.height = WINDOW_HEIGHT\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.interactive = true\n\n    app.stage.addChild(this.sprite)\n\n    this.draw = () => {\n        this.sprite.width = WINDOW_WIDTH\n        this.sprite.height = WINDOW_HEIGHT\n    }\n  }\n\n  class Node extends PIXI.Sprite {\n    constructor(){\n      super()\n      this.on('pointerdown',this.pointerDown)\n      this.on('pointerup',this.pointerUp)\n      this.on('pointerupoutside',this.generatePolygon)\n      this.anchor.set(0.5)\n      this.activated = false\n      this.texture = PIN_TEXTURE\n      this.interactive = true\n    }\n\n    pointerDown(){\n      if (this.first){\n        this.first = false\n        this.generatePolygon()\n      } else {\n        this.activated = true\n        if (CurrenPolygon.length == 0){\n          this.first = true\n        }\n        CurrenPolygon.push([this.x,this.y])\n        this.scale.x = this.scale.x*1.2\n        this.scale.y = this.scale.y*1.2\n      }\n    }\n\n    pointerUp(){\n      \n    }\n\n    generatePolygon(){\n      Nodes.forEach(n=>{\n        if (n.activated){\n          n.scale.x = n.scale.x/1.2\n          n.scale.y = n.scale.y/1.2\n          n.activated = false\n        }\n      })\n      let xS = CurrenPolygon.map(p=> p[0])\n      let yS = CurrenPolygon.map(p=> p[1])\n      let minX = Math.min(...xS)\n      let minY = Math.min(...yS)\n\n      let flatPolygon = []\n      CurrenPolygon.forEach(p=>{\n        flatPolygon.push(p[0]-minX)\n        flatPolygon.push(p[1]-minY)\n      })\n\n      let offsetpolygon = CurrenPolygon.map((v,i)=>{\n        return [v[0]-minX,v[1]-minY]\n      })\n\n      let a = polygonArea(CurrenPolygon)/SQUARE_AREA\n      let f = decimalToFrac(a)\n      console.log(\"polyarea\",a)\n      console.log(\"areatofrac\",decimalToFrac(a))\n\n      fraction.set(f[0],f[1])\n      \n\n      var graphics = new PIXI.Graphics();\n      graphics.beginFill(0xff3b55);\n      graphics.drawPolygon(flatPolygon);\n      graphics.endFill();\n\n      let d = new Draggable()\n      d.hitArea = new PIXI.Polygon(flatPolygon)\n      let t = app.renderer.generateTexture(graphics)\n      d.texture = t\n      d.x = minX\n      d.y = minY\n      app.stage.addChild(d)\n      CurrenPolygon = []\n    }\n  }\n\n  function set(a,b){\n    let dx = SQUARE_DIM/(a-1)\n    let dy = SQUARE_DIM/(b-1)\n    let dim = SQUARE_DIM/15\n    for (let i=0;i<a;i++){\n      for (let j=0;j<a;j++){\n        let n = new Node()\n        Nodes.push(n)\n        n.x = WINDOW_WIDTH/2 - SQUARE_DIM/2 + i*dx \n        n.y = WINDOW_HEIGHT/2 - SQUARE_DIM/2+j*dy\n        n.w = dx/10\n        n.height = dim\n        n.width = dim\n        app.stage.addChild(n)\n      }\n    }\n  }\n\n\n  function decimalToFrac(dec){\n    for (let i=1;i<100;i++){\n      for (let j=0;j<i;j++){\n        if (Math.abs(j/i - dec) < 0.001) {\n          return [j,i]\n        }\n      }\n    }\n  }\n\n  // Called on resize\n  function resize(newFrame,flex){\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame)\n    app.renderer.resize(WINDOW_WIDTH,WINDOW_HEIGHT)\n  }\n\n\n  function polygonArea(poly) {\n     let area = 0\n     let xS = poly.map(p=> p[0])\n     let yS = poly.map(p=> p[1])\n \n      // Calculate value of shoelace formula \n      let n = poly.length\n      let j = n - 1 \n      for (let i = 0; i < n; i++) { \n          area = area + (xS[j] + xS[i]) * (yS[j] - yS[i]);\n          j = i;  // j is previous vertex to i \n      } \n    \n      // Return absolute value \n      return Math.abs(area / 2)\n  } \n\n  function updateLayoutParams(newFrame){\n    let frame;\n    if (newFrame){\n      frame = newFrame\n    } else {\n      frame = {width: WINDOW_WIDTH,height: WINDOW_HEIGHT}\n    }\n    WINDOW_WIDTH = frame.width\n    WINDOW_HEIGHT = frame.height\n    H_W_RATIO = frame.height/frame.width\n    LANDSCAPE = H_W_RATIO < 3/4\n    ARENA_WIDTH = LANDSCAPE ? 4/3*frame.height : frame.width\n    ARENA_HEIGHT = LANDSCAPE ? frame.height : 3/4*frame.width\n  }\n\n  // Loading Script\n  function load(){\n    console.log('load called')\n    let features = {}\n    if (setup.props.features){\n      features = setup.props.features\n    }\n\n    let backGround = new makeBackground()\n\n    set(4,4)\n\n    fraction = new Fraction(0,1,100)\n\n    app.stage.addChild(Stencil)\n\n    app.stage.addChild(fraction)\n    fraction.x = SQUARE_AREA/10\n    fraction.y = SQUARE_AREA/10\n\n\n\n  }\n\n  // Call load script\n  load()\n  // Not sure where else to put this.\n  app.resize = (frame) => resize(frame)\n  app.resizable = true\n};\n"]},"metadata":{},"sourceType":"module"}