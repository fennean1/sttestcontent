{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { SSL_OP_TLS_BLOCK_PADDING_BUG, SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from \"constants\";\nimport { number } from \"prop-types\";\nimport { tsExpressionWithTypeArguments, thisExpression } from \"@babel/types\";\nconst ASSETS = CONST.ASSETS;\nexport const init = (app, setup) => {\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE);\n  const LINE_PERCENTAGE = 0.8;\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN); // Initial State\n\n  let state = {\n    valA: 8,\n    valB: 8,\n    lineMax: 20\n  }; // Layout Parameters\n\n  let WINDOW_WIDTH = setup.width;\n  let WINDOW_HEIGHT = setup.height;\n  let H_W_RATIO = setup.height / setup.width;\n  let LANDSCAPE = H_W_RATIO < 3 / 4;\n  let ARENA_WIDTH = LANDSCAPE ? 4 / 3 * setup.height : setup.width;\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3 / 4 * setup.width;\n  let LINE_WIDTH = LINE_PERCENTAGE * WINDOW_WIDTH;\n  let LINE_THICKNESS = LINE_WIDTH / 200;\n  let TICK_THICKNESS = 2 * LINE_THICKNESS / 3;\n  let MAJOR_TICK_HEIGHT = LINE_WIDTH / 20;\n  let MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT / 2;\n  let DX = LINE_WIDTH / state.lineMax;\n  let LINE_START = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n  let STRIP_HEIGHT = LINE_WIDTH / 12; // Reference to entities.\n\n  let backGround;\n  let numberLine;\n  let pinA;\n  let pinB;\n  let stripA;\n  let stripB;\n  let stripBLabel;\n  let stripALabel;\n  let incButton;\n  let decButton;\n  let activePin;\n  let FirstRow; // Constructors (should not be called on re-draw)\n\n  function makeNumberLine() {\n    this.tickSpan = 1;\n    this.labelSpan = 1;\n    this.max = state.lineMax;\n    this.ticks = []; // size 120\n\n    this.labels = [];\n    this.line = new PIXI.Graphics();\n\n    this.init = n => {\n      this.line.lineStyle(LINE_THICKNESS, 0x000000);\n      this.line.x = ARENA_WIDTH / 2 - LINE_WIDTH / 2;\n      this.line.y = ARENA_HEIGHT / 2;\n      this.line.lineTo(LINE_WIDTH, 0);\n      this.draw();\n      app.stage.addChild(this.line);\n\n      for (let i = 0; i < 120; i++) {\n        let newTick = new PIXI.Graphics();\n        newTick.lineStyle(LINE_THICKNESS, 0x000000);\n        newTick.x = this.line.x;\n        newTick.y = this.line.y - LINE_THICKNESS / 2;\n        newTick.lineTo(0, MINOR_TICK_HEIGHT);\n        app.stage.addChild(newTick);\n        this.ticks.push(newTick); // Setup Labels Here\n\n        let newLabel = new PIXI.Text(i, {\n          fontFamily: \"Arial\",\n          fontSize: DX / 2,\n          fill: \"0x000000\",\n          align: \"center\"\n        });\n        newLabel.anchor.x = 0.5;\n        this.labels.push(newLabel);\n        newLabel.x = this.line.x + DX * i;\n        newLabel.y = this.line.y + MINOR_TICK_HEIGHT;\n        app.stage.addChild(newLabel);\n      }\n\n      this.increment(0);\n    };\n\n    this.getSetup = () => {// update tickspan etc. based on line max.\n    };\n\n    this.increment = inc => {\n      // Animation go here\n      this.max += inc; // Update State - (Context Specific)\n\n      state.lineMax = this.max;\n      updateLayoutParams();\n      this.ticks.forEach((e, i) => {\n        if (i > this.max) {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH + this.line.x\n          });\n        } else {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH / this.max * i + this.line.x\n          });\n        }\n      });\n      this.labels.forEach((e, i) => {\n        if (i > this.max) {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH + this.line.x\n          });\n          TweenLite.to(e, 0.5, {\n            alpha: 0\n          });\n        } else {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH / this.max * i + this.line.x\n          });\n          TweenLite.to(e, 0.5, {\n            alpha: 1\n          });\n        }\n      });\n    };\n\n    this.draw = () => {\n      this.line.width = LINE_WIDTH;\n      this.line.height = LINE_THICKNESS;\n      this.line.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n      this.line.y = WINDOW_HEIGHT / 2;\n      this.ticks.forEach((e, i) => {\n        e.width = TICK_THICKNESS;\n        e.height = MINOR_TICK_HEIGHT;\n        e.y = this.line.y - LINE_THICKNESS / 2;\n\n        if (i > this.max) {\n          e.x = LINE_WIDTH + this.line.x;\n        } else {\n          e.x = LINE_WIDTH / this.max * i + this.line.x;\n        }\n      });\n      this.labels.forEach((e, i) => {\n        e.y = this.line.y + MINOR_TICK_HEIGHT;\n        e.style.fontSize = DX / 2;\n\n        if (i > this.max) {\n          e.x = LINE_WIDTH + this.line.x;\n        } else {\n          e.x = LINE_WIDTH / this.max * i + this.line.x;\n        }\n      });\n    };\n\n    this.init();\n  }\n\n  function makeBackground() {\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH;\n    this.sprite.height = WINDOW_HEIGHT;\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup', globalPointerUp);\n    this.sprite.interactive = true;\n    app.stage.addChild(this.sprite);\n\n    this.draw = () => {\n      this.sprite.width = WINDOW_WIDTH;\n      this.sprite.height = WINDOW_HEIGHT;\n    };\n  }\n\n  function makePin(id) {\n    this.sprite = new PIXI.Sprite();\n    this.sprite.id = id;\n    this.sprite.texture = PIN_TEXTURE;\n    this.sprite.interactive = true;\n    this.sprite.anchor.x = 0.5;\n    this.sprite.on('pointerdown', onDragStart);\n    this.sprite.on('pointermove', onDragMove);\n    this.sprite.on('pointerup', onDragEnd);\n    this.sprite.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n    this.sprite.val = 8;\n    app.stage.addChild(this.sprite);\n\n    this.sprite.round = () => {\n      // Pre Computation\n      let rawLineX = this.sprite.x - numberLine.line.x;\n      let n = Math.round(rawLineX / DX); // Setting\n\n      this.sprite.x = numberLine.line.x + n * DX;\n      this.sprite.val = n; // There's gotta be a better pattern than this\n\n      if (this.sprite.id == 0) {\n        state.valA = this.sprite.val;\n      } else if (this.sprite.id == 1) {\n        state.valB = this.sprite.val;\n      }\n    };\n\n    this.draw = () => {\n      this.sprite.width = STRIP_HEIGHT;\n      this.sprite.height = STRIP_HEIGHT;\n      this.sprite.y = WINDOW_HEIGHT / 2 + MINOR_TICK_HEIGHT + DX / 2;\n      this.sprite.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2 + this.sprite.val * DX;\n    };\n\n    this.draw();\n  } // Pin Drag Functions\n\n\n  function onDragStart(event) {\n    app.stage.addChild(this);\n    this.deltaTouch = {\n      x: this.x - event.data.global.x,\n      y: this.y - event.data.global.y\n    };\n    this.dragging = true;\n    this.data = event.data;\n  }\n\n  function onDragEnd(event) {\n    this.dragging = false;\n    this.data = null;\n    this.round();\n  }\n\n  function onDragMove(event) {\n    if (this.dragging) {\n      let newPosition = this.data.getLocalPosition(this.parent);\n      this.x = newPosition.x + this.deltaTouch.x; // Keep within number line bounds.\n\n      if (this.x < WINDOW_WIDTH / 2 - LINE_WIDTH / 2) {\n        this.dragging = false;\n        this.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n      } else if (this.x > WINDOW_WIDTH / 2 + LINE_WIDTH / 2) {\n        this.dragging = false;\n        this.x = WINDOW_WIDTH / 2 + LINE_WIDTH / 2;\n      }\n    }\n  }\n\n  function makeArrowButton(inc) {\n    let button = new PIXI.Sprite.from(CONST.ASSETS.ARROW);\n    button.inc = inc;\n    button.interactive = true;\n    button.anchor.set(0.5);\n    button.on('pointerdown', () => {\n      numberLine.increment(inc);\n      resize(null, false);\n    });\n    app.stage.addChild(button);\n\n    button.draw = () => {\n      if (button.inc == -5) {\n        button.width = STRIP_HEIGHT / 2;\n        button.height = STRIP_HEIGHT / 2;\n        button.x = WINDOW_WIDTH - 1.1 * button.width;\n        button.y = WINDOW_HEIGHT / 2 + 1 / 2 * button.width;\n        button.rotation = Math.PI;\n      } else if (button.inc == 5) {\n        button.width = STRIP_HEIGHT / 2;\n        button.height = STRIP_HEIGHT / 2;\n        button.x = WINDOW_WIDTH - 1.1 * button.width;\n        button.y = WINDOW_HEIGHT / 2 - 1 / 2 * button.width;\n      }\n    };\n\n    return button;\n  }\n\n  function Row(num, den) {\n    // Internal Params\n    let touching = true; // Default values\n\n    this.numerator = num;\n    this.denominator = den;\n    this.active = false;\n    this.container = new PIXI.Container();\n    this.container.interactive = true;\n    this.sprites = [];\n\n    function getTexture(type) {\n      if (type == 'A') {\n        let A = new PIXI.Graphics();\n        A.lineStyle(3, 0x000000);\n        A.drawRoundedRect(0, 0, 50, 50, 1);\n        return app.renderer.generateTexture(A);\n      } else if (type == 'B') {\n        let A = new PIXI.Graphics();\n        A.lineStyle(3, 0x000000);\n        A.drawRoundedRect(0, 0, 50, 50, 1);\n        return app.renderer.generateTexture(A);\n      }\n    }\n\n    this.blockA = new PIXI.Graphics();\n    this.blockA.lineStyle(3, 0x000000);\n    this.blockA.drawRoundedRect(0, 0, 50, 50, 1);\n    let A = app.renderer.generateTexture(this.blockA);\n    this.blockB = new PIXI.Graphics();\n    this.blockB.beginFill(0xff4772);\n    this.blockB.lineStyle(3, 0x000000);\n    this.blockB.drawRoundedRect(0, 0, 50, 50, 1);\n    let B = app.renderer.generateTexture(this.blockB);\n\n    this.draw = () => {\n      for (let i = 0; i < this.sprites.length; i++) {\n        this.sprites[i].x = LINE_START + this.sprites[i].width * i;\n      }\n    };\n\n    for (let i = 0; i < this.denominator; i++) {\n      console.log(\"balls\");\n      let s = new PIXI.Sprite.from(A);\n      s.on('pointerdown', spritePointerDown);\n      s.on('pointerup', spritePointerUp);\n      s.on('pointermove', spritePointerMoved);\n      s.interactive = true;\n      s.active = false;\n      s.x = i * LINE_WIDTH / this.denominator;\n      s.y = 100;\n      this.sprites.push(s);\n      this.container.addChild(s);\n    } //  Attached methods\n\n\n    this.container.on('pointerdown', containerPointerDown);\n    this.container.on('pointerup', containerPointerUp);\n    this.container.on('pointermove', containerPointerMove); // Add children\n\n    app.stage.addChild(this.container);\n\n    function spritePointerDown(event) {\n      this.touched = true;\n      this.dragged = false;\n    }\n\n    function spritePointerMoved(event) {\n      if (this.touched) {\n        console.log(\"pointermove\");\n        this.dragged = true;\n      }\n    }\n\n    function spritePointerUp(event) {\n      this.touched = false;\n      console.log('this.draggeed', this.dragged);\n\n      if (!this.dragged) {\n        this.dragged = false;\n        this.active = !this.active;\n        this.alpha = 0.2;\n        this.texture = this.active ? B : A;\n        TweenLite.to(this, 0.4, {\n          alpha: 1\n        });\n      }\n    }\n\n    function containerPointerDown(event) {\n      this.data = event.data;\n      this.startWidth = this.width;\n      this.dragStartY = event.data.global.y;\n      this.touching = true;\n      touching = true;\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      };\n    }\n\n    function containerPointerUp(event) {\n      this.touching = false;\n      touching = false;\n    }\n\n    function containerPointerMove(event) {\n      if (this.touching) {\n        const newPosition = this.data.getLocalPosition(this.parent);\n        this.x = event.data.global.x + this.deltaTouch.x;\n        this.y = event.data.global.y + this.deltaTouch.y;\n        this.dragged = true;\n      }\n    }\n\n    this.draw();\n  }\n\n  function globalPointerUp() {\n    // Ughhh...\n    FirstRow.touching = false; //pinB.sprite.dragging = false\n    //pinA.sprite.round()\n    //pinB.sprite.round()\n    //stripA.draw()\n    //stripB.draw()\n    //stripALabel.draw()\n    //stripBLabel.draw()\n  } // Called on resize\n\n\n  function resize(newFrame, flex) {\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame);\n    app.renderer.resize(WINDOW_WIDTH, WINDOW_HEIGHT);\n    numberLine.draw();\n    backGround.draw();\n    pinA.draw();\n    incButton.draw();\n    decButton.draw();\n  }\n\n  function updateLayoutParams(newFrame) {\n    let frame;\n\n    if (newFrame) {\n      frame = newFrame;\n    } else {\n      frame = {\n        width: WINDOW_WIDTH,\n        height: WINDOW_HEIGHT\n      };\n    }\n\n    WINDOW_WIDTH = frame.width;\n    WINDOW_HEIGHT = frame.height;\n    H_W_RATIO = frame.height / frame.width;\n    LANDSCAPE = H_W_RATIO < 3 / 4;\n    ARENA_WIDTH = LANDSCAPE ? 4 / 3 * frame.height : frame.width;\n    ARENA_HEIGHT = LANDSCAPE ? frame.height : 3 / 4 * frame.width;\n    LINE_WIDTH = LINE_PERCENTAGE * WINDOW_WIDTH;\n    LINE_THICKNESS = LINE_WIDTH / 200;\n    TICK_THICKNESS = LINE_THICKNESS / 2;\n    MAJOR_TICK_HEIGHT = LINE_WIDTH / 20;\n    MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT / 2;\n    DX = LINE_WIDTH / state.lineMax;\n    LINE_START = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n    STRIP_HEIGHT = LINE_WIDTH / 12;\n  } // Loading Script\n\n\n  function load() {\n    let features = {\n      'strips': true\n    };\n\n    if (setup.props.features) {\n      features = setup.props.features;\n    }\n\n    backGround = new makeBackground();\n    numberLine = new makeNumberLine();\n    pinA = new makePin(0); //pinB = new makePin(1)\n    //stripA = new makeStrip(0)\n    //stripB = new makeStrip(1)\n    //stripALabel = makeStripLabel(0)\n    //stripBLabel = makeStripLabel(1)\n\n    incButton = makeArrowButton(5);\n    decButton = makeArrowButton(-5); //stripALabel.draw()\n    //stripBLabel.draw()\n\n    incButton.draw();\n    decButton.draw();\n    FirstRow = new Row(3, 4);\n  } // Call load script\n\n\n  load(); // Not sure where else to put this.\n\n  app.resize = frame => resize(frame);\n\n  app.resizable = true;\n};","map":{"version":3,"sources":["/Users/andrewfenner/Documents/MindResearch/Prototypes/newtestunit/src/js/fractionstacks.js"],"names":["PIXI","CONST","TweenMax","TimelineLite","Power2","Elastic","CSSPlugin","TweenLite","TimelineMax","SSL_OP_TLS_BLOCK_PADDING_BUG","SSL_OP_SSLEAY_080_CLIENT_DH_BUG","number","tsExpressionWithTypeArguments","thisExpression","ASSETS","init","app","setup","BLUE_TEXTURE","Texture","from","BLUE_CIRCLE","LINE_PERCENTAGE","PIN_TEXTURE","SHARP_PIN","state","valA","valB","lineMax","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","H_W_RATIO","LANDSCAPE","ARENA_WIDTH","ARENA_HEIGHT","LINE_WIDTH","LINE_THICKNESS","TICK_THICKNESS","MAJOR_TICK_HEIGHT","MINOR_TICK_HEIGHT","DX","LINE_START","STRIP_HEIGHT","backGround","numberLine","pinA","pinB","stripA","stripB","stripBLabel","stripALabel","incButton","decButton","activePin","FirstRow","makeNumberLine","tickSpan","labelSpan","max","ticks","labels","line","Graphics","n","lineStyle","x","y","lineTo","draw","stage","addChild","i","newTick","push","newLabel","Text","fontFamily","fontSize","fill","align","anchor","increment","getSetup","inc","updateLayoutParams","forEach","e","to","alpha","style","makeBackground","sprite","Sprite","BLUE_GRADIENT","on","globalPointerUp","interactive","makePin","id","texture","onDragStart","onDragMove","onDragEnd","val","round","rawLineX","Math","event","deltaTouch","data","global","dragging","newPosition","getLocalPosition","parent","makeArrowButton","button","ARROW","set","resize","rotation","PI","Row","num","den","touching","numerator","denominator","active","container","Container","sprites","getTexture","type","A","drawRoundedRect","renderer","generateTexture","blockA","blockB","beginFill","B","length","console","log","s","spritePointerDown","spritePointerUp","spritePointerMoved","containerPointerDown","containerPointerUp","containerPointerMove","touched","dragged","startWidth","dragStartY","newFrame","flex","frame","load","features","props","resizable"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { SSL_OP_TLS_BLOCK_PADDING_BUG, SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from \"constants\";\nimport { number } from \"prop-types\";\nimport { tsExpressionWithTypeArguments, thisExpression } from \"@babel/types\";\nconst ASSETS = CONST.ASSETS\n\nexport const init = (app, setup) => {\n\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE)\n  const LINE_PERCENTAGE = 0.8\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN)\n\n\n // Initial State\n  let state = {\n    valA: 8,\n    valB: 8,\n    lineMax: 20,\n  }\n\n  // Layout Parameters\n  let WINDOW_WIDTH = setup.width\n  let WINDOW_HEIGHT = setup.height\n  let H_W_RATIO = setup.height/setup.width\n  let LANDSCAPE = H_W_RATIO < 3/4\n  let ARENA_WIDTH = LANDSCAPE ? 4/3*setup.height : setup.width\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3/4*setup.width\n  let LINE_WIDTH = LINE_PERCENTAGE*WINDOW_WIDTH\n  let LINE_THICKNESS = LINE_WIDTH/200\n  let TICK_THICKNESS = 2*LINE_THICKNESS/3\n  let MAJOR_TICK_HEIGHT = LINE_WIDTH/20\n  let MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT/2\n  let DX = LINE_WIDTH/state.lineMax\n  let LINE_START = WINDOW_WIDTH/2 - LINE_WIDTH/2\n  let STRIP_HEIGHT = LINE_WIDTH/12\n\n  // Reference to entities.\n  let backGround;\n  let numberLine;\n  let pinA;\n  let pinB;\n  let stripA;\n  let stripB;\n  let stripBLabel;\n  let stripALabel;\n  let incButton;\n  let decButton;\n  let activePin;\n  let FirstRow\n\n \n  // Constructors (should not be called on re-draw)\n  function makeNumberLine(){\n     this.tickSpan = 1\n     this.labelSpan = 1\n     this.max = state.lineMax\n     this.ticks = [] // size 120\n     this.labels = []\n     this.line = new PIXI.Graphics()\n\n     this.init = (n) => {\n        this.line.lineStyle(LINE_THICKNESS,0x000000)\n        this.line.x = ARENA_WIDTH/2-LINE_WIDTH/2\n        this.line.y = ARENA_HEIGHT/2\n        this.line.lineTo(LINE_WIDTH,0)\n        this.draw()\n        app.stage.addChild(this.line)\n\n        for (let i = 0;i<120;i++){\n            let newTick = new PIXI.Graphics()\n            newTick.lineStyle(LINE_THICKNESS,0x000000)\n            newTick.x = this.line.x \n            newTick.y = this.line.y - LINE_THICKNESS/2\n            newTick.lineTo(0,MINOR_TICK_HEIGHT)\n            app.stage.addChild(newTick)\n            this.ticks.push(newTick)\n\n            // Setup Labels Here\n            let newLabel = new PIXI.Text(i,{\n              fontFamily: \"Arial\",\n              fontSize: DX/2,\n              fill: \"0x000000\",\n              align: \"center\"\n            })\n            newLabel.anchor.x = 0.5\n            this.labels.push(newLabel)\n            newLabel.x = this.line.x + DX*i\n            newLabel.y = this.line.y + MINOR_TICK_HEIGHT\n            app.stage.addChild(newLabel)\n        }\n        this.increment(0)\n     }\n\n     this.getSetup = ()=> {\n         // update tickspan etc. based on line max.\n     }\n\n     this.increment = (inc) => {\n         // Animation go here\n         this.max += inc\n\n         // Update State - (Context Specific)\n         state.lineMax = this.max\n         updateLayoutParams()\n\n         this.ticks.forEach((e,i)=> {\n            if (i > this.max){\n                TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n            } else {\n                TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n            }\n         })\n\n         this.labels.forEach((e,i)=> {\n          if (i > this.max){\n              TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n              TweenLite.to(e,0.5,{alpha: 0})\n          } else {\n              TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n              TweenLite.to(e,0.5,{alpha: 1})\n          }\n       })\n     }\n\n     this.draw = () => {\n        this.line.width = LINE_WIDTH\n        this.line.height = LINE_THICKNESS\n        this.line.x = WINDOW_WIDTH/2 - LINE_WIDTH/2\n        this.line.y = WINDOW_HEIGHT/2\n        this.ticks.forEach((e,i)=> {\n            e.width = TICK_THICKNESS\n            e.height = MINOR_TICK_HEIGHT\n            e.y = this.line.y - LINE_THICKNESS/2\n            if (i > this.max){\n                e.x = LINE_WIDTH + this.line.x \n            } else {\n                e.x =  LINE_WIDTH/this.max*i + this.line.x\n            }\n         })\n         this.labels.forEach((e,i)=> {\n          e.y = this.line.y + MINOR_TICK_HEIGHT\n          e.style.fontSize = DX/2\n          if (i > this.max){\n              e.x = LINE_WIDTH + this.line.x \n          } else {\n              e.x =  LINE_WIDTH/this.max*i + this.line.x\n          }\n       })\n     }\n     this.init()\n  }\n\n  function makeBackground(){\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH\n    this.sprite.height = WINDOW_HEIGHT\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup',globalPointerUp)\n    this.sprite.interactive = true\n\n    app.stage.addChild(this.sprite)\n\n    this.draw = () => {\n        this.sprite.width = WINDOW_WIDTH\n        this.sprite.height = WINDOW_HEIGHT\n    }\n  }\n\n\n  function makePin(id){\n    this.sprite = new PIXI.Sprite()\n    this.sprite.id = id\n    this.sprite.texture = PIN_TEXTURE\n    this.sprite.interactive = true\n    this.sprite.anchor.x = 0.5\n    this.sprite.on('pointerdown',onDragStart)\n    this.sprite.on('pointermove',onDragMove)\n    this.sprite.on('pointerup',onDragEnd)\n    this.sprite.x = WINDOW_WIDTH/2 - LINE_WIDTH/2\n    this.sprite.val = 8\n    app.stage.addChild(this.sprite)\n\n    this.sprite.round = () => {\n\n      // Pre Computation\n      let rawLineX = this.sprite.x - numberLine.line.x\n      let n = Math.round(rawLineX/DX)\n\n      // Setting\n      this.sprite.x = numberLine.line.x + n*DX\n      this.sprite.val = n\n\n      // There's gotta be a better pattern than this\n      if (this.sprite.id == 0){\n        state.valA = this.sprite.val\n      } else if (this.sprite.id == 1){\n        state.valB = this.sprite.val\n      }\n    }\n\n    this.draw = () => { \n      this.sprite.width = STRIP_HEIGHT\n      this.sprite.height = STRIP_HEIGHT\n      this.sprite.y = WINDOW_HEIGHT/2 + MINOR_TICK_HEIGHT + DX/2\n      this.sprite.x = WINDOW_WIDTH/2 - LINE_WIDTH/2 + this.sprite.val*DX\n    }\n    this.draw()\n   }\n\n  // Pin Drag Functions\n  function onDragStart(event) {\n      app.stage.addChild(this)\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n      this.dragging = true;\n      this.data = event.data;\n  }\n\n  function onDragEnd(event) {\n    this.dragging = false;\n    this.data = null;\n    this.round()\n  }\n\n  function onDragMove(event) {\n    if (this.dragging) {\n      let newPosition = this.data.getLocalPosition(this.parent);\n      this.x = newPosition.x + this.deltaTouch.x;\n\n      // Keep within number line bounds.\n      if (this.x < WINDOW_WIDTH/2-LINE_WIDTH/2){\n        this.dragging = false\n        this.x = WINDOW_WIDTH/2-LINE_WIDTH/2\n      } else if (this.x > WINDOW_WIDTH/2+LINE_WIDTH/2) {\n        this.dragging = false\n        this.x = WINDOW_WIDTH/2+LINE_WIDTH/2\n      }\n    }\n  }\n\n  function makeArrowButton(inc){\n    let button = new PIXI.Sprite.from(CONST.ASSETS.ARROW)\n    button.inc = inc\n    button.interactive = true\n    button.anchor.set(0.5)\n    button.on('pointerdown',()=>{\n      numberLine.increment(inc)\n      resize(null,false)\n    })\n    app.stage.addChild(button)\n\n    button.draw = () => {\n      if (button.inc == -5){\n        button.width = STRIP_HEIGHT/2\n        button.height = STRIP_HEIGHT/2\n        button.x = WINDOW_WIDTH - 1.1*button.width\n        button.y = WINDOW_HEIGHT/2 + 1/2*button.width\n        button.rotation = Math.PI\n      } else if (button.inc == 5){\n        button.width = STRIP_HEIGHT/2\n        button.height = STRIP_HEIGHT/2\n        button.x = WINDOW_WIDTH - 1.1*button.width\n        button.y = WINDOW_HEIGHT/2  - 1/2*button.width\n      }\n    }\n    return button\n  }\n \n  function Row(num,den){\n\n\n\n    // Internal Params\n    let touching = true   \n    \n\n    // Default values\n    this.numerator = num\n    this.denominator = den\n    this.active = false\n\n  \n    this.container = new PIXI.Container()\n    this.container.interactive = true\n    this.sprites = []\n  \n\n    function getTexture(type){\n      if (type == 'A'){\n        let A = new PIXI.Graphics()\n        A.lineStyle(3,0x000000) \n        A.drawRoundedRect(0,0,50,50,1)\n        return app.renderer.generateTexture(A)\n      } else if (type == 'B'){\n        let A = new PIXI.Graphics()\n        A.lineStyle(3,0x000000) \n        A.drawRoundedRect(0,0,50,50,1)\n        return app.renderer.generateTexture(A)\n    \n      }\n    }\n\n    this.blockA = new PIXI.Graphics()\n    this.blockA.lineStyle(3,0x000000) \n    this.blockA.drawRoundedRect(0,0,50,50,1)\n    let A = app.renderer.generateTexture(this.blockA)\n\n    this.blockB = new PIXI.Graphics()\n    this.blockB.beginFill(0xff4772)\n    this.blockB.lineStyle(3,0x000000) \n    this.blockB.drawRoundedRect(0,0,50,50,1)\n    let B = app.renderer.generateTexture(this.blockB)\n\n    this.draw = () => {\n      for (let i = 0;i<this.sprites.length;i++){\n        this.sprites[i].x = LINE_START+this.sprites[i].width*i\n      }\n    }\n\n    for (let i = 0;i<this.denominator;i++) {\n      console.log(\"balls\")\n      let s = new PIXI.Sprite.from(A)\n      s.on('pointerdown',spritePointerDown)\n      s.on('pointerup',spritePointerUp)\n      s.on('pointermove',spritePointerMoved)\n      s.interactive = true\n      s.active = false\n      s.x = i*LINE_WIDTH/this.denominator\n      s.y = 100\n      this.sprites.push(s)\n      this.container.addChild(s)\n    }\n      \n\n    //  Attached methods\n    this.container.on('pointerdown',containerPointerDown)\n    this.container.on('pointerup',containerPointerUp)\n    this.container.on('pointermove',containerPointerMove)\n\n    // Add children\n    app.stage.addChild(this.container)\n  \n\n    function spritePointerDown(event){\n      this.touched = true\n      this.dragged = false\n    }\n\n    function spritePointerMoved(event) {\n\n      if (this.touched){\n        console.log(\"pointermove\")\n        this.dragged = true\n      }\n    }\n\n    function spritePointerUp(event){\n         this.touched = false\n         console.log('this.draggeed',this.dragged)\n     if (!this.dragged) {\n        this.dragged = false\n        this.active = !this.active\n        this.alpha = 0.2\n        this.texture = this.active ? B : A\n        TweenLite.to(this,0.4,{alpha: 1})\n       }\n    }\n\n \n   function containerPointerDown(event) {\n      this.data = event.data\n      this.startWidth = this.width\n      this.dragStartY = event.data.global.y\n      this.touching = true\n      touching = true\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n    }\n\n \n   function containerPointerUp(event) {\n      this.touching = false\n      touching = false\n    }\n\n    function containerPointerMove(event) {\n      if (this.touching){\n        const newPosition = this.data.getLocalPosition(this.parent);\n        this.x = event.data.global.x + this.deltaTouch.x\n        this.y = event.data.global.y + this.deltaTouch.y\n        this.dragged = true\n      }\n    }\n\n\n    this.draw()\n\n  }\n\n  function globalPointerUp(){\n    // Ughhh...\n    FirstRow.touching = false\n    //pinB.sprite.dragging = false\n    //pinA.sprite.round()\n    //pinB.sprite.round()\n    //stripA.draw()\n    //stripB.draw()\n    //stripALabel.draw()\n    //stripBLabel.draw()\n  }\n  \n  // Called on resize\n  function resize(newFrame,flex){\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame)\n    app.renderer.resize(WINDOW_WIDTH,WINDOW_HEIGHT)\n    numberLine.draw()\n    backGround.draw()\n    pinA.draw()\n    incButton.draw()\n    decButton.draw()\n  }\n\n  function updateLayoutParams(newFrame){\n    let frame;\n    if (newFrame){\n      frame = newFrame\n    } else {\n      frame = {width: WINDOW_WIDTH,height: WINDOW_HEIGHT}\n    }\n    WINDOW_WIDTH = frame.width\n    WINDOW_HEIGHT = frame.height\n    H_W_RATIO = frame.height/frame.width\n    LANDSCAPE = H_W_RATIO < 3/4\n    ARENA_WIDTH = LANDSCAPE ? 4/3*frame.height : frame.width\n    ARENA_HEIGHT = LANDSCAPE ? frame.height : 3/4*frame.width\n    LINE_WIDTH = LINE_PERCENTAGE*WINDOW_WIDTH\n    LINE_THICKNESS = LINE_WIDTH/200\n    TICK_THICKNESS = LINE_THICKNESS/2\n    MAJOR_TICK_HEIGHT = LINE_WIDTH/20\n    MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT/2\n    DX = LINE_WIDTH/state.lineMax\n    LINE_START = WINDOW_WIDTH/2 - LINE_WIDTH/2\n    STRIP_HEIGHT = LINE_WIDTH/12\n  }\n\n  // Loading Script\n  function load(){\n    let features = {'strips': true}\n    if (setup.props.features){\n      features = setup.props.features\n    }\n\n\n    backGround = new makeBackground()\n    numberLine = new makeNumberLine()\n    pinA = new makePin(0)\n    //pinB = new makePin(1)\n    //stripA = new makeStrip(0)\n    //stripB = new makeStrip(1)\n    //stripALabel = makeStripLabel(0)\n    //stripBLabel = makeStripLabel(1)\n    incButton = makeArrowButton(5)\n    decButton = makeArrowButton(-5)\n    //stripALabel.draw()\n    //stripBLabel.draw()\n    incButton.draw()\n    decButton.draw()\n    FirstRow = new Row(3,4)\n  }\n\n  // Call load script\n  load()\n  // Not sure where else to put this.\n  app.resize = (frame) => resize(frame)\n  app.resizable = true\n};\n"]},"metadata":{},"sourceType":"module"}