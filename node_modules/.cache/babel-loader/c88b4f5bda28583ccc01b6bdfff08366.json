{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { SSL_OP_TLS_BLOCK_PADDING_BUG, SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from \"constants\";\nimport { number } from \"prop-types\";\nimport { tsExpressionWithTypeArguments, thisExpression, throwStatement } from \"@babel/types\";\nconst ASSETS = CONST.ASSETS;\nexport const init = (app, setup) => {\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE);\n  const LINE_PERCENTAGE = 0.8;\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN); // Initial State\n\n  let state = {\n    valA: 8,\n    valB: 8,\n    lineMax: 20\n  }; // Layout Parameters\n\n  let WINDOW_WIDTH = setup.width;\n  let WINDOW_HEIGHT = setup.height;\n  let H_W_RATIO = setup.height / setup.width;\n  let LANDSCAPE = H_W_RATIO < 3 / 4;\n  let ARENA_WIDTH = LANDSCAPE ? 4 / 3 * setup.height : setup.width;\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3 / 4 * setup.width;\n  let LINE_WIDTH = LINE_PERCENTAGE * WINDOW_WIDTH;\n  let LINE_THICKNESS = LINE_WIDTH / 200;\n  let TICK_THICKNESS = 2 * LINE_THICKNESS / 3;\n  let MAJOR_TICK_HEIGHT = LINE_WIDTH / 20;\n  let MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT / 2;\n  let DX = LINE_WIDTH / state.lineMax;\n  let LINE_START = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n  let STRIP_HEIGHT = LINE_WIDTH / 12; // RELEVENT\n\n  let ActiveRow;\n  let ActiveIndex = 0;\n  let FirstRow;\n  let SecondRow;\n  var Rows;\n\n  function placeButtons() {\n    let x = Rows[ActiveIndex].container.x;\n    let y = Rows[ActiveIndex].container.y;\n    let w = Rows[ActiveIndex].container.width;\n    let h = Rows[ActiveIndex].container.height;\n    PlusButton.x = x + w;\n    PlusButton.y = y;\n    MinusButton.x = x;\n    MinusButton.y = y;\n  }\n\n  let PlusButton = new PIXI.Sprite.from(ASSETS.PLUS);\n  PlusButton.interactive = true;\n  PlusButton.anchor.set(0.5);\n  PlusButton.on('pointerdown', () => {\n    PlusButton.interactive = false;\n    incActiveFrac(1);\n    setTimeout(() => {\n      PlusButton.interactive = true;\n    }, 300);\n  });\n  PlusButton.width = 50;\n  PlusButton.height = 50;\n  PlusButton.y = 3 / 4 * WINDOW_HEIGHT;\n  PlusButton.x = 3 / 4 * WINDOW_WIDTH;\n  let MinusButton = new PIXI.Sprite.from(ASSETS.MINUS);\n  MinusButton.interactive = true;\n  MinusButton.anchor.set(0.5);\n  MinusButton.on('pointerdown', () => {\n    MinusButton.interactive = false;\n    incActiveFrac(-1);\n    setTimeout(() => {\n      MinusButton.interactive = true;\n    }, 300);\n  });\n  MinusButton.width = 50;\n  MinusButton.height = 50;\n  MinusButton.y = 3 / 4 * WINDOW_HEIGHT;\n  MinusButton.x = 1 / 4 * WINDOW_WIDTH;\n  let LeftWhisker = new PIXI.Graphics();\n  let RightWhisker = new PIXI.Graphics();\n  let A;\n  let B; // Reference to entities. - deprecated.\n\n  let backGround;\n  let numberLine;\n  let pinA;\n  let pinB;\n  let stripA;\n  let stripB;\n  let stripBLabel;\n  let stripALabel;\n  let incButton;\n  let decButton;\n  let activePin;\n\n  function incActiveFrac(inc) {\n    Rows[ActiveIndex].incDenonimator(inc);\n  } // Constructors (should not be called on re-draw)\n\n\n  function makeNumberLine() {\n    this.tickSpan = 1;\n    this.labelSpan = 1;\n    this.max = state.lineMax;\n    this.ticks = []; // size 120\n\n    this.labels = [];\n    this.line = new PIXI.Graphics();\n\n    this.init = n => {\n      this.line.lineStyle(LINE_THICKNESS, 0x000000);\n      this.line.x = ARENA_WIDTH / 2 - LINE_WIDTH / 2;\n      this.line.y = ARENA_HEIGHT / 2;\n      this.line.lineTo(LINE_WIDTH, 0);\n      this.draw();\n      app.stage.addChild(this.line);\n\n      for (let i = 0; i < 120; i++) {\n        let newTick = new PIXI.Graphics();\n        newTick.lineStyle(LINE_THICKNESS, 0x000000);\n        newTick.x = this.line.x;\n        newTick.y = this.line.y - LINE_THICKNESS / 2;\n        newTick.lineTo(0, MINOR_TICK_HEIGHT);\n        app.stage.addChild(newTick);\n        this.ticks.push(newTick); // Setup Labels Here\n\n        let newLabel = new PIXI.Text(i, {\n          fontFamily: \"Arial\",\n          fontSize: DX / 2,\n          fill: \"0x000000\",\n          align: \"center\"\n        });\n        newLabel.anchor.x = 0.5;\n        this.labels.push(newLabel);\n        newLabel.x = this.line.x + DX * i;\n        newLabel.y = this.line.y + MINOR_TICK_HEIGHT;\n        app.stage.addChild(newLabel);\n      }\n\n      this.increment(0);\n    };\n\n    this.getSetup = () => {// update tickspan etc. based on line max.\n    };\n\n    this.increment = inc => {\n      // Animation go here\n      this.max += inc; // Update State - (Context Specific)\n\n      state.lineMax = this.max;\n      updateLayoutParams();\n      this.ticks.forEach((e, i) => {\n        if (i > this.max) {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH + this.line.x\n          });\n        } else {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH / this.max * i + this.line.x\n          });\n        }\n      });\n      this.labels.forEach((e, i) => {\n        if (i > this.max) {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH + this.line.x\n          });\n          TweenLite.to(e, 0.5, {\n            alpha: 0\n          });\n        } else {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH / this.max * i + this.line.x\n          });\n          TweenLite.to(e, 0.5, {\n            alpha: 1\n          });\n        }\n      });\n    };\n\n    this.draw = () => {\n      this.line.width = LINE_WIDTH;\n      this.line.height = LINE_THICKNESS;\n      this.line.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n      this.line.y = WINDOW_HEIGHT / 2;\n      this.ticks.forEach((e, i) => {\n        e.width = TICK_THICKNESS;\n        e.height = MINOR_TICK_HEIGHT;\n        e.y = this.line.y - LINE_THICKNESS / 2;\n\n        if (i > this.max) {\n          e.x = LINE_WIDTH + this.line.x;\n        } else {\n          e.x = LINE_WIDTH / this.max * i + this.line.x;\n        }\n      });\n      this.labels.forEach((e, i) => {\n        e.y = this.line.y + MINOR_TICK_HEIGHT;\n        e.style.fontSize = DX / 2;\n\n        if (i > this.max) {\n          e.x = LINE_WIDTH + this.line.x;\n        } else {\n          e.x = LINE_WIDTH / this.max * i + this.line.x;\n        }\n      });\n    };\n\n    this.init();\n  }\n\n  function makeBackground() {\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH;\n    this.sprite.height = WINDOW_HEIGHT;\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup', globalPointerUp);\n    this.sprite.interactive = true;\n    app.stage.addChild(this.sprite);\n\n    this.draw = () => {\n      this.sprite.width = WINDOW_WIDTH;\n      this.sprite.height = WINDOW_HEIGHT;\n    };\n  }\n\n  function makePin(id) {\n    this.sprite = new PIXI.Sprite();\n    this.sprite.id = id;\n    this.sprite.texture = PIN_TEXTURE;\n    this.sprite.interactive = true;\n    this.sprite.anchor.x = 0.5;\n    this.sprite.on('pointerdown', onDragStart);\n    this.sprite.on('pointermove', onDragMove);\n    this.sprite.on('pointerup', onDragEnd);\n    this.sprite.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n    this.sprite.val = 8;\n    app.stage.addChild(this.sprite);\n\n    this.sprite.round = () => {\n      // Pre Computation\n      let rawLineX = this.sprite.x - numberLine.line.x;\n      let n = Math.round(rawLineX / DX); // Setting\n\n      this.sprite.x = numberLine.line.x + n * DX;\n      this.sprite.val = n;\n      drawWhiskers(); // There's gotta be a better pattern than this\n\n      if (this.sprite.id == 0) {\n        state.valA = this.sprite.val;\n      } else if (this.sprite.id == 1) {\n        state.valB = this.sprite.val;\n      }\n    };\n\n    this.draw = () => {\n      this.sprite.width = STRIP_HEIGHT;\n      this.sprite.height = STRIP_HEIGHT;\n      this.sprite.y = WINDOW_HEIGHT / 2 + MINOR_TICK_HEIGHT + DX / 2;\n      this.sprite.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2 + this.sprite.val * DX;\n    };\n\n    this.draw();\n  } // Pin Drag Functions\n\n\n  function onDragStart(event) {\n    app.stage.addChild(this);\n    this.deltaTouch = {\n      x: this.x - event.data.global.x,\n      y: this.y - event.data.global.y\n    };\n    this.dragging = true;\n    this.data = event.data;\n  }\n\n  function onDragEnd(event) {\n    this.dragging = false;\n    this.data = null;\n    this.round();\n    Rows[ActiveIndex].draw(this.x - LINE_START);\n    drawWhiskers();\n    drawButtons();\n  }\n\n  function onDragMove(event) {\n    if (this.dragging) {\n      let width = this.x - LINE_START;\n      Rows[ActiveIndex].draw(width);\n      drawWhiskers();\n      let newPosition = this.data.getLocalPosition(this.parent);\n      this.x = newPosition.x + this.deltaTouch.x; // Keep within number line bounds.\n\n      if (this.x < WINDOW_WIDTH / 2 - LINE_WIDTH / 2) {\n        this.dragging = false;\n        this.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n      } else if (this.x > WINDOW_WIDTH / 2 + LINE_WIDTH / 2) {\n        this.dragging = false;\n        this.x = WINDOW_WIDTH / 2 + LINE_WIDTH / 2;\n      }\n    }\n  }\n\n  function makeArrowButton(inc) {\n    let button = new PIXI.Sprite.from(CONST.ASSETS.ARROW);\n    button.inc = inc;\n    button.interactive = true;\n    button.anchor.set(0.5);\n    button.on('pointerdown', () => {\n      numberLine.increment(inc);\n      resize(null, false);\n    });\n    app.stage.addChild(button);\n\n    button.draw = () => {\n      if (button.inc == -5) {\n        button.width = STRIP_HEIGHT / 2;\n        button.height = STRIP_HEIGHT / 2;\n        button.x = WINDOW_WIDTH - 1.1 * button.width;\n        button.y = WINDOW_HEIGHT / 2 + 1 / 2 * button.width;\n        button.rotation = Math.PI;\n      } else if (button.inc == 5) {\n        button.width = STRIP_HEIGHT / 2;\n        button.height = STRIP_HEIGHT / 2;\n        button.x = WINDOW_WIDTH - 1.1 * button.width;\n        button.y = WINDOW_HEIGHT / 2 - 1 / 2 * button.width;\n      }\n    };\n\n    return button;\n  }\n\n  app.stage.on('pointerdown', resizeLine);\n  app.stage.interactive = true;\n\n  function resizeLine(event) {}\n\n  function Row(num, den, width, ID) {\n    // Internal Params\n    let touching = true; // Default values\n\n    this.numerator = num;\n    this.denominator = den;\n    this.width = width;\n    this.id = ID;\n    this.container = new PIXI.Container();\n    this.container.id = ID;\n    this.container.width = width;\n    this.container.interactive = true;\n    this.container.y = WINDOW_HEIGHT / 2 - 50;\n    this.container.x = LINE_START;\n    this.sprites = [];\n    this.blockWidth = width / this.denominator;\n    this.blockA = new PIXI.Graphics();\n    this.blockA.lineStyle(3, 0x000000);\n    this.blockA.drawRoundedRect(0, 0, this.blockWidth, 50, 1);\n    let myA = app.renderer.generateTexture(this.blockA);\n    this.blockB = new PIXI.Graphics();\n    this.blockB.beginFill(0xff4772);\n    this.blockB.lineStyle(3, 0x000000);\n    this.blockB.drawRoundedRect(0, 0, this.blockWidth, 50, 1);\n    let myB = app.renderer.generateTexture(this.blockB);\n    let g = new PIXI.Graphics();\n\n    this.incDenonimator = inc => {\n      g.clear();\n      g.lineStyle(3, 0x000000);\n      g.drawRoundedRect(0, 0, this.width, 50, 1);\n      let R = app.renderer.generateTexture(g);\n      let s = new PIXI.Sprite();\n      this.container.addChild(s);\n      s.texture = R;\n      s.x = 0;\n\n      if (inc > 0) {\n        const onComplete = () => {\n          s.on('pointerdown', spritePointerDown);\n          s.on('pointerup', spritePointerUp);\n          s.on('pointermove', spritePointerMoved);\n          s.interactive = true;\n          s.active = false;\n          this.sprites.push(s);\n          this.draw();\n        };\n\n        TweenMax.to(this, 0.25, {\n          denominator: this.denominator + 1,\n          onUpdate: this.draw,\n          onComplete: onComplete\n        });\n      } else if (inc < 0) {\n        let removeme = this.sprites.pop();\n        this.container.removeChild(removeme);\n\n        const onComplete = () => {\n          this.draw();\n          this.container.removeChild(s);\n        };\n\n        TweenMax.to(this, 0.25, {\n          denominator: this.denominator - 1,\n          onUpdate: this.draw,\n          onComplete: onComplete\n        });\n      }\n    };\n\n    this.draw = width => {\n      if (width) {\n        this.width = width;\n      }\n\n      this.blockWidth = this.width / this.denominator;\n      this.blockA.clear();\n      this.blockA.lineStyle(3, 0x000000);\n      this.blockA.drawRoundedRect(0, 0, this.blockWidth, 50, 1);\n      myA = app.renderer.generateTexture(this.blockA);\n      this.blockB.clear();\n      this.blockB.beginFill(0xff4772);\n      this.blockB.lineStyle(3, 0x000000);\n      this.blockB.drawRoundedRect(0, 0, this.blockWidth, 50, 1);\n      myB = app.renderer.generateTexture(this.blockB);\n\n      for (let i = 0; i < this.sprites.length; i++) {\n        if (this.sprites[i].active) {\n          this.sprites[i].texture = myB;\n        } else {\n          this.sprites[i].texture = myA;\n        }\n\n        this.sprites[i].x = this.blockWidth * i;\n        this.sprites[i].y = 0;\n      }\n    };\n\n    for (let i = 0; i < this.denominator; i++) {\n      console.log(\"balls\");\n      let s = new PIXI.Sprite.from(myA);\n      s.on('pointerdown', spritePointerDown);\n      s.on('pointerup', spritePointerUp);\n      s.on('pointermove', spritePointerMoved);\n      s.interactive = true;\n      s.active = false;\n      s.x = i * LINE_WIDTH / this.denominator;\n      s.y = WINDOW_HEIGHT / 2 - 50;\n      this.sprites.push(s);\n      this.container.addChild(s);\n    } //  Attached methods\n\n\n    this.container.on('pointerdown', containerPointerDown);\n    this.container.on('pointerup', containerPointerUp);\n    this.container.on('pointermove', containerPointerMove); // Add children\n\n    app.stage.addChild(this.container);\n    this.width = this.container.width;\n\n    function spritePointerDown(event) {\n      this.touched = true;\n      this.dragged = false;\n    }\n\n    function spritePointerMoved(event) {\n      if (this.touched) {\n        console.log(\"pointermove\");\n        this.dragged = true;\n      }\n    }\n\n    function spritePointerUp(event) {\n      this.touched = false;\n      console.log('this.draggeed', this.dragged);\n\n      if (!this.dragged) {\n        this.dragged = false;\n        this.active = !this.active;\n        this.alpha = 0.2;\n        this.texture = this.active ? myB : myA;\n        TweenLite.to(this, 0.4, {\n          alpha: 1\n        });\n      }\n    }\n\n    function containerPointerDown(event) {\n      ActiveIndex = this.id;\n      drawWhiskers();\n      pinA.sprite.x = this.width + LINE_START;\n      this.data = event.data;\n      this.startWidth = this.width;\n      this.dragStartY = event.data.global.y;\n      this.touching = true;\n      touching = true;\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      };\n    }\n\n    function containerPointerUp(event) {\n      this.touching = false;\n      touching = false;\n    }\n\n    function containerPointerMove(event) {\n      if (this.touching) {\n        const newPosition = this.data.getLocalPosition(this.parent);\n        this.y = event.data.global.y + this.deltaTouch.y; //this.x = event.data.global.x + this.deltaTouch.x\n        //pinA.sprite.x = this.x + this.width\n\n        this.dragged = true;\n        drawWhiskers();\n      }\n    }\n\n    this.draw(width);\n  }\n\n  function drawWhiskers() {\n    console.log(\"Active index\", ActiveIndex);\n    console.log(\"row\", Rows);\n    LeftWhisker.clear();\n    LeftWhisker.lineStyle(2, 0x000000);\n    LeftWhisker.moveTo(Rows[ActiveIndex].container.x, Rows[ActiveIndex].container.y);\n    LeftWhisker.lineTo(Rows[ActiveIndex].container.x, WINDOW_HEIGHT / 2);\n    RightWhisker.clear();\n    LeftWhisker.lineStyle(2, 0x000000);\n    LeftWhisker.moveTo(Rows[ActiveIndex].container.x + Rows[ActiveIndex].width, Rows[ActiveIndex].container.y);\n    LeftWhisker.lineTo(Rows[ActiveIndex].container.x + Rows[ActiveIndex].width, WINDOW_HEIGHT / 2);\n  }\n\n  function globalPointerUp() {\n    // Ughhh...\n    Rows[ActiveIndex].container.touching = false;\n    pinA.sprite.dragging = false;\n    pinA.sprite.round();\n    Rows[ActiveIndex].draw(pinA.sprite.x - LINE_START);\n    drawWhiskers(); //pinB.sprite.round()\n    //stripA.draw()\n    //stripB.draw()\n    //stripALabel.draw()\n    //stripBLabel.draw()\n  } // Called on resize\n\n\n  function resize(newFrame, flex) {\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame);\n    app.renderer.resize(WINDOW_WIDTH, WINDOW_HEIGHT);\n    numberLine.draw();\n    backGround.draw();\n    pinA.draw();\n    incButton.draw();\n    decButton.draw();\n    Rows.forEach(r => r.draw());\n    drawWhiskers();\n  }\n\n  function updateLayoutParams(newFrame) {\n    let frame;\n\n    if (newFrame) {\n      frame = newFrame;\n    } else {\n      frame = {\n        width: WINDOW_WIDTH,\n        height: WINDOW_HEIGHT\n      };\n    }\n\n    WINDOW_WIDTH = frame.width;\n    WINDOW_HEIGHT = frame.height;\n    H_W_RATIO = frame.height / frame.width;\n    LANDSCAPE = H_W_RATIO < 3 / 4;\n    ARENA_WIDTH = LANDSCAPE ? 4 / 3 * frame.height : frame.width;\n    ARENA_HEIGHT = LANDSCAPE ? frame.height : 3 / 4 * frame.width;\n    LINE_WIDTH = LINE_PERCENTAGE * WINDOW_WIDTH;\n    LINE_THICKNESS = LINE_WIDTH / 200;\n    TICK_THICKNESS = LINE_THICKNESS / 2;\n    MAJOR_TICK_HEIGHT = LINE_WIDTH / 20;\n    MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT / 2;\n    DX = LINE_WIDTH / state.lineMax;\n    LINE_START = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n    STRIP_HEIGHT = LINE_WIDTH / 12;\n  } // Loading Script\n\n\n  function load() {\n    let features = {\n      'strips': true\n    };\n\n    if (setup.props.features) {\n      features = setup.props.features;\n    }\n\n    backGround = new makeBackground();\n    numberLine = new makeNumberLine();\n    pinA = new makePin(0); //pinB = new makePin(1)\n    //stripA = new makeStrip(0)\n    //stripB = new makeStrip(1)\n    //stripALabel = makeStripLabel(0)\n    //stripBLabel = makeStripLabel(1)\n\n    incButton = makeArrowButton(5);\n    decButton = makeArrowButton(-5); //stripALabel.draw()\n    //stripBLabel.draw()\n\n    incButton.draw();\n    decButton.draw();\n    FirstRow = new Row(3, 4, pinA.sprite.x - LINE_START, 0);\n    SecondRow = new Row(1, 3, pinA.sprite.x - LINE_START, 1);\n    SecondRow.container.y = WINDOW_HEIGHT / 2 - 100;\n    Rows = [FirstRow, SecondRow];\n    app.stage.addChild(LeftWhisker);\n    app.stage.addChild(RightWhisker);\n    app.stage.addChild(PlusButton);\n    app.stage.addChild(MinusButton);\n    drawWhiskers();\n  } // Call load script\n\n\n  load(); // Not sure where else to put this.\n\n  app.resize = frame => resize(frame);\n\n  app.resizable = true;\n};","map":{"version":3,"sources":["/Users/andrewfenner/Documents/MindResearch/Prototypes/newtestunit/src/js/fractionstacks.js"],"names":["PIXI","CONST","TweenMax","TimelineLite","Power2","Elastic","CSSPlugin","TweenLite","TimelineMax","SSL_OP_TLS_BLOCK_PADDING_BUG","SSL_OP_SSLEAY_080_CLIENT_DH_BUG","number","tsExpressionWithTypeArguments","thisExpression","throwStatement","ASSETS","init","app","setup","BLUE_TEXTURE","Texture","from","BLUE_CIRCLE","LINE_PERCENTAGE","PIN_TEXTURE","SHARP_PIN","state","valA","valB","lineMax","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","H_W_RATIO","LANDSCAPE","ARENA_WIDTH","ARENA_HEIGHT","LINE_WIDTH","LINE_THICKNESS","TICK_THICKNESS","MAJOR_TICK_HEIGHT","MINOR_TICK_HEIGHT","DX","LINE_START","STRIP_HEIGHT","ActiveRow","ActiveIndex","FirstRow","SecondRow","Rows","placeButtons","x","container","y","w","h","PlusButton","MinusButton","Sprite","PLUS","interactive","anchor","set","on","incActiveFrac","setTimeout","MINUS","LeftWhisker","Graphics","RightWhisker","A","B","backGround","numberLine","pinA","pinB","stripA","stripB","stripBLabel","stripALabel","incButton","decButton","activePin","inc","incDenonimator","makeNumberLine","tickSpan","labelSpan","max","ticks","labels","line","n","lineStyle","lineTo","draw","stage","addChild","i","newTick","push","newLabel","Text","fontFamily","fontSize","fill","align","increment","getSetup","updateLayoutParams","forEach","e","to","alpha","style","makeBackground","sprite","BLUE_GRADIENT","globalPointerUp","makePin","id","texture","onDragStart","onDragMove","onDragEnd","val","round","rawLineX","Math","drawWhiskers","event","deltaTouch","data","global","dragging","drawButtons","newPosition","getLocalPosition","parent","makeArrowButton","button","ARROW","resize","rotation","PI","resizeLine","Row","num","den","ID","touching","numerator","denominator","Container","sprites","blockWidth","blockA","drawRoundedRect","myA","renderer","generateTexture","blockB","beginFill","myB","g","clear","R","s","onComplete","spritePointerDown","spritePointerUp","spritePointerMoved","active","onUpdate","removeme","pop","removeChild","length","console","log","containerPointerDown","containerPointerUp","containerPointerMove","touched","dragged","startWidth","dragStartY","moveTo","newFrame","flex","r","frame","load","features","props","resizable"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { SSL_OP_TLS_BLOCK_PADDING_BUG, SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from \"constants\";\nimport { number } from \"prop-types\";\nimport { tsExpressionWithTypeArguments, thisExpression, throwStatement } from \"@babel/types\";\nconst ASSETS = CONST.ASSETS\n\nexport const init = (app, setup) => {\n\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE)\n  const LINE_PERCENTAGE = 0.8\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN)\n\n // Initial State\n  let state = {\n    valA: 8,\n    valB: 8,\n    lineMax: 20,\n  }\n\n\n  // Layout Parameters\n  let WINDOW_WIDTH = setup.width\n  let WINDOW_HEIGHT = setup.height\n  let H_W_RATIO = setup.height/setup.width\n  let LANDSCAPE = H_W_RATIO < 3/4\n  let ARENA_WIDTH = LANDSCAPE ? 4/3*setup.height : setup.width\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3/4*setup.width\n  let LINE_WIDTH = LINE_PERCENTAGE*WINDOW_WIDTH\n  let LINE_THICKNESS = LINE_WIDTH/200\n  let TICK_THICKNESS = 2*LINE_THICKNESS/3\n  let MAJOR_TICK_HEIGHT = LINE_WIDTH/20\n  let MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT/2\n  let DX = LINE_WIDTH/state.lineMax\n  let LINE_START = WINDOW_WIDTH/2 - LINE_WIDTH/2\n  let STRIP_HEIGHT = LINE_WIDTH/12\n\n\n  // RELEVENT\n  let ActiveRow;\n  let ActiveIndex = 0\n  let FirstRow\n  let SecondRow\n  var Rows;\n\n  function placeButtons(){\n    let x = Rows[ActiveIndex].container.x\n    let y = Rows[ActiveIndex].container.y\n    let w = Rows[ActiveIndex].container.width\n    let h = Rows[ActiveIndex].container.height\n    PlusButton.x = x + w \n    PlusButton.y = y \n    MinusButton.x = x \n    MinusButton.y = y\n  }\n\n  let PlusButton = new PIXI.Sprite.from(ASSETS.PLUS)\n  PlusButton.interactive = true\n  PlusButton.anchor.set(0.5)\n  PlusButton.on('pointerdown',()=>{\n    PlusButton.interactive = false\n    incActiveFrac(1)\n    setTimeout(()=>{PlusButton.interactive = true},300)\n  })\n  PlusButton.width = 50\n  PlusButton.height = 50\n  PlusButton.y = 3/4*WINDOW_HEIGHT\n  PlusButton.x = 3/4*WINDOW_WIDTH\n  let MinusButton = new PIXI.Sprite.from(ASSETS.MINUS)\n  MinusButton.interactive = true\n  MinusButton.anchor.set(0.5)\n  MinusButton.on('pointerdown',()=>{\n    MinusButton.interactive = false\n    incActiveFrac(-1)\n    setTimeout(()=>{MinusButton.interactive = true},300)\n  })\n  MinusButton.width = 50\n  MinusButton.height = 50\n  MinusButton.y = 3/4*WINDOW_HEIGHT\n  MinusButton.x = 1/4*WINDOW_WIDTH\n\n  let LeftWhisker  = new PIXI.Graphics()\n  let RightWhisker = new PIXI.Graphics()\n\n  let A;\n  let B;\n\n  // Reference to entities. - deprecated.\n  let backGround;\n  let numberLine;\n  let pinA;\n  let pinB;\n  let stripA;\n  let stripB;\n  let stripBLabel;\n  let stripALabel;\n  let incButton;\n  let decButton;\n  let activePin;\n\n\n  function incActiveFrac(inc){\n    Rows[ActiveIndex].incDenonimator(inc)\n  }\n\n \n  // Constructors (should not be called on re-draw)\n  function makeNumberLine(){\n     this.tickSpan = 1\n     this.labelSpan = 1\n     this.max = state.lineMax\n     this.ticks = [] // size 120\n     this.labels = []\n     this.line = new PIXI.Graphics()\n\n     this.init = (n) => {\n        this.line.lineStyle(LINE_THICKNESS,0x000000)\n        this.line.x = ARENA_WIDTH/2-LINE_WIDTH/2\n        this.line.y = ARENA_HEIGHT/2\n        this.line.lineTo(LINE_WIDTH,0)\n        this.draw()\n        app.stage.addChild(this.line)\n\n        for (let i = 0;i<120;i++){\n            let newTick = new PIXI.Graphics()\n            newTick.lineStyle(LINE_THICKNESS,0x000000)\n            newTick.x = this.line.x \n            newTick.y = this.line.y - LINE_THICKNESS/2\n            newTick.lineTo(0,MINOR_TICK_HEIGHT)\n            app.stage.addChild(newTick)\n            this.ticks.push(newTick)\n\n            // Setup Labels Here\n            let newLabel = new PIXI.Text(i,{\n              fontFamily: \"Arial\",\n              fontSize: DX/2,\n              fill: \"0x000000\",\n              align: \"center\"\n            })\n            newLabel.anchor.x = 0.5\n            this.labels.push(newLabel)\n            newLabel.x = this.line.x + DX*i\n            newLabel.y = this.line.y + MINOR_TICK_HEIGHT\n            app.stage.addChild(newLabel)\n        }\n        this.increment(0)\n     }\n\n     this.getSetup = ()=> {\n         // update tickspan etc. based on line max.\n     }\n\n     this.increment = (inc) => {\n         // Animation go here\n         this.max += inc\n\n         // Update State - (Context Specific)\n         state.lineMax = this.max\n         updateLayoutParams()\n\n         this.ticks.forEach((e,i)=> {\n            if (i > this.max){\n                TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n            } else {\n                TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n            }\n         })\n\n         this.labels.forEach((e,i)=> {\n          if (i > this.max){\n              TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n              TweenLite.to(e,0.5,{alpha: 0})\n          } else {\n              TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n              TweenLite.to(e,0.5,{alpha: 1})\n          }\n       })\n     }\n\n     this.draw = () => {\n        this.line.width = LINE_WIDTH\n        this.line.height = LINE_THICKNESS\n        this.line.x = WINDOW_WIDTH/2 - LINE_WIDTH/2\n        this.line.y = WINDOW_HEIGHT/2\n        this.ticks.forEach((e,i)=> {\n            e.width = TICK_THICKNESS\n            e.height = MINOR_TICK_HEIGHT\n            e.y = this.line.y - LINE_THICKNESS/2\n            if (i > this.max){\n                e.x = LINE_WIDTH + this.line.x \n            } else {\n                e.x =  LINE_WIDTH/this.max*i + this.line.x\n            }\n         })\n         this.labels.forEach((e,i)=> {\n          e.y = this.line.y + MINOR_TICK_HEIGHT\n          e.style.fontSize = DX/2\n          if (i > this.max){\n              e.x = LINE_WIDTH + this.line.x \n          } else {\n              e.x =  LINE_WIDTH/this.max*i + this.line.x\n          }\n       })\n     }\n     this.init()\n  }\n\n  function makeBackground(){\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH\n    this.sprite.height = WINDOW_HEIGHT\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup',globalPointerUp)\n    this.sprite.interactive = true\n\n    app.stage.addChild(this.sprite)\n\n    this.draw = () => {\n        this.sprite.width = WINDOW_WIDTH\n        this.sprite.height = WINDOW_HEIGHT\n    }\n  }\n\n\n  function makePin(id){\n    this.sprite = new PIXI.Sprite()\n    this.sprite.id = id\n    this.sprite.texture = PIN_TEXTURE\n    this.sprite.interactive = true\n    this.sprite.anchor.x = 0.5\n    this.sprite.on('pointerdown',onDragStart)\n    this.sprite.on('pointermove',onDragMove)\n    this.sprite.on('pointerup',onDragEnd)\n    this.sprite.x = WINDOW_WIDTH/2 - LINE_WIDTH/2\n    this.sprite.val = 8\n    app.stage.addChild(this.sprite)\n\n    this.sprite.round = () => {\n\n      // Pre Computation\n      let rawLineX = this.sprite.x - numberLine.line.x\n      let n = Math.round(rawLineX/DX)\n\n      // Setting\n      this.sprite.x = numberLine.line.x + n*DX\n      this.sprite.val = n\n\n      drawWhiskers()\n      // There's gotta be a better pattern than this\n      if (this.sprite.id == 0){\n        state.valA = this.sprite.val\n      } else if (this.sprite.id == 1){\n        state.valB = this.sprite.val\n      }\n    }\n\n    this.draw = () => { \n      this.sprite.width = STRIP_HEIGHT\n      this.sprite.height = STRIP_HEIGHT\n      this.sprite.y = WINDOW_HEIGHT/2 + MINOR_TICK_HEIGHT + DX/2\n      this.sprite.x = WINDOW_WIDTH/2 - LINE_WIDTH/2 + this.sprite.val*DX\n    }\n    this.draw()\n   }\n\n  // Pin Drag Functions\n  function onDragStart(event) {\n      app.stage.addChild(this)\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n      this.dragging = true;\n      this.data = event.data;\n  }\n\n  function onDragEnd(event) {\n    this.dragging = false;\n    this.data = null;\n    this.round()\n    Rows[ActiveIndex].draw(this.x - LINE_START)\n    drawWhiskers()\n    drawButtons()\n  }\n\n  function onDragMove(event) {\n    if (this.dragging) {\n      let width = this.x - LINE_START\n      Rows[ActiveIndex].draw(width)\n      drawWhiskers()\n      let newPosition = this.data.getLocalPosition(this.parent);\n      this.x = newPosition.x + this.deltaTouch.x;\n\n      // Keep within number line bounds.\n      if (this.x < WINDOW_WIDTH/2-LINE_WIDTH/2){\n        this.dragging = false\n        this.x = WINDOW_WIDTH/2-LINE_WIDTH/2\n      } else if (this.x > WINDOW_WIDTH/2+LINE_WIDTH/2) {\n        this.dragging = false\n        this.x = WINDOW_WIDTH/2+LINE_WIDTH/2\n      }\n    }\n  }\n\n  function makeArrowButton(inc){\n    let button = new PIXI.Sprite.from(CONST.ASSETS.ARROW)\n    button.inc = inc\n    button.interactive = true\n    button.anchor.set(0.5)\n    button.on('pointerdown',()=>{\n      numberLine.increment(inc)\n      resize(null,false)\n    })\n    app.stage.addChild(button)\n\n    button.draw = () => {\n      if (button.inc == -5){\n        button.width = STRIP_HEIGHT/2\n        button.height = STRIP_HEIGHT/2\n        button.x = WINDOW_WIDTH - 1.1*button.width\n        button.y = WINDOW_HEIGHT/2 + 1/2*button.width\n        button.rotation = Math.PI\n      } else if (button.inc == 5){\n        button.width = STRIP_HEIGHT/2\n        button.height = STRIP_HEIGHT/2\n        button.x = WINDOW_WIDTH - 1.1*button.width\n        button.y = WINDOW_HEIGHT/2  - 1/2*button.width\n      }\n    }\n    return button\n  }\n\n  app.stage.on('pointerdown',resizeLine)\n  app.stage.interactive = true\n\n  function resizeLine(event){\n \n  }\n\n\n\n\n \n  function Row(num,den,width,ID){\n\n    // Internal Params\n    let touching = true   \n    \n    // Default values\n    this.numerator = num\n    this.denominator = den\n    this.width = width\n    this.id = ID\n  \n    this.container = new PIXI.Container()\n    this.container.id = ID\n    this.container.width = width\n    this.container.interactive = true\n    this.container.y = WINDOW_HEIGHT/2 - 50\n    this.container.x = LINE_START \n    this.sprites = []\n  \n\n    this.blockWidth = width / this.denominator\n\n    this.blockA = new PIXI.Graphics()\n    this.blockA.lineStyle(3,0x000000) \n    this.blockA.drawRoundedRect(0,0,this.blockWidth,50,1)\n    let myA = app.renderer.generateTexture(this.blockA)\n\n    this.blockB = new PIXI.Graphics()\n    this.blockB.beginFill(0xff4772)\n    this.blockB.lineStyle(3,0x000000) \n    this.blockB.drawRoundedRect(0,0,this.blockWidth,50,1)\n    let myB = app.renderer.generateTexture(this.blockB)\n\n    let g = new PIXI.Graphics()    \n \n  \n\n    this.incDenonimator = (inc) => {\n      g.clear()\n      g.lineStyle(3,0x000000) \n      g.drawRoundedRect(0,0,this.width,50,1)\n      let R = app.renderer.generateTexture(g)\n      let s = new PIXI.Sprite()\n      this.container.addChild(s)\n      s.texture = R\n      s.x  = 0\n\n      if (inc > 0){\n        const onComplete = ()=>{\n          s.on('pointerdown',spritePointerDown)\n          s.on('pointerup',spritePointerUp)\n          s.on('pointermove',spritePointerMoved)\n          s.interactive = true\n          s.active = false\n          this.sprites.push(s)\n          this.draw()\n        }\n        TweenMax.to(this, 0.25, {denominator: this.denominator+1,onUpdate: this.draw,onComplete: onComplete})\n      } else if (inc < 0) {\n        let removeme  = this.sprites.pop()\n        this.container.removeChild(removeme)\n        const onComplete = ()=>{\n          this.draw()\n          this.container.removeChild(s)\n        }\n        TweenMax.to(this, 0.25, {denominator: this.denominator-1,onUpdate: this.draw,onComplete: onComplete})\n      }\n    }\n\n    this.draw = (width) => {\n\n      if (width) {\n        this.width = width\n      }\n      this.blockWidth = this.width/this.denominator\n\n      this.blockA.clear()\n      this.blockA.lineStyle(3,0x000000) \n      this.blockA.drawRoundedRect(0,0,this.blockWidth,50,1)\n      myA = app.renderer.generateTexture(this.blockA)\n\n      this.blockB.clear()\n      this.blockB.beginFill(0xff4772)\n      this.blockB.lineStyle(3,0x000000) \n      this.blockB.drawRoundedRect(0,0,this.blockWidth,50,1)\n      myB = app.renderer.generateTexture(this.blockB)\n\n      for (let i = 0;i<this.sprites.length;i++){\n        if (this.sprites[i].active){\n          this.sprites[i].texture = myB\n        } else {\n          this.sprites[i].texture = myA\n        }\n\n        this.sprites[i].x = this.blockWidth*i\n        this.sprites[i].y = 0\n      }\n    }\n\n    for (let i = 0;i<this.denominator;i++) {\n      console.log(\"balls\")\n      let s = new PIXI.Sprite.from(myA)\n      s.on('pointerdown',spritePointerDown)\n      s.on('pointerup',spritePointerUp)\n      s.on('pointermove',spritePointerMoved)\n      s.interactive = true\n      s.active = false\n      s.x = i*LINE_WIDTH/this.denominator\n      s.y = WINDOW_HEIGHT/2 - 50\n      this.sprites.push(s)\n      this.container.addChild(s)\n    }\n      \n\n    //  Attached methods\n    this.container.on('pointerdown',containerPointerDown)\n    this.container.on('pointerup',containerPointerUp)\n    this.container.on('pointermove',containerPointerMove)\n\n    // Add children\n    app.stage.addChild(this.container)\n    this.width = this.container.width\n  \n\n    function spritePointerDown(event){\n      this.touched = true\n      this.dragged = false\n    }\n\n    function spritePointerMoved(event) {\n\n      if (this.touched){\n        console.log(\"pointermove\")\n        this.dragged = true\n      }\n    }\n\n    function spritePointerUp(event){\n         this.touched = false\n         console.log('this.draggeed',this.dragged)\n     if (!this.dragged) {\n        this.dragged = false\n        this.active = !this.active\n        this.alpha = 0.2\n        this.texture = this.active ? myB : myA\n        TweenLite.to(this,0.4,{alpha: 1})\n       }\n    }\n\n \n   function containerPointerDown(event) {\n      ActiveIndex = this.id\n      drawWhiskers()\n      pinA.sprite.x = this.width + LINE_START\n      this.data = event.data\n      this.startWidth = this.width\n      this.dragStartY = event.data.global.y\n      this.touching = true\n      touching = true\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n    }\n\n \n   function containerPointerUp(event) {\n      this.touching = false\n      touching = false\n    }\n\n    function containerPointerMove(event) {\n      if (this.touching){\n        const newPosition = this.data.getLocalPosition(this.parent);\n        this.y = event.data.global.y + this.deltaTouch.y\n        //this.x = event.data.global.x + this.deltaTouch.x\n        //pinA.sprite.x = this.x + this.width\n        this.dragged = true\n        drawWhiskers()\n      }\n    }\n\n\n    this.draw(width)\n\n  }\n\n  function drawWhiskers(){\n    console.log(\"Active index\",ActiveIndex)\n    console.log(\"row\",Rows)\n\n    LeftWhisker.clear()\n    LeftWhisker.lineStyle(2,0x000000)\n    LeftWhisker.moveTo(Rows[ActiveIndex].container.x,Rows[ActiveIndex].container.y)\n    LeftWhisker.lineTo(Rows[ActiveIndex].container.x,WINDOW_HEIGHT/2)\n\n    RightWhisker.clear()\n    LeftWhisker.lineStyle(2,0x000000)\n    LeftWhisker.moveTo(Rows[ActiveIndex].container.x+Rows[ActiveIndex].width,Rows[ActiveIndex].container.y)\n    LeftWhisker.lineTo(Rows[ActiveIndex].container.x+Rows[ActiveIndex].width,WINDOW_HEIGHT/2)\n  }\n\n  function globalPointerUp(){\n    // Ughhh...\n    Rows[ActiveIndex].container.touching = false\n    pinA.sprite.dragging = false\n    pinA.sprite.round()\n    Rows[ActiveIndex].draw(pinA.sprite.x - LINE_START)\n    drawWhiskers()\n    //pinB.sprite.round()\n    //stripA.draw()\n    //stripB.draw()\n    //stripALabel.draw()\n    //stripBLabel.draw()\n  }\n  \n  // Called on resize\n  function resize(newFrame,flex){\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame)\n    app.renderer.resize(WINDOW_WIDTH,WINDOW_HEIGHT)\n    numberLine.draw()\n    backGround.draw()\n    pinA.draw()\n    incButton.draw()\n    decButton.draw()\n    Rows.forEach(r=>r.draw())\n    drawWhiskers()\n  }\n\n  function updateLayoutParams(newFrame){\n    let frame;\n    if (newFrame){\n      frame = newFrame\n    } else {\n      frame = {width: WINDOW_WIDTH,height: WINDOW_HEIGHT}\n    }\n    WINDOW_WIDTH = frame.width\n    WINDOW_HEIGHT = frame.height\n    H_W_RATIO = frame.height/frame.width\n    LANDSCAPE = H_W_RATIO < 3/4\n    ARENA_WIDTH = LANDSCAPE ? 4/3*frame.height : frame.width\n    ARENA_HEIGHT = LANDSCAPE ? frame.height : 3/4*frame.width\n    LINE_WIDTH = LINE_PERCENTAGE*WINDOW_WIDTH\n    LINE_THICKNESS = LINE_WIDTH/200\n    TICK_THICKNESS = LINE_THICKNESS/2\n    MAJOR_TICK_HEIGHT = LINE_WIDTH/20\n    MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT/2\n    DX = LINE_WIDTH/state.lineMax\n    LINE_START = WINDOW_WIDTH/2 - LINE_WIDTH/2\n    STRIP_HEIGHT = LINE_WIDTH/12\n  }\n\n  // Loading Script\n  function load(){\n    let features = {'strips': true}\n    if (setup.props.features){\n      features = setup.props.features\n    }\n\n\n    backGround = new makeBackground()\n    numberLine = new makeNumberLine()\n    pinA = new makePin(0)\n    //pinB = new makePin(1)\n    //stripA = new makeStrip(0)\n    //stripB = new makeStrip(1)\n    //stripALabel = makeStripLabel(0)\n    //stripBLabel = makeStripLabel(1)\n    incButton = makeArrowButton(5)\n    decButton = makeArrowButton(-5)\n    //stripALabel.draw()\n    //stripBLabel.draw()\n    incButton.draw()\n    decButton.draw()\n    FirstRow = new Row(3,4,pinA.sprite.x - LINE_START,0)\n    SecondRow = new Row(1,3,pinA.sprite.x - LINE_START,1)\n    SecondRow.container.y = WINDOW_HEIGHT/2 - 100\n    Rows = [FirstRow,SecondRow]\n    app.stage.addChild(LeftWhisker)\n    app.stage.addChild(RightWhisker)\n    app.stage.addChild(PlusButton)\n    app.stage.addChild(MinusButton)\n    drawWhiskers()\n  }\n\n  // Call load script\n  load()\n  // Not sure where else to put this.\n  app.resize = (frame) => resize(frame)\n  app.resizable = true\n};\n"]},"metadata":{},"sourceType":"module"}