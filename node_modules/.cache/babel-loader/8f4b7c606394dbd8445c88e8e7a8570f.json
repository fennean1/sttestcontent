{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { SSL_OP_TLS_BLOCK_PADDING_BUG, SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from \"constants\";\nimport { number } from \"prop-types\";\nimport { tsExpressionWithTypeArguments, thisExpression } from \"@babel/types\";\nconst ASSETS = CONST.ASSETS;\nexport const init = (app, setup) => {\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE);\n  const LINE_PERCENTAGE = 0.8;\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN); // Initial State\n\n  let state = {\n    valA: 8,\n    valB: 8,\n    lineMax: 20\n  };\n  let FirstRow;\n  let SecondRow;\n  var Rows = [FirstRow, SecondRow]; // Layout Parameters\n\n  let WINDOW_WIDTH = setup.width;\n  let WINDOW_HEIGHT = setup.height;\n  let H_W_RATIO = setup.height / setup.width;\n  let LANDSCAPE = H_W_RATIO < 3 / 4;\n  let ARENA_WIDTH = LANDSCAPE ? 4 / 3 * setup.height : setup.width;\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3 / 4 * setup.width;\n  let LINE_WIDTH = LINE_PERCENTAGE * WINDOW_WIDTH;\n  let LINE_THICKNESS = LINE_WIDTH / 200;\n  let TICK_THICKNESS = 2 * LINE_THICKNESS / 3;\n  let MAJOR_TICK_HEIGHT = LINE_WIDTH / 20;\n  let MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT / 2;\n  let DX = LINE_WIDTH / state.lineMax;\n  let LINE_START = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n  let STRIP_HEIGHT = LINE_WIDTH / 12; // RELEVENT\n\n  let ActiveRow;\n  let LeftWhisker = new PIXI.Graphics();\n  let RightWhisker = new PIXI.Graphics();\n  let A;\n  let B; // Reference to entities. - deprecated.\n\n  let backGround;\n  let numberLine;\n  let pinA;\n  let pinB;\n  let stripA;\n  let stripB;\n  let stripBLabel;\n  let stripALabel;\n  let incButton;\n  let decButton;\n  let activePin; // Constructors (should not be called on re-draw)\n\n  function makeNumberLine() {\n    this.tickSpan = 1;\n    this.labelSpan = 1;\n    this.max = state.lineMax;\n    this.ticks = []; // size 120\n\n    this.labels = [];\n    this.line = new PIXI.Graphics();\n\n    this.init = n => {\n      this.line.lineStyle(LINE_THICKNESS, 0x000000);\n      this.line.x = ARENA_WIDTH / 2 - LINE_WIDTH / 2;\n      this.line.y = ARENA_HEIGHT / 2;\n      this.line.lineTo(LINE_WIDTH, 0);\n      this.draw();\n      app.stage.addChild(this.line);\n\n      for (let i = 0; i < 120; i++) {\n        let newTick = new PIXI.Graphics();\n        newTick.lineStyle(LINE_THICKNESS, 0x000000);\n        newTick.x = this.line.x;\n        newTick.y = this.line.y - LINE_THICKNESS / 2;\n        newTick.lineTo(0, MINOR_TICK_HEIGHT);\n        app.stage.addChild(newTick);\n        this.ticks.push(newTick); // Setup Labels Here\n\n        let newLabel = new PIXI.Text(i, {\n          fontFamily: \"Arial\",\n          fontSize: DX / 2,\n          fill: \"0x000000\",\n          align: \"center\"\n        });\n        newLabel.anchor.x = 0.5;\n        this.labels.push(newLabel);\n        newLabel.x = this.line.x + DX * i;\n        newLabel.y = this.line.y + MINOR_TICK_HEIGHT;\n        app.stage.addChild(newLabel);\n      }\n\n      this.increment(0);\n    };\n\n    this.getSetup = () => {// update tickspan etc. based on line max.\n    };\n\n    this.increment = inc => {\n      // Animation go here\n      this.max += inc; // Update State - (Context Specific)\n\n      state.lineMax = this.max;\n      updateLayoutParams();\n      this.ticks.forEach((e, i) => {\n        if (i > this.max) {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH + this.line.x\n          });\n        } else {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH / this.max * i + this.line.x\n          });\n        }\n      });\n      this.labels.forEach((e, i) => {\n        if (i > this.max) {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH + this.line.x\n          });\n          TweenLite.to(e, 0.5, {\n            alpha: 0\n          });\n        } else {\n          TweenLite.to(e, 0.5, {\n            x: LINE_WIDTH / this.max * i + this.line.x\n          });\n          TweenLite.to(e, 0.5, {\n            alpha: 1\n          });\n        }\n      });\n    };\n\n    this.draw = () => {\n      this.line.width = LINE_WIDTH;\n      this.line.height = LINE_THICKNESS;\n      this.line.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n      this.line.y = WINDOW_HEIGHT / 2;\n      this.ticks.forEach((e, i) => {\n        e.width = TICK_THICKNESS;\n        e.height = MINOR_TICK_HEIGHT;\n        e.y = this.line.y - LINE_THICKNESS / 2;\n\n        if (i > this.max) {\n          e.x = LINE_WIDTH + this.line.x;\n        } else {\n          e.x = LINE_WIDTH / this.max * i + this.line.x;\n        }\n      });\n      this.labels.forEach((e, i) => {\n        e.y = this.line.y + MINOR_TICK_HEIGHT;\n        e.style.fontSize = DX / 2;\n\n        if (i > this.max) {\n          e.x = LINE_WIDTH + this.line.x;\n        } else {\n          e.x = LINE_WIDTH / this.max * i + this.line.x;\n        }\n      });\n    };\n\n    this.init();\n  }\n\n  function makeBackground() {\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH;\n    this.sprite.height = WINDOW_HEIGHT;\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup', globalPointerUp);\n    this.sprite.interactive = true;\n    app.stage.addChild(this.sprite);\n\n    this.draw = () => {\n      this.sprite.width = WINDOW_WIDTH;\n      this.sprite.height = WINDOW_HEIGHT;\n    };\n  }\n\n  function makePin(id) {\n    this.sprite = new PIXI.Sprite();\n    this.sprite.id = id;\n    this.sprite.texture = PIN_TEXTURE;\n    this.sprite.interactive = true;\n    this.sprite.anchor.x = 0.5;\n    this.sprite.on('pointerdown', onDragStart);\n    this.sprite.on('pointermove', onDragMove);\n    this.sprite.on('pointerup', onDragEnd);\n    this.sprite.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n    this.sprite.val = 8;\n    app.stage.addChild(this.sprite);\n\n    this.sprite.round = () => {\n      // Pre Computation\n      let rawLineX = this.sprite.x - numberLine.line.x;\n      let n = Math.round(rawLineX / DX); // Setting\n\n      this.sprite.x = numberLine.line.x + n * DX;\n      this.sprite.val = n;\n      drawWhiskers(); // There's gotta be a better pattern than this\n\n      if (this.sprite.id == 0) {\n        state.valA = this.sprite.val;\n      } else if (this.sprite.id == 1) {\n        state.valB = this.sprite.val;\n      }\n    };\n\n    this.draw = () => {\n      this.sprite.width = STRIP_HEIGHT;\n      this.sprite.height = STRIP_HEIGHT;\n      this.sprite.y = WINDOW_HEIGHT / 2 + MINOR_TICK_HEIGHT + DX / 2;\n      this.sprite.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2 + this.sprite.val * DX;\n    };\n\n    this.draw();\n  } // Pin Drag Functions\n\n\n  function onDragStart(event) {\n    app.stage.addChild(this);\n    this.deltaTouch = {\n      x: this.x - event.data.global.x,\n      y: this.y - event.data.global.y\n    };\n    this.dragging = true;\n    this.data = event.data;\n  }\n\n  function onDragEnd(event) {\n    this.dragging = false;\n    this.data = null;\n    this.round();\n    ActiveRow.draw(this.x - LINE_START);\n    drawWhiskers();\n  }\n\n  function onDragMove(event) {\n    if (this.dragging) {\n      let width = this.x - LINE_START;\n      ActiveRow.draw(width);\n      drawWhiskers();\n      let newPosition = this.data.getLocalPosition(this.parent);\n      this.x = newPosition.x + this.deltaTouch.x; // Keep within number line bounds.\n\n      if (this.x < WINDOW_WIDTH / 2 - LINE_WIDTH / 2) {\n        this.dragging = false;\n        this.x = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n      } else if (this.x > WINDOW_WIDTH / 2 + LINE_WIDTH / 2) {\n        this.dragging = false;\n        this.x = WINDOW_WIDTH / 2 + LINE_WIDTH / 2;\n      }\n    }\n  }\n\n  function makeArrowButton(inc) {\n    let button = new PIXI.Sprite.from(CONST.ASSETS.ARROW);\n    button.inc = inc;\n    button.interactive = true;\n    button.anchor.set(0.5);\n    button.on('pointerdown', () => {\n      numberLine.increment(inc);\n      resize(null, false);\n    });\n    app.stage.addChild(button);\n\n    button.draw = () => {\n      if (button.inc == -5) {\n        button.width = STRIP_HEIGHT / 2;\n        button.height = STRIP_HEIGHT / 2;\n        button.x = WINDOW_WIDTH - 1.1 * button.width;\n        button.y = WINDOW_HEIGHT / 2 + 1 / 2 * button.width;\n        button.rotation = Math.PI;\n      } else if (button.inc == 5) {\n        button.width = STRIP_HEIGHT / 2;\n        button.height = STRIP_HEIGHT / 2;\n        button.x = WINDOW_WIDTH - 1.1 * button.width;\n        button.y = WINDOW_HEIGHT / 2 - 1 / 2 * button.width;\n      }\n    };\n\n    return button;\n  }\n\n  app.stage.on('pointerdown', resizeLine);\n  app.stage.interactive = true;\n\n  function resizeLine(event) {\n    drawWhiskers();\n    /*\n    let g = new PIXI.Graphics()    \n    g.lineStyle(3,0x000000) \n    g.drawRoundedRect(0,0,FirstRow.width,50,1)\n    let R = app.renderer.generateTexture(g)\n     let s = new PIXI.Sprite()\n    FirstRow.container.addChild(s)\n    s.texture = R\n    s.x  = LINE_START\n    let onComplete = ()=>{\n      FirstRow.sprites.push(s)\n      FirstRow.draw()\n    }\n    TweenMax.to(FirstRow, 0.5, {denominator: FirstRow.denominator+1,onUpdate: FirstRow.draw,onComplete: onComplete})\n    */\n  }\n\n  function Row(num, den, width) {\n    // Internal Params\n    let touching = true; // Default values\n\n    this.numerator = num;\n    this.denominator = den;\n    this.width = width;\n    this.container = new PIXI.Container();\n    this.container.width = width;\n    this.container.interactive = true;\n    this.container.y = WINDOW_HEIGHT / 2 - 50;\n    this.container.x = LINE_START;\n    this.sprites = [];\n    this.blockWidth = width / this.denominator;\n    this.blockA = new PIXI.Graphics();\n    this.blockA.lineStyle(3, 0x000000);\n    this.blockA.drawRoundedRect(0, 0, this.blockWidth, 50, 1);\n    A = app.renderer.generateTexture(this.blockA);\n    this.blockB = new PIXI.Graphics();\n    this.blockB.beginFill(0xff4772);\n    this.blockB.lineStyle(3, 0x000000);\n    this.blockB.drawRoundedRect(0, 0, this.blockWidth, 50, 1);\n    B = app.renderer.generateTexture(this.blockB);\n\n    this.draw = width => {\n      if (width) {\n        this.width = width;\n      }\n\n      this.blockWidth = this.width / this.denominator;\n      this.blockA.clear();\n      this.blockA.lineStyle(3, 0x000000);\n      this.blockA.drawRoundedRect(0, 0, this.blockWidth, 50, 1);\n      A = app.renderer.generateTexture(this.blockA);\n      this.blockB.clear();\n      this.blockB.beginFill(0xff4772);\n      this.blockB.lineStyle(3, 0x000000);\n      this.blockB.drawRoundedRect(0, 0, this.blockWidth, 50, 1);\n      B = app.renderer.generateTexture(this.blockB);\n\n      for (let i = 0; i < this.sprites.length; i++) {\n        if (this.sprites[i].active) {\n          this.sprites[i].texture = B;\n        } else {\n          this.sprites[i].texture = A;\n        }\n\n        this.sprites[i].x = this.blockWidth * i;\n        this.sprites[i].y = 0;\n      }\n    };\n\n    for (let i = 0; i < this.denominator; i++) {\n      console.log(\"balls\");\n      let s = new PIXI.Sprite.from(A);\n      s.on('pointerdown', spritePointerDown);\n      s.on('pointerup', spritePointerUp);\n      s.on('pointermove', spritePointerMoved);\n      s.interactive = true;\n      s.active = false;\n      s.x = i * LINE_WIDTH / this.denominator;\n      s.y = WINDOW_HEIGHT / 2 - 50;\n      this.sprites.push(s);\n      this.container.addChild(s);\n    } //  Attached methods\n\n\n    this.container.on('pointerdown', containerPointerDown);\n    this.container.on('pointerup', containerPointerUp);\n    this.container.on('pointermove', containerPointerMove); // Add children\n\n    app.stage.addChild(this.container);\n    this.width = this.container.width;\n\n    function spritePointerDown(event) {\n      this.touched = true;\n      this.dragged = false;\n    }\n\n    function spritePointerMoved(event) {\n      if (this.touched) {\n        console.log(\"pointermove\");\n        this.dragged = true;\n      }\n    }\n\n    function spritePointerUp(event) {\n      this.touched = false;\n      console.log('this.draggeed', this.dragged);\n\n      if (!this.dragged) {\n        this.dragged = false;\n        this.active = !this.active;\n        this.alpha = 0.2;\n        this.texture = this.active ? B : A;\n        TweenLite.to(this, 0.4, {\n          alpha: 1\n        });\n      }\n    }\n\n    function containerPointerDown(event) {\n      ActiveRow = this.parent;\n      this.data = event.data;\n      this.startWidth = this.width;\n      this.dragStartY = event.data.global.y;\n      this.touching = true;\n      touching = true;\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      };\n    }\n\n    function containerPointerUp(event) {\n      this.touching = false;\n      touching = false;\n    }\n\n    function containerPointerMove(event) {\n      if (this.touching) {\n        const newPosition = this.data.getLocalPosition(this.parent);\n        this.y = event.data.global.y + this.deltaTouch.y; //this.x = event.data.global.x + this.deltaTouch.x\n        //pinA.sprite.x = this.x + this.width\n\n        this.dragged = true;\n        drawWhiskers();\n      }\n    }\n\n    this.draw(width);\n  }\n\n  function drawWhiskers() {\n    LeftWhisker.clear();\n    LeftWhisker.lineStyle(2, 0x000000);\n    LeftWhisker.moveTo(ActiveRow.container.x, ActiveRow.container.y);\n    LeftWhisker.lineTo(ActiveRow.container.x, WINDOW_HEIGHT / 2);\n    RightWhisker.clear();\n    LeftWhisker.lineStyle(2, 0x000000);\n    LeftWhisker.moveTo(ActiveRow.container.x + ActiveRow.width, ActiveRow.container.y);\n    LeftWhisker.lineTo(ActiveRow.container.x + ActiveRow.width, WINDOW_HEIGHT / 2);\n  }\n\n  function globalPointerUp() {\n    // Ughhh...\n    FirstRow.container.touching = false;\n    pinA.sprite.dragging = false;\n    pinA.sprite.round();\n    FirstRow.draw(pinA.sprite.x - LINE_START);\n    drawWhiskers(); //pinB.sprite.round()\n    //stripA.draw()\n    //stripB.draw()\n    //stripALabel.draw()\n    //stripBLabel.draw()\n  } // Called on resize\n\n\n  function resize(newFrame, flex) {\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame);\n    app.renderer.resize(WINDOW_WIDTH, WINDOW_HEIGHT);\n    numberLine.draw();\n    backGround.draw();\n    pinA.draw();\n    incButton.draw();\n    decButton.draw();\n  }\n\n  function updateLayoutParams(newFrame) {\n    let frame;\n\n    if (newFrame) {\n      frame = newFrame;\n    } else {\n      frame = {\n        width: WINDOW_WIDTH,\n        height: WINDOW_HEIGHT\n      };\n    }\n\n    WINDOW_WIDTH = frame.width;\n    WINDOW_HEIGHT = frame.height;\n    H_W_RATIO = frame.height / frame.width;\n    LANDSCAPE = H_W_RATIO < 3 / 4;\n    ARENA_WIDTH = LANDSCAPE ? 4 / 3 * frame.height : frame.width;\n    ARENA_HEIGHT = LANDSCAPE ? frame.height : 3 / 4 * frame.width;\n    LINE_WIDTH = LINE_PERCENTAGE * WINDOW_WIDTH;\n    LINE_THICKNESS = LINE_WIDTH / 200;\n    TICK_THICKNESS = LINE_THICKNESS / 2;\n    MAJOR_TICK_HEIGHT = LINE_WIDTH / 20;\n    MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT / 2;\n    DX = LINE_WIDTH / state.lineMax;\n    LINE_START = WINDOW_WIDTH / 2 - LINE_WIDTH / 2;\n    STRIP_HEIGHT = LINE_WIDTH / 12;\n  } // Loading Script\n\n\n  function load() {\n    let features = {\n      'strips': true\n    };\n\n    if (setup.props.features) {\n      features = setup.props.features;\n    }\n\n    backGround = new makeBackground();\n    numberLine = new makeNumberLine();\n    pinA = new makePin(0); //pinB = new makePin(1)\n    //stripA = new makeStrip(0)\n    //stripB = new makeStrip(1)\n    //stripALabel = makeStripLabel(0)\n    //stripBLabel = makeStripLabel(1)\n\n    incButton = makeArrowButton(5);\n    decButton = makeArrowButton(-5); //stripALabel.draw()\n    //stripBLabel.draw()\n\n    incButton.draw();\n    decButton.draw();\n    FirstRow = new Row(3, 4, pinA.sprite.x - LINE_START);\n    SecondRow = new Row(1, 3, pinA.sprite.x - LINE_START);\n    ActiveRow = SecondRow;\n    app.stage.addChild(LeftWhisker);\n    app.stage.addChild(RightWhisker);\n    drawWhiskers();\n  } // Call load script\n\n\n  load(); // Not sure where else to put this.\n\n  app.resize = frame => resize(frame);\n\n  app.resizable = true;\n};","map":{"version":3,"sources":["/Users/andrewfenner/Documents/MindResearch/Prototypes/newtestunit/src/js/fractionstacks.js"],"names":["PIXI","CONST","TweenMax","TimelineLite","Power2","Elastic","CSSPlugin","TweenLite","TimelineMax","SSL_OP_TLS_BLOCK_PADDING_BUG","SSL_OP_SSLEAY_080_CLIENT_DH_BUG","number","tsExpressionWithTypeArguments","thisExpression","ASSETS","init","app","setup","BLUE_TEXTURE","Texture","from","BLUE_CIRCLE","LINE_PERCENTAGE","PIN_TEXTURE","SHARP_PIN","state","valA","valB","lineMax","FirstRow","SecondRow","Rows","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","H_W_RATIO","LANDSCAPE","ARENA_WIDTH","ARENA_HEIGHT","LINE_WIDTH","LINE_THICKNESS","TICK_THICKNESS","MAJOR_TICK_HEIGHT","MINOR_TICK_HEIGHT","DX","LINE_START","STRIP_HEIGHT","ActiveRow","LeftWhisker","Graphics","RightWhisker","A","B","backGround","numberLine","pinA","pinB","stripA","stripB","stripBLabel","stripALabel","incButton","decButton","activePin","makeNumberLine","tickSpan","labelSpan","max","ticks","labels","line","n","lineStyle","x","y","lineTo","draw","stage","addChild","i","newTick","push","newLabel","Text","fontFamily","fontSize","fill","align","anchor","increment","getSetup","inc","updateLayoutParams","forEach","e","to","alpha","style","makeBackground","sprite","Sprite","BLUE_GRADIENT","on","globalPointerUp","interactive","makePin","id","texture","onDragStart","onDragMove","onDragEnd","val","round","rawLineX","Math","drawWhiskers","event","deltaTouch","data","global","dragging","newPosition","getLocalPosition","parent","makeArrowButton","button","ARROW","set","resize","rotation","PI","resizeLine","Row","num","den","touching","numerator","denominator","container","Container","sprites","blockWidth","blockA","drawRoundedRect","renderer","generateTexture","blockB","beginFill","clear","length","active","console","log","s","spritePointerDown","spritePointerUp","spritePointerMoved","containerPointerDown","containerPointerUp","containerPointerMove","touched","dragged","startWidth","dragStartY","moveTo","newFrame","flex","frame","load","features","props","resizable"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nimport { SSL_OP_TLS_BLOCK_PADDING_BUG, SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from \"constants\";\nimport { number } from \"prop-types\";\nimport { tsExpressionWithTypeArguments, thisExpression } from \"@babel/types\";\nconst ASSETS = CONST.ASSETS\n\nexport const init = (app, setup) => {\n\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE)\n  const LINE_PERCENTAGE = 0.8\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN)\n\n // Initial State\n  let state = {\n    valA: 8,\n    valB: 8,\n    lineMax: 20,\n  }\n\n  let FirstRow\n  let SecondRow\n\n  var Rows = [FirstRow,SecondRow]\n\n  // Layout Parameters\n  let WINDOW_WIDTH = setup.width\n  let WINDOW_HEIGHT = setup.height\n  let H_W_RATIO = setup.height/setup.width\n  let LANDSCAPE = H_W_RATIO < 3/4\n  let ARENA_WIDTH = LANDSCAPE ? 4/3*setup.height : setup.width\n  let ARENA_HEIGHT = LANDSCAPE ? setup.height : 3/4*setup.width\n  let LINE_WIDTH = LINE_PERCENTAGE*WINDOW_WIDTH\n  let LINE_THICKNESS = LINE_WIDTH/200\n  let TICK_THICKNESS = 2*LINE_THICKNESS/3\n  let MAJOR_TICK_HEIGHT = LINE_WIDTH/20\n  let MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT/2\n  let DX = LINE_WIDTH/state.lineMax\n  let LINE_START = WINDOW_WIDTH/2 - LINE_WIDTH/2\n  let STRIP_HEIGHT = LINE_WIDTH/12\n\n\n  // RELEVENT\n  let ActiveRow;\n  let LeftWhisker  = new PIXI.Graphics()\n  let RightWhisker = new PIXI.Graphics()\n\n  let A;\n  let B;\n\n\n\n  // Reference to entities. - deprecated.\n  let backGround;\n  let numberLine;\n  let pinA;\n  let pinB;\n  let stripA;\n  let stripB;\n  let stripBLabel;\n  let stripALabel;\n  let incButton;\n  let decButton;\n  let activePin;\n\n \n  // Constructors (should not be called on re-draw)\n  function makeNumberLine(){\n     this.tickSpan = 1\n     this.labelSpan = 1\n     this.max = state.lineMax\n     this.ticks = [] // size 120\n     this.labels = []\n     this.line = new PIXI.Graphics()\n\n     this.init = (n) => {\n        this.line.lineStyle(LINE_THICKNESS,0x000000)\n        this.line.x = ARENA_WIDTH/2-LINE_WIDTH/2\n        this.line.y = ARENA_HEIGHT/2\n        this.line.lineTo(LINE_WIDTH,0)\n        this.draw()\n        app.stage.addChild(this.line)\n\n        for (let i = 0;i<120;i++){\n            let newTick = new PIXI.Graphics()\n            newTick.lineStyle(LINE_THICKNESS,0x000000)\n            newTick.x = this.line.x \n            newTick.y = this.line.y - LINE_THICKNESS/2\n            newTick.lineTo(0,MINOR_TICK_HEIGHT)\n            app.stage.addChild(newTick)\n            this.ticks.push(newTick)\n\n            // Setup Labels Here\n            let newLabel = new PIXI.Text(i,{\n              fontFamily: \"Arial\",\n              fontSize: DX/2,\n              fill: \"0x000000\",\n              align: \"center\"\n            })\n            newLabel.anchor.x = 0.5\n            this.labels.push(newLabel)\n            newLabel.x = this.line.x + DX*i\n            newLabel.y = this.line.y + MINOR_TICK_HEIGHT\n            app.stage.addChild(newLabel)\n        }\n        this.increment(0)\n     }\n\n     this.getSetup = ()=> {\n         // update tickspan etc. based on line max.\n     }\n\n     this.increment = (inc) => {\n         // Animation go here\n         this.max += inc\n\n         // Update State - (Context Specific)\n         state.lineMax = this.max\n         updateLayoutParams()\n\n         this.ticks.forEach((e,i)=> {\n            if (i > this.max){\n                TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n            } else {\n                TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n            }\n         })\n\n         this.labels.forEach((e,i)=> {\n          if (i > this.max){\n              TweenLite.to(e,0.5,{x: LINE_WIDTH + this.line.x })\n              TweenLite.to(e,0.5,{alpha: 0})\n          } else {\n              TweenLite.to(e,0.5,{x: LINE_WIDTH/this.max*i + this.line.x})\n              TweenLite.to(e,0.5,{alpha: 1})\n          }\n       })\n     }\n\n     this.draw = () => {\n        this.line.width = LINE_WIDTH\n        this.line.height = LINE_THICKNESS\n        this.line.x = WINDOW_WIDTH/2 - LINE_WIDTH/2\n        this.line.y = WINDOW_HEIGHT/2\n        this.ticks.forEach((e,i)=> {\n            e.width = TICK_THICKNESS\n            e.height = MINOR_TICK_HEIGHT\n            e.y = this.line.y - LINE_THICKNESS/2\n            if (i > this.max){\n                e.x = LINE_WIDTH + this.line.x \n            } else {\n                e.x =  LINE_WIDTH/this.max*i + this.line.x\n            }\n         })\n         this.labels.forEach((e,i)=> {\n          e.y = this.line.y + MINOR_TICK_HEIGHT\n          e.style.fontSize = DX/2\n          if (i > this.max){\n              e.x = LINE_WIDTH + this.line.x \n          } else {\n              e.x =  LINE_WIDTH/this.max*i + this.line.x\n          }\n       })\n     }\n     this.init()\n  }\n\n  function makeBackground(){\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH\n    this.sprite.height = WINDOW_HEIGHT\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup',globalPointerUp)\n    this.sprite.interactive = true\n\n    app.stage.addChild(this.sprite)\n\n    this.draw = () => {\n        this.sprite.width = WINDOW_WIDTH\n        this.sprite.height = WINDOW_HEIGHT\n    }\n  }\n\n\n  function makePin(id){\n    this.sprite = new PIXI.Sprite()\n    this.sprite.id = id\n    this.sprite.texture = PIN_TEXTURE\n    this.sprite.interactive = true\n    this.sprite.anchor.x = 0.5\n    this.sprite.on('pointerdown',onDragStart)\n    this.sprite.on('pointermove',onDragMove)\n    this.sprite.on('pointerup',onDragEnd)\n    this.sprite.x = WINDOW_WIDTH/2 - LINE_WIDTH/2\n    this.sprite.val = 8\n    app.stage.addChild(this.sprite)\n\n    this.sprite.round = () => {\n\n      // Pre Computation\n      let rawLineX = this.sprite.x - numberLine.line.x\n      let n = Math.round(rawLineX/DX)\n\n      // Setting\n      this.sprite.x = numberLine.line.x + n*DX\n      this.sprite.val = n\n\n      drawWhiskers()\n      // There's gotta be a better pattern than this\n      if (this.sprite.id == 0){\n        state.valA = this.sprite.val\n      } else if (this.sprite.id == 1){\n        state.valB = this.sprite.val\n      }\n    }\n\n    this.draw = () => { \n      this.sprite.width = STRIP_HEIGHT\n      this.sprite.height = STRIP_HEIGHT\n      this.sprite.y = WINDOW_HEIGHT/2 + MINOR_TICK_HEIGHT + DX/2\n      this.sprite.x = WINDOW_WIDTH/2 - LINE_WIDTH/2 + this.sprite.val*DX\n    }\n    this.draw()\n   }\n\n  // Pin Drag Functions\n  function onDragStart(event) {\n      app.stage.addChild(this)\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n      this.dragging = true;\n      this.data = event.data;\n  }\n\n  function onDragEnd(event) {\n    this.dragging = false;\n    this.data = null;\n    this.round()\n    ActiveRow.draw(this.x - LINE_START)\n    drawWhiskers()\n  }\n\n  function onDragMove(event) {\n    if (this.dragging) {\n      let width = this.x - LINE_START\n      ActiveRow.draw(width)\n      drawWhiskers()\n      let newPosition = this.data.getLocalPosition(this.parent);\n      this.x = newPosition.x + this.deltaTouch.x;\n\n      // Keep within number line bounds.\n      if (this.x < WINDOW_WIDTH/2-LINE_WIDTH/2){\n        this.dragging = false\n        this.x = WINDOW_WIDTH/2-LINE_WIDTH/2\n      } else if (this.x > WINDOW_WIDTH/2+LINE_WIDTH/2) {\n        this.dragging = false\n        this.x = WINDOW_WIDTH/2+LINE_WIDTH/2\n      }\n    }\n  }\n\n  function makeArrowButton(inc){\n    let button = new PIXI.Sprite.from(CONST.ASSETS.ARROW)\n    button.inc = inc\n    button.interactive = true\n    button.anchor.set(0.5)\n    button.on('pointerdown',()=>{\n      numberLine.increment(inc)\n      resize(null,false)\n    })\n    app.stage.addChild(button)\n\n    button.draw = () => {\n      if (button.inc == -5){\n        button.width = STRIP_HEIGHT/2\n        button.height = STRIP_HEIGHT/2\n        button.x = WINDOW_WIDTH - 1.1*button.width\n        button.y = WINDOW_HEIGHT/2 + 1/2*button.width\n        button.rotation = Math.PI\n      } else if (button.inc == 5){\n        button.width = STRIP_HEIGHT/2\n        button.height = STRIP_HEIGHT/2\n        button.x = WINDOW_WIDTH - 1.1*button.width\n        button.y = WINDOW_HEIGHT/2  - 1/2*button.width\n      }\n    }\n    return button\n  }\n\n  app.stage.on('pointerdown',resizeLine)\n  app.stage.interactive = true\n\n  function resizeLine(event){\n    drawWhiskers()\n    /*\n    let g = new PIXI.Graphics()    \n    g.lineStyle(3,0x000000) \n    g.drawRoundedRect(0,0,FirstRow.width,50,1)\n    let R = app.renderer.generateTexture(g)\n\n    let s = new PIXI.Sprite()\n    FirstRow.container.addChild(s)\n    s.texture = R\n    s.x  = LINE_START\n    let onComplete = ()=>{\n      FirstRow.sprites.push(s)\n      FirstRow.draw()\n    }\n    TweenMax.to(FirstRow, 0.5, {denominator: FirstRow.denominator+1,onUpdate: FirstRow.draw,onComplete: onComplete})\n    */\n  }\n\n\n\n\n \n  function Row(num,den,width){\n\n    // Internal Params\n    let touching = true   \n    \n    // Default values\n    this.numerator = num\n    this.denominator = den\n    this.width = width\n\n  \n    this.container = new PIXI.Container()\n    this.container.width = width\n    this.container.interactive = true\n    this.container.y = WINDOW_HEIGHT/2 - 50\n    this.container.x = LINE_START \n    this.sprites = []\n  \n\n    this.blockWidth = width / this.denominator\n\n    this.blockA = new PIXI.Graphics()\n    this.blockA.lineStyle(3,0x000000) \n    this.blockA.drawRoundedRect(0,0,this.blockWidth,50,1)\n    A = app.renderer.generateTexture(this.blockA)\n\n    this.blockB = new PIXI.Graphics()\n    this.blockB.beginFill(0xff4772)\n    this.blockB.lineStyle(3,0x000000) \n    this.blockB.drawRoundedRect(0,0,this.blockWidth,50,1)\n    B = app.renderer.generateTexture(this.blockB)\n\n\n    this.draw = (width) => {\n\n      if (width) {\n        this.width = width\n      }\n      this.blockWidth = this.width/this.denominator\n\n      this.blockA.clear()\n      this.blockA.lineStyle(3,0x000000) \n      this.blockA.drawRoundedRect(0,0,this.blockWidth,50,1)\n      A = app.renderer.generateTexture(this.blockA)\n\n      this.blockB.clear()\n      this.blockB.beginFill(0xff4772)\n      this.blockB.lineStyle(3,0x000000) \n      this.blockB.drawRoundedRect(0,0,this.blockWidth,50,1)\n      B = app.renderer.generateTexture(this.blockB)\n\n      for (let i = 0;i<this.sprites.length;i++){\n        if (this.sprites[i].active){\n          this.sprites[i].texture = B\n        } else {\n          this.sprites[i].texture = A\n        }\n\n        this.sprites[i].x = this.blockWidth*i\n        this.sprites[i].y = 0\n      }\n    }\n\n    for (let i = 0;i<this.denominator;i++) {\n      console.log(\"balls\")\n      let s = new PIXI.Sprite.from(A)\n      s.on('pointerdown',spritePointerDown)\n      s.on('pointerup',spritePointerUp)\n      s.on('pointermove',spritePointerMoved)\n      s.interactive = true\n      s.active = false\n      s.x = i*LINE_WIDTH/this.denominator\n      s.y = WINDOW_HEIGHT/2 - 50\n      this.sprites.push(s)\n      this.container.addChild(s)\n    }\n      \n\n    //  Attached methods\n    this.container.on('pointerdown',containerPointerDown)\n    this.container.on('pointerup',containerPointerUp)\n    this.container.on('pointermove',containerPointerMove)\n\n    // Add children\n    app.stage.addChild(this.container)\n    this.width = this.container.width\n  \n\n    function spritePointerDown(event){\n      this.touched = true\n      this.dragged = false\n    }\n\n    function spritePointerMoved(event) {\n\n      if (this.touched){\n        console.log(\"pointermove\")\n        this.dragged = true\n      }\n    }\n\n    function spritePointerUp(event){\n         this.touched = false\n         console.log('this.draggeed',this.dragged)\n     if (!this.dragged) {\n        this.dragged = false\n        this.active = !this.active\n        this.alpha = 0.2\n        this.texture = this.active ? B : A\n        TweenLite.to(this,0.4,{alpha: 1})\n       }\n    }\n\n \n   function containerPointerDown(event) {\n      ActiveRow = this.parent\n      this.data = event.data\n      this.startWidth = this.width\n      this.dragStartY = event.data.global.y\n      this.touching = true\n      touching = true\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n    }\n\n \n   function containerPointerUp(event) {\n      this.touching = false\n      touching = false\n    }\n\n    function containerPointerMove(event) {\n      if (this.touching){\n        const newPosition = this.data.getLocalPosition(this.parent);\n        this.y = event.data.global.y + this.deltaTouch.y\n        //this.x = event.data.global.x + this.deltaTouch.x\n        //pinA.sprite.x = this.x + this.width\n        this.dragged = true\n        drawWhiskers()\n      }\n    }\n\n\n    this.draw(width)\n\n  }\n\n  function drawWhiskers(){\n\n    LeftWhisker.clear()\n    LeftWhisker.lineStyle(2,0x000000)\n    LeftWhisker.moveTo(ActiveRow.container.x,ActiveRow.container.y)\n    LeftWhisker.lineTo(ActiveRow.container.x,WINDOW_HEIGHT/2)\n\n    RightWhisker.clear()\n    LeftWhisker.lineStyle(2,0x000000)\n    LeftWhisker.moveTo(ActiveRow.container.x+ActiveRow.width,ActiveRow.container.y)\n    LeftWhisker.lineTo(ActiveRow.container.x+ActiveRow.width,WINDOW_HEIGHT/2)\n  }\n\n  function globalPointerUp(){\n    // Ughhh...\n    FirstRow.container.touching = false\n    pinA.sprite.dragging = false\n    pinA.sprite.round()\n    FirstRow.draw(pinA.sprite.x - LINE_START)\n    drawWhiskers()\n    //pinB.sprite.round()\n    //stripA.draw()\n    //stripB.draw()\n    //stripALabel.draw()\n    //stripBLabel.draw()\n  }\n  \n  // Called on resize\n  function resize(newFrame,flex){\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame)\n    app.renderer.resize(WINDOW_WIDTH,WINDOW_HEIGHT)\n    numberLine.draw()\n    backGround.draw()\n    pinA.draw()\n    incButton.draw()\n    decButton.draw()\n  }\n\n  function updateLayoutParams(newFrame){\n    let frame;\n    if (newFrame){\n      frame = newFrame\n    } else {\n      frame = {width: WINDOW_WIDTH,height: WINDOW_HEIGHT}\n    }\n    WINDOW_WIDTH = frame.width\n    WINDOW_HEIGHT = frame.height\n    H_W_RATIO = frame.height/frame.width\n    LANDSCAPE = H_W_RATIO < 3/4\n    ARENA_WIDTH = LANDSCAPE ? 4/3*frame.height : frame.width\n    ARENA_HEIGHT = LANDSCAPE ? frame.height : 3/4*frame.width\n    LINE_WIDTH = LINE_PERCENTAGE*WINDOW_WIDTH\n    LINE_THICKNESS = LINE_WIDTH/200\n    TICK_THICKNESS = LINE_THICKNESS/2\n    MAJOR_TICK_HEIGHT = LINE_WIDTH/20\n    MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT/2\n    DX = LINE_WIDTH/state.lineMax\n    LINE_START = WINDOW_WIDTH/2 - LINE_WIDTH/2\n    STRIP_HEIGHT = LINE_WIDTH/12\n  }\n\n  // Loading Script\n  function load(){\n    let features = {'strips': true}\n    if (setup.props.features){\n      features = setup.props.features\n    }\n\n\n    backGround = new makeBackground()\n    numberLine = new makeNumberLine()\n    pinA = new makePin(0)\n    //pinB = new makePin(1)\n    //stripA = new makeStrip(0)\n    //stripB = new makeStrip(1)\n    //stripALabel = makeStripLabel(0)\n    //stripBLabel = makeStripLabel(1)\n    incButton = makeArrowButton(5)\n    decButton = makeArrowButton(-5)\n    //stripALabel.draw()\n    //stripBLabel.draw()\n    incButton.draw()\n    decButton.draw()\n    FirstRow = new Row(3,4,pinA.sprite.x - LINE_START)\n    SecondRow = new Row(1,3,pinA.sprite.x - LINE_START)\n    ActiveRow = SecondRow\n    app.stage.addChild(LeftWhisker)\n    app.stage.addChild(RightWhisker)\n    drawWhiskers()\n  }\n\n  // Call load script\n  load()\n  // Not sure where else to put this.\n  app.resize = (frame) => resize(frame)\n  app.resizable = true\n};\n"]},"metadata":{},"sourceType":"module"}