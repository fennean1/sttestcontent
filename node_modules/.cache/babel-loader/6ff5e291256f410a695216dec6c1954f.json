{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nconst ASSETS = CONST.ASSETS;\nexport const init = (app, setup) => {\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE);\n  const LINE_PERCENTAGE = 0.8;\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN);\n  const MEASURE_PIN_TEXTURE = new PIXI.Texture.from(ASSETS.MEASURE_PIN); // Global Vars \n\n  let Features = setup.props.features ? setup.props.features : null;\n  let FirstRow;\n  let Background;\n  let ActiveID;\n  let Dragging;\n  let ActiveRow;\n  const labels = {\n    1: \"One Whole\",\n    2: \"One Half\",\n    3: \"One Third\",\n    4: \"Fourth\",\n    5: \"5th\",\n    6: \"6th\",\n    7: \"7th\",\n    8: \"8th\",\n    9: \"9th\",\n    10: \"10th\",\n    11: \"11th\",\n    12: \"12th\",\n    13: \"13th\",\n    14: \"14th\",\n    15: \"15th\",\n    16: \"16th\",\n    17: \"17th\",\n    18: \"18th\",\n    19: \"19th\",\n    20: \"20th\"\n  }; // Layout Parameters\n\n  let WINDOW_WIDTH = setup.width;\n  let WINDOW_HEIGHT = setup.height;\n  let BAR_HEIGHT = WINDOW_HEIGHT / 15;\n  let BAR_WIDTH = WINDOW_WIDTH * 0.8;\n  let WALL_START_X = WINDOW_WIDTH / 2 - BAR_WIDTH / 2;\n  let WALL_START_Y = 2 * BAR_HEIGHT;\n  let INC_BUTTONS_HEIGHT = BAR_HEIGHT * 0.7;\n  let ANCHORS = [];\n  let ROWS = [];\n\n  function makeBackground() {\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH;\n    this.sprite.height = WINDOW_HEIGHT;\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup', globalPointerUp);\n    this.sprite.interactive = true;\n    app.stage.addChild(this.sprite);\n\n    this.draw = () => {\n      this.sprite.width = WINDOW_WIDTH;\n      this.sprite.height = WINDOW_HEIGHT;\n    };\n  }\n\n  let PlusButton = new PIXI.Sprite.from(ASSETS.PLUS_SQUARE);\n  PlusButton.interactive = true;\n  PlusButton.anchor.set(0.5);\n  PlusButton.on('pointerdown', () => {\n    PlusButton.interactive = false;\n    ActiveRow.incDenonimator(1);\n    setTimeout(() => {\n      PlusButton.interactive = true;\n    }, 300);\n  });\n  PlusButton.width = INC_BUTTONS_HEIGHT;\n  PlusButton.height = INC_BUTTONS_HEIGHT;\n  let MinusButton = new PIXI.Sprite.from(ASSETS.MINUS_SQUARE);\n  MinusButton.interactive = true;\n  MinusButton.anchor.set(0.5);\n  MinusButton.on('pointerdown', () => {\n    MinusButton.interactive = false;\n    ActiveRow.incDenonimator(-1);\n    setTimeout(() => {\n      MinusButton.interactive = true;\n    }, 300);\n  });\n  MinusButton.width = BAR_HEIGHT / 2.5;\n  MinusButton.height = BAR_HEIGHT / 2.5;\n  let resetButton = new PIXI.Sprite.from(CONST.ASSETS.RESET);\n  resetButton.interactive = true;\n  resetButton.x = BAR_HEIGHT / 2;\n  resetButton.y = BAR_HEIGHT / 2;\n  resetButton.width = BAR_HEIGHT;\n  resetButton.height = BAR_HEIGHT;\n  resetButton.on('pointerdown', reset);\n\n  function reset() {\n    Dragging = false;\n    ROWS.forEach((r, i) => {\n      r.y = ANCHORS[i];\n      r.sprites.forEach(e => {\n        e.active = false;\n        e.touched = false;\n        e.dragged = false;\n      });\n      r.draw();\n    });\n  }\n\n  function placeButtons() {\n    let w = ActiveRow.width;\n    let h = ActiveRow.height;\n    let x = ActiveRow.x + w;\n    let y = ActiveRow.y;\n    console.log(\"x,y,w,h\", x, y, w, h);\n    PlusButton.width = INC_BUTTONS_HEIGHT;\n    PlusButton.height = INC_BUTTONS_HEIGHT;\n    MinusButton.width = INC_BUTTONS_HEIGHT;\n    MinusButton.height = INC_BUTTONS_HEIGHT;\n    PlusButton.x = x + BAR_HEIGHT / 2;\n    PlusButton.y = y + BAR_HEIGHT / 2;\n    MinusButton.x = x - w - BAR_HEIGHT / 2;\n    MinusButton.y = y + BAR_HEIGHT / 2;\n  }\n\n  class Row extends PIXI.Container {\n    constructor(num, den, width, ID) {\n      super(); // This\n\n      this.incDenonimator = inc => {\n        this.blockWidth = BAR_WIDTH / (this.denominator + inc);\n        this.frameGraphics.clear();\n        this.frameGraphics.lineStyle(3, 0x000000);\n        this.frameGraphics.beginFill(0xffffff);\n        this.frameGraphics.drawRoundedRect(0, 0, BAR_WIDTH, BAR_HEIGHT, 1);\n        const frameTexture = app.renderer.generateTexture(this.frameGraphics); // New sprite starts as frame and then gets animated.\n\n        let s = new PIXI.Sprite(frameTexture);\n        let label = new PIXI.Text();\n        label.text = labels[this.denominator + inc];\n        label.alpha = 0;\n        label.anchor.set(0.5);\n        label.x = this.blockWidth / 2;\n        label.y = BAR_HEIGHT / 2;\n        s.label = label;\n        s.active = false;\n        s.dragged = false;\n        s.touched = false;\n        s.interactive = true;\n        s.addChild(label);\n        this.addChild(s);\n        this.sprites.forEach(s => {\n          this.addChild(s);\n        });\n        s.x = 0;\n\n        const onUpdate = () => {\n          this.draw();\n        };\n\n        if (inc > 0) {\n          const onComplete = () => {\n            s.on('pointerdown', this.spritePointerDown);\n            s.on('pointerup', this.spritePointerUp);\n            s.on('pointermove', this.spritePointerMoved);\n            this.sprites.push(s);\n            this.draw();\n          };\n\n          TweenMax.to(this, 0.25, {\n            denominator: this.denominator + 1,\n            onUpdate: onUpdate,\n            onComplete: onComplete\n          });\n        } else if (inc < 0) {\n          let removeme = this.sprites.pop();\n          this.removeChild(removeme);\n\n          const onComplete = () => {\n            this.removeChild(s);\n            this.sprites.forEach(s => {\n              s.label.x = this.blockWidth / 2;\n              s.label.text = labels[this.denominator];\n            });\n          };\n\n          TweenMax.to(this, 0.25, {\n            denominator: this.denominator - 1,\n            onUpdate: onUpdate,\n            onComplete: onComplete\n          });\n        }\n      };\n\n      this.interactive = true; // Default values\n\n      this.numerator = num;\n      this.denominator = den;\n      this.trueWidth = width;\n      this.id = ID;\n      this.sprites = [];\n      this.blockWidth = width / this.denominator; // Init Graphics A\n\n      this.graphicsA = new PIXI.Graphics();\n      this.graphicsA.beginFill(0xffffff);\n      this.graphicsA.lineStyle(3, 0x000000);\n      this.graphicsA.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureA = app.renderer.generateTexture(this.graphicsA); // Init Graphics B\n\n      this.graphicsB = new PIXI.Graphics();\n      this.graphicsB.beginFill(0xff4772);\n      this.graphicsB.lineStyle(3, 0x000000);\n      this.graphicsB.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureB = app.renderer.generateTexture(this.graphicsB); // Dummy frame for when animating between different fractional parts.\n\n      this.frameGraphics = new PIXI.Graphics(); // Generate Row\n\n      for (let i = 0; i < this.denominator; i++) {\n        let label = new PIXI.Text();\n        label.text = labels[this.denominator];\n        label.alpha = 0;\n        label.anchor.set(0.5);\n        label.x = this.blockWidth / 2;\n        label.y = BAR_HEIGHT / 2;\n        let s = new PIXI.Sprite.from(this.textureA);\n        s.on('pointerdown', this.spritePointerDown);\n        s.on('pointerup', this.spritePointerUp);\n        s.on('pointermove', this.spritePointerMoved);\n        s.interactive = true;\n        s.buttonMode = true;\n        s.active = false;\n        s.x = i * BAR_WIDTH / this.denominator;\n        s.y = 0;\n        s.addChild(label);\n        s.label = label;\n        this.sprites.push(s);\n        this.addChild(s);\n      } //  Attached methods\n\n\n      this.on('pointerdown', this.pointerDown);\n      this.on('pointerup', this.pointerUp);\n      this.on('pointermove', this.pointerMove);\n    }\n\n    reset() {\n      this.sprites.forEach(s => {\n        s.touched = false;\n      });\n    }\n\n    draw(width) {\n      if (width) {\n        this.trueWidth = width;\n      }\n\n      this.blockWidth = this.trueWidth / this.denominator;\n      this.graphicsA.clear();\n      this.graphicsA.beginFill(0xffffff);\n      this.graphicsA.lineStyle(3, 0x000000);\n      this.graphicsA.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureA = app.renderer.generateTexture(this.graphicsA);\n      this.graphicsB.clear();\n      this.graphicsB.beginFill(0xff4772);\n      this.graphicsB.lineStyle(3, 0x000000);\n      this.graphicsB.drawRoundedRect(0, 0, this.blockWidth, BAR_HEIGHT, 1);\n      this.textureB = app.renderer.generateTexture(this.graphicsB);\n\n      for (let i = 0; i < this.sprites.length; i++) {\n        this.sprites[i].label.text = labels[this.denominator];\n        this.sprites[i].label.x = this.blockWidth / 2;\n        console.log(\"sprites[i].active\", this.sprites[i].active);\n\n        if (this.sprites[i].active) {\n          this.sprites[i].texture = this.textureB;\n        } else {\n          this.sprites[i].texture = this.textureA;\n        }\n\n        if (BAR_HEIGHT > this.blockWidth) {\n          this.sprites[i].label.style.fontSize = this.blockWidth / 2.2;\n        }\n\n        this.sprites[i].x = this.blockWidth * i;\n        this.sprites[i].y = 0;\n      }\n    }\n\n    spritePointerDown(event) {\n      this.touched = true;\n      this.dragged = false;\n    }\n\n    spritePointerMoved(event) {\n      if (this.touched) {\n        console.log(\"pointermove\");\n        this.dragged = true;\n      }\n    }\n\n    spritePointerUp(event) {\n      console.log(\"spritepointerup\");\n      this.touched = false;\n      console.log('this.draggeed', this.dragged);\n\n      if (!this.parent.dragged && !Dragging) {\n        this.dragged = false;\n        this.active = !this.active;\n        this.alpha = 0.2;\n        this.texture = this.active ? this.parent.textureB : this.parent.textureA;\n        this.label.alpha = this.active ? 1 : 0;\n        TweenLite.to(this, 0.4, {\n          alpha: 1\n        });\n      }\n    }\n\n    pointerDown(event) {\n      ActiveRow = this;\n      placeButtons();\n      app.stage.addChild(this);\n      ActiveRow = this;\n      ActiveID = this.id;\n      this.data = event.data;\n      this.startIndex = Math.round((this.y - WALL_START_Y) / BAR_HEIGHT);\n      this.startWidth = this.width;\n      this.dragStartY = event.data.global.y;\n      this.touching = true;\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      };\n    }\n\n    pointerUp(event) {\n      console.log(\"pointerup\");\n\n      if (this.dragged) {\n        let j = this.startIndex;\n        let i = Math.round((this.y - WALL_START_Y) / BAR_HEIGHT);\n        ROWS.splice(j, 1);\n        ROWS.splice(i, 0, this);\n        TweenLite.to([PlusButton, MinusButton], 0.2, {\n          y: ANCHORS[i] + WALL_START_Y + BAR_HEIGHT / 2\n        });\n        ROWS.forEach((r, k) => {\n          TweenLite.to(r, 0.2, {\n            y: ANCHORS[k] + WALL_START_Y\n          });\n        });\n      }\n\n      this.reset();\n      this.dragged = false;\n      Dragging = false;\n      this.touching = false;\n    }\n\n    pointerMove(event) {\n      if (this.touching) {\n        placeButtons();\n        Dragging = true;\n        this.y = event.data.global.y + this.deltaTouch.y;\n        this.dragged = true;\n      }\n    }\n\n  }\n\n  function globalPointerUp() {\n    console.log(\"global pointer up\");\n\n    if (Dragging) {\n      console.log(\"dragging\");\n      ActiveRow.pointerUp();\n      Dragging = false;\n      ROWS.forEach(r => {\n        r.dragged = false;\n        r.touched = false;\n        r.sprites.map(s => {\n          s.dragged = false;\n          s.touched = false;\n        });\n      });\n    }\n  } // Called on resize\n\n\n  function resize(newFrame, flex) {\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame); //Row.draw()\n  }\n\n  function updateLayoutParams(newFrame) {\n    let frame;\n\n    if (newFrame) {\n      frame = newFrame;\n    } else {\n      frame = {\n        width: WINDOW_WIDTH,\n        height: WINDOW_HEIGHT\n      };\n    }\n  } // Loading Script\n\n\n  function load() {\n    let rows = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n    let adjustable;\n\n    if (Features) {\n      rows = Features.values;\n      adjustable = Features.adjustable;\n    }\n\n    Background = new makeBackground();\n\n    for (let i = 0; i < rows.length; i++) {\n      let newRow = new Row(0, rows[i], BAR_WIDTH, 0);\n      newRow.y = i * BAR_HEIGHT + WALL_START_Y;\n      newRow.x = WALL_START_X;\n      ANCHORS.push(i * BAR_HEIGHT);\n      ROWS.push(newRow);\n      app.stage.addChild(newRow);\n    }\n\n    ActiveRow = ROWS[0];\n\n    if (adjustable) {\n      placeButtons();\n      app.stage.addChild(MinusButton);\n      app.stage.addChild(PlusButton);\n    }\n\n    app.stage.addChild(resetButton);\n  } // Functions attached to app: (need to be destroyed)\n\n\n  app.resize = frame => resize(frame);\n\n  app.resizable = true;\n  load();\n};","map":{"version":3,"sources":["/Users/andrewfenner/Documents/MindResearch/Prototypes/newtestunit/src/js/newfractionwall.js"],"names":["PIXI","CONST","TweenMax","TimelineLite","Power2","Elastic","CSSPlugin","TweenLite","TimelineMax","ASSETS","init","app","setup","BLUE_TEXTURE","Texture","from","BLUE_CIRCLE","LINE_PERCENTAGE","PIN_TEXTURE","SHARP_PIN","MEASURE_PIN_TEXTURE","MEASURE_PIN","Features","props","features","FirstRow","Background","ActiveID","Dragging","ActiveRow","labels","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","BAR_HEIGHT","BAR_WIDTH","WALL_START_X","WALL_START_Y","INC_BUTTONS_HEIGHT","ANCHORS","ROWS","makeBackground","sprite","Sprite","BLUE_GRADIENT","x","y","on","globalPointerUp","interactive","stage","addChild","draw","PlusButton","PLUS_SQUARE","anchor","set","incDenonimator","setTimeout","MinusButton","MINUS_SQUARE","resetButton","RESET","reset","forEach","r","i","sprites","e","active","touched","dragged","placeButtons","w","h","console","log","Row","Container","constructor","num","den","ID","inc","blockWidth","denominator","frameGraphics","clear","lineStyle","beginFill","drawRoundedRect","frameTexture","renderer","generateTexture","s","label","Text","text","alpha","onUpdate","onComplete","spritePointerDown","spritePointerUp","spritePointerMoved","push","to","removeme","pop","removeChild","numerator","trueWidth","id","graphicsA","Graphics","textureA","graphicsB","textureB","buttonMode","pointerDown","pointerUp","pointerMove","length","texture","style","fontSize","event","parent","data","startIndex","Math","round","startWidth","dragStartY","global","touching","deltaTouch","j","splice","k","map","resize","newFrame","flex","updateLayoutParams","frame","load","rows","adjustable","values","newRow","resizable"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport * as CONST from \"./const.js\";\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin, TweenLite, TimelineMax } from \"gsap/TweenMax\";\nconst ASSETS = CONST.ASSETS\n\nexport const init = (app, setup) => {\n\n  // Constants\n  const BLUE_TEXTURE = new PIXI.Texture.from(CONST.ASSETS.BLUE_CIRCLE)\n  const LINE_PERCENTAGE = 0.8\n  const PIN_TEXTURE = new PIXI.Texture.from(ASSETS.SHARP_PIN)\n  const MEASURE_PIN_TEXTURE = new PIXI.Texture.from(ASSETS.MEASURE_PIN)\n\n// Global Vars \n  let Features = setup.props.features ? setup.props.features : null\n  let FirstRow;\n  let Background;\n  let ActiveID;\n  let Dragging;\n  let ActiveRow;\n\n  const labels = {\n    1: \"One Whole\",\n    2: \"One Half\",\n    3: \"One Third\",\n    4: \"Fourth\",\n    5: \"5th\",\n    6: \"6th\",\n    7: \"7th\",\n    8: \"8th\",\n    9: \"9th\",\n    10: \"10th\",\n    11: \"11th\",\n    12: \"12th\",\n    13: \"13th\",\n    14: \"14th\",\n    15: \"15th\",\n    16: \"16th\",\n    17: \"17th\",\n    18: \"18th\",\n    19: \"19th\",\n    20: \"20th\",\n  };\n\n\n  // Layout Parameters\n  let WINDOW_WIDTH = setup.width\n  let WINDOW_HEIGHT = setup.height\n  let BAR_HEIGHT = WINDOW_HEIGHT/15\n  let BAR_WIDTH = WINDOW_WIDTH*0.8\n  let WALL_START_X = WINDOW_WIDTH/2 - BAR_WIDTH/2\n  let WALL_START_Y = 2*BAR_HEIGHT \n  let INC_BUTTONS_HEIGHT = BAR_HEIGHT*0.7\n  let ANCHORS = []\n  let ROWS = []\n\n  function makeBackground(){\n    // Setup Background\n    this.sprite = new PIXI.Sprite.from(CONST.ASSETS.BLUE_GRADIENT);\n    this.sprite.width = WINDOW_WIDTH\n    this.sprite.height = WINDOW_HEIGHT\n    this.sprite.x = 0;\n    this.sprite.y = 0;\n    this.sprite.on('pointerup',globalPointerUp)\n    this.sprite.interactive = true\n\n    app.stage.addChild(this.sprite)\n\n    this.draw = () => {\n        this.sprite.width = WINDOW_WIDTH\n        this.sprite.height = WINDOW_HEIGHT\n    }\n  }\n\n  let PlusButton = new PIXI.Sprite.from(ASSETS.PLUS_SQUARE)\n  \n  PlusButton.interactive = true\n  PlusButton.anchor.set(0.5)\n  PlusButton.on('pointerdown',()=>{\n    PlusButton.interactive = false\n    ActiveRow.incDenonimator(1)\n    setTimeout(()=>{PlusButton.interactive = true},300)\n  })\n  PlusButton.width = INC_BUTTONS_HEIGHT\n  PlusButton.height = INC_BUTTONS_HEIGHT\n\n  let MinusButton = new PIXI.Sprite.from(ASSETS.MINUS_SQUARE)\n  MinusButton.interactive = true\n  MinusButton.anchor.set(0.5)\n  MinusButton.on('pointerdown',()=>{\n    MinusButton.interactive = false\n    ActiveRow.incDenonimator(-1)\n    setTimeout(()=>{MinusButton.interactive = true},300)\n  })\n  MinusButton.width = BAR_HEIGHT/2.5\n  MinusButton.height = BAR_HEIGHT/2.5\n\n\n  let resetButton = new PIXI.Sprite.from(CONST.ASSETS.RESET)\n  resetButton.interactive = true\n  resetButton.x = BAR_HEIGHT/2\n  resetButton.y = BAR_HEIGHT/2\n  resetButton.width = BAR_HEIGHT\n  resetButton.height = BAR_HEIGHT\n  resetButton.on('pointerdown',reset)\n\n\n  function reset(){\n    Dragging = false\n    ROWS.forEach((r,i)=>{\n      r.y = ANCHORS[i]\n      r.sprites.forEach(e=>{\n        e.active = false\n        e.touched = false \n        e.dragged = false\n      })\n      r.draw()\n    })\n  }\n\n  function placeButtons(){\n\n    let w = ActiveRow.width\n    let h = ActiveRow.height \n    let x = ActiveRow.x + w \n    let y = ActiveRow.y\n    console.log(\"x,y,w,h\",x,y,w,h)\n\n    PlusButton.width = INC_BUTTONS_HEIGHT\n    PlusButton.height = INC_BUTTONS_HEIGHT\n    MinusButton.width = INC_BUTTONS_HEIGHT\n    MinusButton.height = INC_BUTTONS_HEIGHT\n  \n    PlusButton.x = x +  BAR_HEIGHT/2\n    PlusButton.y = y + BAR_HEIGHT/2\n    MinusButton.x = x - w - BAR_HEIGHT/2\n    MinusButton.y = y + BAR_HEIGHT/2\n\n  }\n\n  class Row extends PIXI.Container {\n\n    constructor(num,den,width,ID) {\n      super()\n\n      // This\n      this.interactive = true\n\n        // Default values\n      this.numerator = num\n      this.denominator = den\n      this.trueWidth = width\n      this.id = ID\n      this.sprites = []\n      this.blockWidth = width / this.denominator\n\n\n      // Init Graphics A\n      this.graphicsA = new PIXI.Graphics()\n      this.graphicsA.beginFill(0xffffff)\n      this.graphicsA.lineStyle(3,0x000000) \n      this.graphicsA.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureA = app.renderer.generateTexture(this.graphicsA)\n\n      // Init Graphics B\n      this.graphicsB  = new PIXI.Graphics()\n      this.graphicsB.beginFill(0xff4772)\n      this.graphicsB.lineStyle(3,0x000000) \n      this.graphicsB.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureB = app.renderer.generateTexture(this.graphicsB)\n\n      // Dummy frame for when animating between different fractional parts.\n      this.frameGraphics = new PIXI.Graphics()    \n  \n      // Generate Row\n      for (let i = 0;i<this.denominator;i++) {\n        let label = new PIXI.Text()\n        label.text = labels[this.denominator]\n        label.alpha = 0\n        label.anchor.set(0.5)\n        label.x = this.blockWidth/2\n        label.y = BAR_HEIGHT/2\n        let s = new PIXI.Sprite.from(this.textureA)\n        s.on('pointerdown',this.spritePointerDown)\n        s.on('pointerup',this.spritePointerUp)\n        s.on('pointermove',this.spritePointerMoved)\n        s.interactive = true\n        s.buttonMode = true\n        s.active = false\n        s.x = i*BAR_WIDTH/this.denominator\n        s.y = 0\n        s.addChild(label)\n        s.label = label\n        this.sprites.push(s)\n        this.addChild(s)\n      }\n            //  Attached methods\n      this.on('pointerdown',this.pointerDown)\n      this.on('pointerup',this.pointerUp)\n      this.on('pointermove',this.pointerMove)\n\n    }\n\n    reset() {\n      this.sprites.forEach(s=>{s.touched = false})\n    }\n\n  \n\n    incDenonimator = (inc) => {\n      \n      this.blockWidth = BAR_WIDTH/(this.denominator+inc)\n      this.frameGraphics.clear()\n      this.frameGraphics.lineStyle(3,0x000000) \n      this.frameGraphics.beginFill(0xffffff)\n      this.frameGraphics.drawRoundedRect(0,0,BAR_WIDTH,BAR_HEIGHT,1)\n\n      const frameTexture = app.renderer.generateTexture(this.frameGraphics)\n      \n      // New sprite starts as frame and then gets animated.\n      let s = new PIXI.Sprite(frameTexture)\n      let label = new PIXI.Text()\n      label.text = labels[this.denominator+inc]\n      label.alpha = 0\n      label.anchor.set(0.5)\n      label.x = this.blockWidth/2\n      label.y = BAR_HEIGHT/2\n      s.label = label\n      s.active = false\n      s.dragged = false \n      s.touched = false\n      s.interactive = true\n      s.addChild(label)\n      this.addChild(s)\n      this.sprites.forEach(s=>{\n        this.addChild(s)\n      })\n      s.x  = 0\n      const onUpdate = ()=>{this.draw()}\n      if (inc > 0){\n        const onComplete = ()=>{\n          s.on('pointerdown',this.spritePointerDown)\n          s.on('pointerup',this.spritePointerUp)\n          s.on('pointermove',this.spritePointerMoved)\n          this.sprites.push(s)\n          this.draw()\n        }\n        TweenMax.to(this, 0.25, {denominator: this.denominator+1,onUpdate: onUpdate,onComplete: onComplete})\n      } else if (inc < 0) {\n        let removeme  = this.sprites.pop()\n        this.removeChild(removeme)\n        const onComplete = ()=>{\n          this.removeChild(s)\n          this.sprites.forEach(s=>{\n            s.label.x = this.blockWidth/2\n            s.label.text = labels[this.denominator]})\n        }\n        TweenMax.to(this, 0.25, {denominator: this.denominator-1,onUpdate: onUpdate,onComplete: onComplete})\n      }\n    }\n\n    draw(width) {\n\n      if (width) {\n        this.trueWidth = width\n      }\n\n      this.blockWidth = (this.trueWidth)/this.denominator\n\n      this.graphicsA.clear()\n      this.graphicsA.beginFill(0xffffff)\n      this.graphicsA.lineStyle(3,0x000000) \n      this.graphicsA.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureA = app.renderer.generateTexture(this.graphicsA)\n\n      this.graphicsB.clear()\n      this.graphicsB.beginFill(0xff4772)\n      this.graphicsB.lineStyle(3,0x000000) \n      this.graphicsB.drawRoundedRect(0,0,this.blockWidth,BAR_HEIGHT,1)\n      this.textureB = app.renderer.generateTexture(this.graphicsB)\n\n      for (let i = 0;i<this.sprites.length;i++){\n        this.sprites[i].label.text = labels[this.denominator]\n        this.sprites[i].label.x = this.blockWidth/2\n        console.log(\"sprites[i].active\",this.sprites[i].active)\n        if (this.sprites[i].active){\n          this.sprites[i].texture = this.textureB\n        } else {\n          this.sprites[i].texture = this.textureA\n        }\n        if (BAR_HEIGHT > this.blockWidth){\n          this.sprites[i].label.style.fontSize = this.blockWidth/2.2\n        }\n        this.sprites[i].x = this.blockWidth*i\n        this.sprites[i].y = 0\n      }\n    }\n\n    spritePointerDown(event){\n      this.touched = true\n      this.dragged = false\n    }\n\n    spritePointerMoved(event) {\n      if (this.touched){\n        console.log(\"pointermove\")\n        this.dragged = true\n      }\n    }\n\n    spritePointerUp(event){\n      console.log(\"spritepointerup\")\n         this.touched = false\n         console.log('this.draggeed',this.dragged)\n     if (!this.parent.dragged && !Dragging) {\n        this.dragged = false\n        this.active = !this.active\n        this.alpha = 0.2\n        this.texture = this.active ? this.parent.textureB : this.parent.textureA\n        this.label.alpha = this.active ? 1 : 0\n        TweenLite.to(this,0.4,{alpha: 1})\n       }\n    }\n\n \n   pointerDown(event) {\n     ActiveRow = this\n     placeButtons()\n      app.stage.addChild(this)\n      ActiveRow = this\n      ActiveID = this.id\n      this.data = event.data\n      this.startIndex = Math.round((this.y-WALL_START_Y)/BAR_HEIGHT)\n      this.startWidth = this.width\n      this.dragStartY = event.data.global.y\n      this.touching = true\n      this.deltaTouch = {\n        x: this.x - event.data.global.x,\n        y: this.y - event.data.global.y\n      }\n    }\n  \n  \n \n   pointerUp(event) {\n     console.log(\"pointerup\")\n    if (this.dragged){\n      let j = this.startIndex\n      let i = Math.round((this.y-WALL_START_Y)/BAR_HEIGHT)\n      ROWS.splice(j,1)\n      ROWS.splice(i,0,this)\n      TweenLite.to([PlusButton,MinusButton],0.2,{y: ANCHORS[i]+WALL_START_Y+BAR_HEIGHT/2})\n      ROWS.forEach((r,k)=> {\n        TweenLite.to(r,0.2,{y: ANCHORS[k]+WALL_START_Y})\n      })\n    } \n      this.reset()\n      this.dragged = false\n      Dragging = false\n      this.touching = false\n    }\n\n    pointerMove(event) {\n      if (this.touching){\n        placeButtons()\n        Dragging = true\n        this.y = event.data.global.y + this.deltaTouch.y\n        this.dragged = true\n      }\n    }\n  }\n\n\n\n  function globalPointerUp(){\n    console.log(\"global pointer up\")\n    if (Dragging){\n      console.log(\"dragging\")\n      ActiveRow.pointerUp()\n      Dragging = false\n      ROWS.forEach(r=>{\n        r.dragged = false\n        r.touched = false\n        r.sprites.map(s=>{\n          s.dragged = false\n          s.touched = false})\n      })\n    }\n  }\n  \n  // Called on resize\n  function resize(newFrame,flex){\n    // Make sure all layout parameters are up to date.\n    updateLayoutParams(newFrame)\n    //Row.draw()\n  }\n\n  function updateLayoutParams(newFrame){\n    let frame;\n    if (newFrame){\n      frame = newFrame\n    } else {\n      frame = {width: WINDOW_WIDTH,height: WINDOW_HEIGHT}\n    }\n  }\n\n\n  // Loading Script\n  function load(){\n    let rows = [1,2,3,4,5,6,7,8,9,10,11,12]\n    let adjustable\n    if (Features){\n        rows = Features.values \n        adjustable = Features.adjustable\n    } \n\n\n    Background = new makeBackground()\n    for (let i = 0;i<rows.length;i++){\n      let newRow = new Row(0,rows[i],BAR_WIDTH,0)\n      newRow.y = i*BAR_HEIGHT + WALL_START_Y\n      newRow.x = WALL_START_X\n      ANCHORS.push(i*BAR_HEIGHT)\n      ROWS.push(newRow)\n      app.stage.addChild(newRow)\n    }\n    ActiveRow = ROWS[0]\n    if (adjustable){\n      placeButtons()\n      app.stage.addChild(MinusButton)\n      app.stage.addChild(PlusButton)\n    }\n    app.stage.addChild(resetButton)\n  }\n\n  // Functions attached to app: (need to be destroyed)\n  app.resize = (frame) => resize(frame)\n  app.resizable = true\n\n  load()\n};\n"]},"metadata":{},"sourceType":"module"}